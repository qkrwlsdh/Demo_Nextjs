/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(home)/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Cworkspace%5CLEARN-NEXTJS%5Capp%5C(home)%5Cpage.tsx&server=false!":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Cworkspace%5CLEARN-NEXTJS%5Capp%5C(home)%5Cpage.tsx&server=false! ***!
  \*************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/(home)/page.tsx */ \"(app-pages-browser)/./app/(home)/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz1DJTNBJTVDd29ya3NwYWNlJTVDTEVBUk4tTkVYVEpTJTVDYXBwJTVDKGhvbWUpJTVDcGFnZS50c3gmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvPzE2NmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCJDOlxcXFx3b3Jrc3BhY2VcXFxcTEVBUk4tTkVYVEpTXFxcXGFwcFxcXFwoaG9tZSlcXFxccGFnZS50c3hcIikiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=C%3A%5Cworkspace%5CLEARN-NEXTJS%5Capp%5C(home)%5Cpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/boolbase/index.js":
/*!****************************************!*\
  !*** ./node_modules/boolbase/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = {\n    trueFunc: function trueFunc() {\n        return true;\n    },\n    falseFunc: function falseFunc() {\n        return false;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ib29sYmFzZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLE9BQU9DLE9BQU8sR0FBRztJQUNoQkMsVUFBVSxTQUFTQTtRQUNsQixPQUFPO0lBQ1I7SUFDQUMsV0FBVyxTQUFTQTtRQUNuQixPQUFPO0lBQ1I7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvYm9vbGJhc2UvaW5kZXguanM/NTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcblx0dHJ1ZUZ1bmM6IGZ1bmN0aW9uIHRydWVGdW5jKCl7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cdGZhbHNlRnVuYzogZnVuY3Rpb24gZmFsc2VGdW5jKCl7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59OyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidHJ1ZUZ1bmMiLCJmYWxzZUZ1bmMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/boolbase/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio-select/lib/helpers.js":
/*!****************************************************!*\
  !*** ./node_modules/cheerio-select/lib/helpers.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.groupSelectors = exports.getDocumentRoot = void 0;\nvar positionals_js_1 = __webpack_require__(/*! ./positionals.js */ \"(app-pages-browser)/./node_modules/cheerio-select/lib/positionals.js\");\nfunction getDocumentRoot(node) {\n    while(node.parent)node = node.parent;\n    return node;\n}\nexports.getDocumentRoot = getDocumentRoot;\nfunction groupSelectors(selectors) {\n    var filteredSelectors = [];\n    var plainSelectors = [];\n    for(var _i = 0, selectors_1 = selectors; _i < selectors_1.length; _i++){\n        var selector = selectors_1[_i];\n        if (selector.some(positionals_js_1.isFilter)) {\n            filteredSelectors.push(selector);\n        } else {\n            plainSelectors.push(selector);\n        }\n    }\n    return [\n        plainSelectors,\n        filteredSelectors\n    ];\n}\nexports.groupSelectors = groupSelectors; //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvLXNlbGVjdC9saWIvaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDeEQsSUFBSUksbUJBQW1CQyxtQkFBT0EsQ0FBQyw4RkFBa0I7QUFDakQsU0FBU0YsZ0JBQWdCRyxJQUFJO0lBQ3pCLE1BQU9BLEtBQUtDLE1BQU0sQ0FDZEQsT0FBT0EsS0FBS0MsTUFBTTtJQUN0QixPQUFPRDtBQUNYO0FBQ0FOLHVCQUF1QixHQUFHRztBQUMxQixTQUFTRCxlQUFlTSxTQUFTO0lBQzdCLElBQUlDLG9CQUFvQixFQUFFO0lBQzFCLElBQUlDLGlCQUFpQixFQUFFO0lBQ3ZCLElBQUssSUFBSUMsS0FBSyxHQUFHQyxjQUFjSixXQUFXRyxLQUFLQyxZQUFZQyxNQUFNLEVBQUVGLEtBQU07UUFDckUsSUFBSUcsV0FBV0YsV0FBVyxDQUFDRCxHQUFHO1FBQzlCLElBQUlHLFNBQVNDLElBQUksQ0FBQ1gsaUJBQWlCWSxRQUFRLEdBQUc7WUFDMUNQLGtCQUFrQlEsSUFBSSxDQUFDSDtRQUMzQixPQUNLO1lBQ0RKLGVBQWVPLElBQUksQ0FBQ0g7UUFDeEI7SUFDSjtJQUNBLE9BQU87UUFBQ0o7UUFBZ0JEO0tBQWtCO0FBQzlDO0FBQ0FULHNCQUFzQixHQUFHRSxnQkFDekIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvLXNlbGVjdC9saWIvaGVscGVycy5qcz9lNDE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ncm91cFNlbGVjdG9ycyA9IGV4cG9ydHMuZ2V0RG9jdW1lbnRSb290ID0gdm9pZCAwO1xudmFyIHBvc2l0aW9uYWxzX2pzXzEgPSByZXF1aXJlKFwiLi9wb3NpdGlvbmFscy5qc1wiKTtcbmZ1bmN0aW9uIGdldERvY3VtZW50Um9vdChub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUucGFyZW50KVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgcmV0dXJuIG5vZGU7XG59XG5leHBvcnRzLmdldERvY3VtZW50Um9vdCA9IGdldERvY3VtZW50Um9vdDtcbmZ1bmN0aW9uIGdyb3VwU2VsZWN0b3JzKHNlbGVjdG9ycykge1xuICAgIHZhciBmaWx0ZXJlZFNlbGVjdG9ycyA9IFtdO1xuICAgIHZhciBwbGFpblNlbGVjdG9ycyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMCwgc2VsZWN0b3JzXzEgPSBzZWxlY3RvcnM7IF9pIDwgc2VsZWN0b3JzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHNlbGVjdG9yc18xW19pXTtcbiAgICAgICAgaWYgKHNlbGVjdG9yLnNvbWUocG9zaXRpb25hbHNfanNfMS5pc0ZpbHRlcikpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkU2VsZWN0b3JzLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGxhaW5TZWxlY3RvcnMucHVzaChzZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtwbGFpblNlbGVjdG9ycywgZmlsdGVyZWRTZWxlY3RvcnNdO1xufVxuZXhwb3J0cy5ncm91cFNlbGVjdG9ycyA9IGdyb3VwU2VsZWN0b3JzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJncm91cFNlbGVjdG9ycyIsImdldERvY3VtZW50Um9vdCIsInBvc2l0aW9uYWxzX2pzXzEiLCJyZXF1aXJlIiwibm9kZSIsInBhcmVudCIsInNlbGVjdG9ycyIsImZpbHRlcmVkU2VsZWN0b3JzIiwicGxhaW5TZWxlY3RvcnMiLCJfaSIsInNlbGVjdG9yc18xIiwibGVuZ3RoIiwic2VsZWN0b3IiLCJzb21lIiwiaXNGaWx0ZXIiLCJwdXNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio-select/lib/helpers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio-select/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/cheerio-select/lib/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.select = exports.filter = exports.some = exports.is = exports.aliases = exports.pseudos = exports.filters = void 0;\nvar css_what_1 = __webpack_require__(/*! css-what */ \"(app-pages-browser)/./node_modules/css-what/lib/es/index.js\");\nvar css_select_1 = __webpack_require__(/*! css-select */ \"(app-pages-browser)/./node_modules/css-select/lib/index.js\");\nvar DomUtils = __importStar(__webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\"));\nvar boolbase = __importStar(__webpack_require__(/*! boolbase */ \"(app-pages-browser)/./node_modules/boolbase/index.js\"));\nvar helpers_js_1 = __webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/./node_modules/cheerio-select/lib/helpers.js\");\nvar positionals_js_1 = __webpack_require__(/*! ./positionals.js */ \"(app-pages-browser)/./node_modules/cheerio-select/lib/positionals.js\");\n// Re-export pseudo extension points\nvar css_select_2 = __webpack_require__(/*! css-select */ \"(app-pages-browser)/./node_modules/css-select/lib/index.js\");\nObject.defineProperty(exports, \"filters\", ({\n    enumerable: true,\n    get: function() {\n        return css_select_2.filters;\n    }\n}));\nObject.defineProperty(exports, \"pseudos\", ({\n    enumerable: true,\n    get: function() {\n        return css_select_2.pseudos;\n    }\n}));\nObject.defineProperty(exports, \"aliases\", ({\n    enumerable: true,\n    get: function() {\n        return css_select_2.aliases;\n    }\n}));\nvar UNIVERSAL_SELECTOR = {\n    type: css_what_1.SelectorType.Universal,\n    namespace: null\n};\nvar SCOPE_PSEUDO = {\n    type: css_what_1.SelectorType.Pseudo,\n    name: \"scope\",\n    data: null\n};\nfunction is(element, selector, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return some([\n        element\n    ], selector, options);\n}\nexports.is = is;\nfunction some(elements, selector, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    if (typeof selector === \"function\") return elements.some(selector);\n    var _a = (0, helpers_js_1.groupSelectors)((0, css_what_1.parse)(selector)), plain = _a[0], filtered = _a[1];\n    return plain.length > 0 && elements.some((0, css_select_1._compileToken)(plain, options)) || filtered.some(function(sel) {\n        return filterBySelector(sel, elements, options).length > 0;\n    });\n}\nexports.some = some;\nfunction filterByPosition(filter, elems, data, options) {\n    var num = typeof data === \"string\" ? parseInt(data, 10) : NaN;\n    switch(filter){\n        case \"first\":\n        case \"lt\":\n            // Already done in `getLimit`\n            return elems;\n        case \"last\":\n            return elems.length > 0 ? [\n                elems[elems.length - 1]\n            ] : elems;\n        case \"nth\":\n        case \"eq\":\n            return isFinite(num) && Math.abs(num) < elems.length ? [\n                num < 0 ? elems[elems.length + num] : elems[num]\n            ] : [];\n        case \"gt\":\n            return isFinite(num) ? elems.slice(num + 1) : [];\n        case \"even\":\n            return elems.filter(function(_, i) {\n                return i % 2 === 0;\n            });\n        case \"odd\":\n            return elems.filter(function(_, i) {\n                return i % 2 === 1;\n            });\n        case \"not\":\n            {\n                var filtered_1 = new Set(filterParsed(data, elems, options));\n                return elems.filter(function(e) {\n                    return !filtered_1.has(e);\n                });\n            }\n    }\n}\nfunction filter(selector, elements, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    return filterParsed((0, css_what_1.parse)(selector), elements, options);\n}\nexports.filter = filter;\n/**\n * Filter a set of elements by a selector.\n *\n * Will return elements in the original order.\n *\n * @param selector Selector to filter by.\n * @param elements Elements to filter.\n * @param options Options for selector.\n */ function filterParsed(selector, elements, options) {\n    if (elements.length === 0) return [];\n    var _a = (0, helpers_js_1.groupSelectors)(selector), plainSelectors = _a[0], filteredSelectors = _a[1];\n    var found;\n    if (plainSelectors.length) {\n        var filtered = filterElements(elements, plainSelectors, options);\n        // If there are no filters, just return\n        if (filteredSelectors.length === 0) {\n            return filtered;\n        }\n        // Otherwise, we have to do some filtering\n        if (filtered.length) {\n            found = new Set(filtered);\n        }\n    }\n    for(var i = 0; i < filteredSelectors.length && (found === null || found === void 0 ? void 0 : found.size) !== elements.length; i++){\n        var filteredSelector = filteredSelectors[i];\n        var missing = found ? elements.filter(function(e) {\n            return DomUtils.isTag(e) && !found.has(e);\n        }) : elements;\n        if (missing.length === 0) break;\n        var filtered = filterBySelector(filteredSelector, elements, options);\n        if (filtered.length) {\n            if (!found) {\n                /*\n                 * If we haven't found anything before the last selector,\n                 * just return what we found now.\n                 */ if (i === filteredSelectors.length - 1) {\n                    return filtered;\n                }\n                found = new Set(filtered);\n            } else {\n                filtered.forEach(function(el) {\n                    return found.add(el);\n                });\n            }\n        }\n    }\n    return typeof found !== \"undefined\" ? found.size === elements.length ? elements : elements.filter(function(el) {\n        return found.has(el);\n    }) : [];\n}\nfunction filterBySelector(selector, elements, options) {\n    var _a;\n    if (selector.some(css_what_1.isTraversal)) {\n        /*\n         * Get root node, run selector with the scope\n         * set to all of our nodes.\n         */ var root = (_a = options.root) !== null && _a !== void 0 ? _a : (0, helpers_js_1.getDocumentRoot)(elements[0]);\n        var opts = __assign(__assign({}, options), {\n            context: elements,\n            relativeSelector: false\n        });\n        selector.push(SCOPE_PSEUDO);\n        return findFilterElements(root, selector, opts, true, elements.length);\n    }\n    // Performance optimization: If we don't have to traverse, just filter set.\n    return findFilterElements(elements, selector, options, false, elements.length);\n}\nfunction select(selector, root, options, limit) {\n    if (options === void 0) {\n        options = {};\n    }\n    if (limit === void 0) {\n        limit = Infinity;\n    }\n    if (typeof selector === \"function\") {\n        return find(root, selector);\n    }\n    var _a = (0, helpers_js_1.groupSelectors)((0, css_what_1.parse)(selector)), plain = _a[0], filtered = _a[1];\n    var results = filtered.map(function(sel) {\n        return findFilterElements(root, sel, options, true, limit);\n    });\n    // Plain selectors can be queried in a single go\n    if (plain.length) {\n        results.push(findElements(root, plain, options, limit));\n    }\n    if (results.length === 0) {\n        return [];\n    }\n    // If there was only a single selector, just return the result\n    if (results.length === 1) {\n        return results[0];\n    }\n    // Sort results, filtering for duplicates\n    return DomUtils.uniqueSort(results.reduce(function(a, b) {\n        return __spreadArray(__spreadArray([], a, true), b, true);\n    }));\n}\nexports.select = select;\n/**\n *\n * @param root Element(s) to search from.\n * @param selector Selector to look for.\n * @param options Options for querying.\n * @param queryForSelector Query multiple levels deep for the initial selector, even if it doesn't contain a traversal.\n */ function findFilterElements(root, selector, options, queryForSelector, totalLimit) {\n    var filterIndex = selector.findIndex(positionals_js_1.isFilter);\n    var sub = selector.slice(0, filterIndex);\n    var filter = selector[filterIndex];\n    // If we are at the end of the selector, we can limit the number of elements to retrieve.\n    var partLimit = selector.length - 1 === filterIndex ? totalLimit : Infinity;\n    /*\n     * Set the number of elements to retrieve.\n     * Eg. for :first, we only have to get a single element.\n     */ var limit = (0, positionals_js_1.getLimit)(filter.name, filter.data, partLimit);\n    if (limit === 0) return [];\n    /*\n     * Skip `findElements` call if our selector starts with a positional\n     * pseudo.\n     */ var elemsNoLimit = sub.length === 0 && !Array.isArray(root) ? DomUtils.getChildren(root).filter(DomUtils.isTag) : sub.length === 0 ? (Array.isArray(root) ? root : [\n        root\n    ]).filter(DomUtils.isTag) : queryForSelector || sub.some(css_what_1.isTraversal) ? findElements(root, [\n        sub\n    ], options, limit) : filterElements(root, [\n        sub\n    ], options);\n    var elems = elemsNoLimit.slice(0, limit);\n    var result = filterByPosition(filter.name, elems, filter.data, options);\n    if (result.length === 0 || selector.length === filterIndex + 1) {\n        return result;\n    }\n    var remainingSelector = selector.slice(filterIndex + 1);\n    var remainingHasTraversal = remainingSelector.some(css_what_1.isTraversal);\n    if (remainingHasTraversal) {\n        if ((0, css_what_1.isTraversal)(remainingSelector[0])) {\n            var type = remainingSelector[0].type;\n            if (type === css_what_1.SelectorType.Sibling || type === css_what_1.SelectorType.Adjacent) {\n                // If we have a sibling traversal, we need to also look at the siblings.\n                result = (0, css_select_1.prepareContext)(result, DomUtils, true);\n            }\n            // Avoid a traversal-first selector error.\n            remainingSelector.unshift(UNIVERSAL_SELECTOR);\n        }\n        options = __assign(__assign({}, options), {\n            // Avoid absolutizing the selector\n            relativeSelector: false,\n            /*\n             * Add a custom root func, to make sure traversals don't match elements\n             * that aren't a part of the considered tree.\n             */ rootFunc: function(el) {\n                return result.includes(el);\n            }\n        });\n    } else if (options.rootFunc && options.rootFunc !== boolbase.trueFunc) {\n        options = __assign(__assign({}, options), {\n            rootFunc: boolbase.trueFunc\n        });\n    }\n    /*\n     * If we have another filter, recursively call `findFilterElements`,\n     * with the `recursive` flag disabled. We only have to look for more\n     * elements when we see a traversal.\n     *\n     * Otherwise,\n     */ return remainingSelector.some(positionals_js_1.isFilter) ? findFilterElements(result, remainingSelector, options, false, totalLimit) : remainingHasTraversal ? findElements(result, [\n        remainingSelector\n    ], options, totalLimit) : filterElements(result, [\n        remainingSelector\n    ], options);\n}\nfunction findElements(root, sel, options, limit) {\n    var query = (0, css_select_1._compileToken)(sel, options, root);\n    return find(root, query, limit);\n}\nfunction find(root, query, limit) {\n    if (limit === void 0) {\n        limit = Infinity;\n    }\n    var elems = (0, css_select_1.prepareContext)(root, DomUtils, query.shouldTestNextSiblings);\n    return DomUtils.find(function(node) {\n        return DomUtils.isTag(node) && query(node);\n    }, elems, true, limit);\n}\nfunction filterElements(elements, sel, options) {\n    var els = (Array.isArray(elements) ? elements : [\n        elements\n    ]).filter(DomUtils.isTag);\n    if (els.length === 0) return els;\n    var query = (0, css_select_1._compileToken)(sel, options);\n    return query === boolbase.trueFunc ? els : els.filter(query);\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio-select/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio-select/lib/positionals.js":
/*!********************************************************!*\
  !*** ./node_modules/cheerio-select/lib/positionals.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getLimit = exports.isFilter = exports.filterNames = void 0;\nexports.filterNames = new Set([\n    \"first\",\n    \"last\",\n    \"eq\",\n    \"gt\",\n    \"nth\",\n    \"lt\",\n    \"even\",\n    \"odd\"\n]);\nfunction isFilter(s) {\n    if (s.type !== \"pseudo\") return false;\n    if (exports.filterNames.has(s.name)) return true;\n    if (s.name === \"not\" && Array.isArray(s.data)) {\n        // Only consider `:not` with embedded filters\n        return s.data.some(function(s) {\n            return s.some(isFilter);\n        });\n    }\n    return false;\n}\nexports.isFilter = isFilter;\nfunction getLimit(filter, data, partLimit) {\n    var num = data != null ? parseInt(data, 10) : NaN;\n    switch(filter){\n        case \"first\":\n            return 1;\n        case \"nth\":\n        case \"eq\":\n            return isFinite(num) ? num >= 0 ? num + 1 : Infinity : 0;\n        case \"lt\":\n            return isFinite(num) ? num >= 0 ? Math.min(num, partLimit) : Infinity : 0;\n        case \"gt\":\n            return isFinite(num) ? Infinity : 0;\n        case \"odd\":\n            return 2 * partLimit;\n        case \"even\":\n            return 2 * partLimit - 1;\n        case \"last\":\n        case \"not\":\n            return Infinity;\n    }\n}\nexports.getLimit = getLimit; //# sourceMappingURL=positionals.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvLXNlbGVjdC9saWIvcG9zaXRpb25hbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHQSxnQkFBZ0IsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUNqRUEsbUJBQW1CLEdBQUcsSUFBSUssSUFBSTtJQUMxQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRCxTQUFTRixTQUFTRyxDQUFDO0lBQ2YsSUFBSUEsRUFBRUMsSUFBSSxLQUFLLFVBQ1gsT0FBTztJQUNYLElBQUlQLFFBQVFJLFdBQVcsQ0FBQ0ksR0FBRyxDQUFDRixFQUFFRyxJQUFJLEdBQzlCLE9BQU87SUFDWCxJQUFJSCxFQUFFRyxJQUFJLEtBQUssU0FBU0MsTUFBTUMsT0FBTyxDQUFDTCxFQUFFTSxJQUFJLEdBQUc7UUFDM0MsNkNBQTZDO1FBQzdDLE9BQU9OLEVBQUVNLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFNBQVVQLENBQUM7WUFBSSxPQUFPQSxFQUFFTyxJQUFJLENBQUNWO1FBQVc7SUFDL0Q7SUFDQSxPQUFPO0FBQ1g7QUFDQUgsZ0JBQWdCLEdBQUdHO0FBQ25CLFNBQVNELFNBQVNZLE1BQU0sRUFBRUYsSUFBSSxFQUFFRyxTQUFTO0lBQ3JDLElBQUlDLE1BQU1KLFFBQVEsT0FBT0ssU0FBU0wsTUFBTSxNQUFNTTtJQUM5QyxPQUFRSjtRQUNKLEtBQUs7WUFDRCxPQUFPO1FBQ1gsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPSyxTQUFTSCxPQUFRQSxPQUFPLElBQUlBLE1BQU0sSUFBSUksV0FBWTtRQUM3RCxLQUFLO1lBQ0QsT0FBT0QsU0FBU0gsT0FDVkEsT0FBTyxJQUNISyxLQUFLQyxHQUFHLENBQUNOLEtBQUtELGFBQ2RLLFdBQ0o7UUFDVixLQUFLO1lBQ0QsT0FBT0QsU0FBU0gsT0FBT0ksV0FBVztRQUN0QyxLQUFLO1lBQ0QsT0FBTyxJQUFJTDtRQUNmLEtBQUs7WUFDRCxPQUFPLElBQUlBLFlBQVk7UUFDM0IsS0FBSztRQUNMLEtBQUs7WUFDRCxPQUFPSztJQUNmO0FBQ0o7QUFDQXBCLGdCQUFnQixHQUFHRSxVQUNuQix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NoZWVyaW8tc2VsZWN0L2xpYi9wb3NpdGlvbmFscy5qcz81MzZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRMaW1pdCA9IGV4cG9ydHMuaXNGaWx0ZXIgPSBleHBvcnRzLmZpbHRlck5hbWVzID0gdm9pZCAwO1xuZXhwb3J0cy5maWx0ZXJOYW1lcyA9IG5ldyBTZXQoW1xuICAgIFwiZmlyc3RcIixcbiAgICBcImxhc3RcIixcbiAgICBcImVxXCIsXG4gICAgXCJndFwiLFxuICAgIFwibnRoXCIsXG4gICAgXCJsdFwiLFxuICAgIFwiZXZlblwiLFxuICAgIFwib2RkXCIsXG5dKTtcbmZ1bmN0aW9uIGlzRmlsdGVyKHMpIHtcbiAgICBpZiAocy50eXBlICE9PSBcInBzZXVkb1wiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGV4cG9ydHMuZmlsdGVyTmFtZXMuaGFzKHMubmFtZSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmIChzLm5hbWUgPT09IFwibm90XCIgJiYgQXJyYXkuaXNBcnJheShzLmRhdGEpKSB7XG4gICAgICAgIC8vIE9ubHkgY29uc2lkZXIgYDpub3RgIHdpdGggZW1iZWRkZWQgZmlsdGVyc1xuICAgICAgICByZXR1cm4gcy5kYXRhLnNvbWUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc29tZShpc0ZpbHRlcik7IH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmlzRmlsdGVyID0gaXNGaWx0ZXI7XG5mdW5jdGlvbiBnZXRMaW1pdChmaWx0ZXIsIGRhdGEsIHBhcnRMaW1pdCkge1xuICAgIHZhciBudW0gPSBkYXRhICE9IG51bGwgPyBwYXJzZUludChkYXRhLCAxMCkgOiBOYU47XG4gICAgc3dpdGNoIChmaWx0ZXIpIHtcbiAgICAgICAgY2FzZSBcImZpcnN0XCI6XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgY2FzZSBcIm50aFwiOlxuICAgICAgICBjYXNlIFwiZXFcIjpcbiAgICAgICAgICAgIHJldHVybiBpc0Zpbml0ZShudW0pID8gKG51bSA+PSAwID8gbnVtICsgMSA6IEluZmluaXR5KSA6IDA7XG4gICAgICAgIGNhc2UgXCJsdFwiOlxuICAgICAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bSlcbiAgICAgICAgICAgICAgICA/IG51bSA+PSAwXG4gICAgICAgICAgICAgICAgICAgID8gTWF0aC5taW4obnVtLCBwYXJ0TGltaXQpXG4gICAgICAgICAgICAgICAgICAgIDogSW5maW5pdHlcbiAgICAgICAgICAgICAgICA6IDA7XG4gICAgICAgIGNhc2UgXCJndFwiOlxuICAgICAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bSkgPyBJbmZpbml0eSA6IDA7XG4gICAgICAgIGNhc2UgXCJvZGRcIjpcbiAgICAgICAgICAgIHJldHVybiAyICogcGFydExpbWl0O1xuICAgICAgICBjYXNlIFwiZXZlblwiOlxuICAgICAgICAgICAgcmV0dXJuIDIgKiBwYXJ0TGltaXQgLSAxO1xuICAgICAgICBjYXNlIFwibGFzdFwiOlxuICAgICAgICBjYXNlIFwibm90XCI6XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxufVxuZXhwb3J0cy5nZXRMaW1pdCA9IGdldExpbWl0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9zaXRpb25hbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0TGltaXQiLCJpc0ZpbHRlciIsImZpbHRlck5hbWVzIiwiU2V0IiwicyIsInR5cGUiLCJoYXMiLCJuYW1lIiwiQXJyYXkiLCJpc0FycmF5IiwiZGF0YSIsInNvbWUiLCJmaWx0ZXIiLCJwYXJ0TGltaXQiLCJudW0iLCJwYXJzZUludCIsIk5hTiIsImlzRmluaXRlIiwiSW5maW5pdHkiLCJNYXRoIiwibWluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio-select/lib/positionals.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/api/attributes.js":
/*!****************************************************!*\
  !*** ./node_modules/cheerio/lib/api/attributes.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toggleClass = exports.removeClass = exports.addClass = exports.hasClass = exports.removeAttr = exports.val = exports.data = exports.prop = exports.attr = void 0;\nvar static_js_1 = __webpack_require__(/*! ../static.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/static.js\");\nvar utils_js_1 = __webpack_require__(/*! ../utils.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/utils.js\");\nvar domutils_1 = __webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\");\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar rspace = /\\s+/;\nvar dataAttrPrefix = \"data-\";\n/*\n * Lookup table for coercing string data-* attributes to their corresponding\n * JavaScript primitives\n */ var primitives = {\n    null: null,\n    true: true,\n    false: false\n};\n// Attributes that are booleans\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;\n// Matches strings that look like JSON objects or arrays\nvar rbrace = /^{[^]*}$|^\\[[^]*]$/;\nfunction getAttr(elem, name, xmlMode) {\n    var _a;\n    if (!elem || !(0, utils_js_1.isTag)(elem)) return undefined;\n    (_a = elem.attribs) !== null && _a !== void 0 ? _a : elem.attribs = {};\n    // Return the entire attribs object if no attribute specified\n    if (!name) {\n        return elem.attribs;\n    }\n    if (hasOwn.call(elem.attribs, name)) {\n        // Get the (decoded) attribute\n        return !xmlMode && rboolean.test(name) ? name : elem.attribs[name];\n    }\n    // Mimic the DOM and return text content as value for `option's`\n    if (elem.name === \"option\" && name === \"value\") {\n        return (0, static_js_1.text)(elem.children);\n    }\n    // Mimic DOM with default value for radios/checkboxes\n    if (elem.name === \"input\" && (elem.attribs[\"type\"] === \"radio\" || elem.attribs[\"type\"] === \"checkbox\") && name === \"value\") {\n        return \"on\";\n    }\n    return undefined;\n}\n/**\n * Sets the value of an attribute. The attribute will be deleted if the value is `null`.\n *\n * @private\n * @param el - The element to set the attribute on.\n * @param name - The attribute's name.\n * @param value - The attribute's value.\n */ function setAttr(el, name, value) {\n    if (value === null) {\n        removeAttribute(el, name);\n    } else {\n        el.attribs[name] = \"\".concat(value);\n    }\n}\nfunction attr(name, value) {\n    // Set the value (with attr map support)\n    if (typeof name === \"object\" || value !== undefined) {\n        if (typeof value === \"function\") {\n            if (typeof name !== \"string\") {\n                {\n                    throw new Error(\"Bad combination of arguments.\");\n                }\n            }\n            return (0, utils_js_1.domEach)(this, function(el, i) {\n                if ((0, utils_js_1.isTag)(el)) setAttr(el, name, value.call(el, i, el.attribs[name]));\n            });\n        }\n        return (0, utils_js_1.domEach)(this, function(el) {\n            if (!(0, utils_js_1.isTag)(el)) return;\n            if (typeof name === \"object\") {\n                Object.keys(name).forEach(function(objName) {\n                    var objValue = name[objName];\n                    setAttr(el, objName, objValue);\n                });\n            } else {\n                setAttr(el, name, value);\n            }\n        });\n    }\n    return arguments.length > 1 ? this : getAttr(this[0], name, this.options.xmlMode);\n}\nexports.attr = attr;\n/**\n * Gets a node's prop.\n *\n * @private\n * @category Attributes\n * @param el - Element to get the prop of.\n * @param name - Name of the prop.\n * @returns The prop's value.\n */ function getProp(el, name, xmlMode) {\n    return name in el ? el[name] : !xmlMode && rboolean.test(name) ? getAttr(el, name, false) !== undefined : getAttr(el, name, xmlMode);\n}\n/**\n * Sets the value of a prop.\n *\n * @private\n * @param el - The element to set the prop on.\n * @param name - The prop's name.\n * @param value - The prop's value.\n */ function setProp(el, name, value, xmlMode) {\n    if (name in el) {\n        // @ts-expect-error Overriding value\n        el[name] = value;\n    } else {\n        setAttr(el, name, !xmlMode && rboolean.test(name) ? value ? \"\" : null : \"\".concat(value));\n    }\n}\nfunction prop(name, value) {\n    var _this = this;\n    var _a;\n    if (typeof name === \"string\" && value === undefined) {\n        var el = this[0];\n        if (!el || !(0, utils_js_1.isTag)(el)) return undefined;\n        switch(name){\n            case \"style\":\n                {\n                    var property_1 = this.css();\n                    var keys = Object.keys(property_1);\n                    keys.forEach(function(p, i) {\n                        property_1[i] = p;\n                    });\n                    property_1.length = keys.length;\n                    return property_1;\n                }\n            case \"tagName\":\n            case \"nodeName\":\n                {\n                    return el.name.toUpperCase();\n                }\n            case \"href\":\n            case \"src\":\n                {\n                    var prop_1 = (_a = el.attribs) === null || _a === void 0 ? void 0 : _a[name];\n                    /* eslint-disable node/no-unsupported-features/node-builtins */ if (typeof URL !== \"undefined\" && (name === \"href\" && (el.tagName === \"a\" || el.name === \"link\") || name === \"src\" && (el.tagName === \"img\" || el.tagName === \"iframe\" || el.tagName === \"audio\" || el.tagName === \"video\" || el.tagName === \"source\")) && prop_1 !== undefined && this.options.baseURI) {\n                        return new URL(prop_1, this.options.baseURI).href;\n                    }\n                    /* eslint-enable node/no-unsupported-features/node-builtins */ return prop_1;\n                }\n            case \"innerText\":\n                {\n                    return (0, domutils_1.innerText)(el);\n                }\n            case \"textContent\":\n                {\n                    return (0, domutils_1.textContent)(el);\n                }\n            case \"outerHTML\":\n                return this.clone().wrap(\"<container />\").parent().html();\n            case \"innerHTML\":\n                return this.html();\n            default:\n                return getProp(el, name, this.options.xmlMode);\n        }\n    }\n    if (typeof name === \"object\" || value !== undefined) {\n        if (typeof value === \"function\") {\n            if (typeof name === \"object\") {\n                throw new Error(\"Bad combination of arguments.\");\n            }\n            return (0, utils_js_1.domEach)(this, function(el, i) {\n                if ((0, utils_js_1.isTag)(el)) {\n                    setProp(el, name, value.call(el, i, getProp(el, name, _this.options.xmlMode)), _this.options.xmlMode);\n                }\n            });\n        }\n        return (0, utils_js_1.domEach)(this, function(el) {\n            if (!(0, utils_js_1.isTag)(el)) return;\n            if (typeof name === \"object\") {\n                Object.keys(name).forEach(function(key) {\n                    var val = name[key];\n                    setProp(el, key, val, _this.options.xmlMode);\n                });\n            } else {\n                setProp(el, name, value, _this.options.xmlMode);\n            }\n        });\n    }\n    return undefined;\n}\nexports.prop = prop;\n/**\n * Sets the value of a data attribute.\n *\n * @private\n * @param el - The element to set the data attribute on.\n * @param name - The data attribute's name.\n * @param value - The data attribute's value.\n */ function setData(el, name, value) {\n    var _a;\n    var elem = el;\n    (_a = elem.data) !== null && _a !== void 0 ? _a : elem.data = {};\n    if (typeof name === \"object\") Object.assign(elem.data, name);\n    else if (typeof name === \"string\" && value !== undefined) {\n        elem.data[name] = value;\n    }\n}\n/**\n * Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n * and (if present) cache the value in the node's internal data store. If no\n * attribute name is specified, read _all_ HTML5 `data-*` attributes in this manner.\n *\n * @private\n * @category Attributes\n * @param el - Element to get the data attribute of.\n * @param name - Name of the data attribute.\n * @returns The data attribute's value, or a map with all of the data attributes.\n */ function readData(el, name) {\n    var domNames;\n    var jsNames;\n    var value;\n    if (name == null) {\n        domNames = Object.keys(el.attribs).filter(function(attrName) {\n            return attrName.startsWith(dataAttrPrefix);\n        });\n        jsNames = domNames.map(function(domName) {\n            return (0, utils_js_1.camelCase)(domName.slice(dataAttrPrefix.length));\n        });\n    } else {\n        domNames = [\n            dataAttrPrefix + (0, utils_js_1.cssCase)(name)\n        ];\n        jsNames = [\n            name\n        ];\n    }\n    for(var idx = 0; idx < domNames.length; ++idx){\n        var domName = domNames[idx];\n        var jsName = jsNames[idx];\n        if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {\n            value = el.attribs[domName];\n            if (hasOwn.call(primitives, value)) {\n                value = primitives[value];\n            } else if (value === String(Number(value))) {\n                value = Number(value);\n            } else if (rbrace.test(value)) {\n                try {\n                    value = JSON.parse(value);\n                } catch (e) {\n                /* Ignore */ }\n            }\n            el.data[jsName] = value;\n        }\n    }\n    return name == null ? el.data : value;\n}\nfunction data(name, value) {\n    var _a;\n    var elem = this[0];\n    if (!elem || !(0, utils_js_1.isTag)(elem)) return;\n    var dataEl = elem;\n    (_a = dataEl.data) !== null && _a !== void 0 ? _a : dataEl.data = {};\n    // Return the entire data object if no data specified\n    if (!name) {\n        return readData(dataEl);\n    }\n    // Set the value (with attr map support)\n    if (typeof name === \"object\" || value !== undefined) {\n        (0, utils_js_1.domEach)(this, function(el) {\n            if ((0, utils_js_1.isTag)(el)) {\n                if (typeof name === \"object\") setData(el, name);\n                else setData(el, name, value);\n            }\n        });\n        return this;\n    }\n    if (hasOwn.call(dataEl.data, name)) {\n        return dataEl.data[name];\n    }\n    return readData(dataEl, name);\n}\nexports.data = data;\nfunction val(value) {\n    var querying = arguments.length === 0;\n    var element = this[0];\n    if (!element || !(0, utils_js_1.isTag)(element)) return querying ? undefined : this;\n    switch(element.name){\n        case \"textarea\":\n            return this.text(value);\n        case \"select\":\n            {\n                var option = this.find(\"option:selected\");\n                if (!querying) {\n                    if (this.attr(\"multiple\") == null && typeof value === \"object\") {\n                        return this;\n                    }\n                    this.find(\"option\").removeAttr(\"selected\");\n                    var values = typeof value !== \"object\" ? [\n                        value\n                    ] : value;\n                    for(var i = 0; i < values.length; i++){\n                        this.find('option[value=\"'.concat(values[i], '\"]')).attr(\"selected\", \"\");\n                    }\n                    return this;\n                }\n                return this.attr(\"multiple\") ? option.toArray().map(function(el) {\n                    return (0, static_js_1.text)(el.children);\n                }) : option.attr(\"value\");\n            }\n        case \"input\":\n        case \"option\":\n            return querying ? this.attr(\"value\") : this.attr(\"value\", value);\n    }\n    return undefined;\n}\nexports.val = val;\n/**\n * Remove an attribute.\n *\n * @private\n * @param elem - Node to remove attribute from.\n * @param name - Name of the attribute to remove.\n */ function removeAttribute(elem, name) {\n    if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;\n    delete elem.attribs[name];\n}\n/**\n * Splits a space-separated list of names to individual names.\n *\n * @category Attributes\n * @param names - Names to split.\n * @returns - Split names.\n */ function splitNames(names) {\n    return names ? names.trim().split(rspace) : [];\n}\n/**\n * Method for removing attributes by `name`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeAttr('class').html();\n * //=> <li>Pear</li>\n *\n * $('.apple').attr('id', 'favorite');\n * $('.apple').removeAttr('id class').html();\n * //=> <li>Apple</li>\n * ```\n *\n * @param name - Name of the attribute.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeAttr/}\n */ function removeAttr(name) {\n    var attrNames = splitNames(name);\n    var _loop_1 = function(i) {\n        (0, utils_js_1.domEach)(this_1, function(elem) {\n            if ((0, utils_js_1.isTag)(elem)) removeAttribute(elem, attrNames[i]);\n        });\n    };\n    var this_1 = this;\n    for(var i = 0; i < attrNames.length; i++){\n        _loop_1(i);\n    }\n    return this;\n}\nexports.removeAttr = removeAttr;\n/**\n * Check to see if _any_ of the matched elements have the given `className`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').hasClass('pear');\n * //=> true\n *\n * $('apple').hasClass('fruit');\n * //=> false\n *\n * $('li').hasClass('pear');\n * //=> true\n * ```\n *\n * @param className - Name of the class.\n * @returns Indicates if an element has the given `className`.\n * @see {@link https://api.jquery.com/hasClass/}\n */ function hasClass(className) {\n    return this.toArray().some(function(elem) {\n        var clazz = (0, utils_js_1.isTag)(elem) && elem.attribs[\"class\"];\n        var idx = -1;\n        if (clazz && className.length) {\n            while((idx = clazz.indexOf(className, idx + 1)) > -1){\n                var end = idx + className.length;\n                if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end === clazz.length || rspace.test(clazz[end]))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    });\n}\nexports.hasClass = hasClass;\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').addClass('fruit').html();\n * //=> <li class=\"pear fruit\">Pear</li>\n *\n * $('.apple').addClass('fruit red').html();\n * //=> <li class=\"apple fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of new class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/addClass/}\n */ function addClass(value) {\n    // Support functions\n    if (typeof value === \"function\") {\n        return (0, utils_js_1.domEach)(this, function(el, i) {\n            if ((0, utils_js_1.isTag)(el)) {\n                var className = el.attribs[\"class\"] || \"\";\n                addClass.call([\n                    el\n                ], value.call(el, i, className));\n            }\n        });\n    }\n    // Return if no value or not a string or function\n    if (!value || typeof value !== \"string\") return this;\n    var classNames = value.split(rspace);\n    var numElements = this.length;\n    for(var i = 0; i < numElements; i++){\n        var el = this[i];\n        // If selected element isn't a tag, move on\n        if (!(0, utils_js_1.isTag)(el)) continue;\n        // If we don't already have classes — always set xmlMode to false here, as it doesn't matter for classes\n        var className = getAttr(el, \"class\", false);\n        if (!className) {\n            setAttr(el, \"class\", classNames.join(\" \").trim());\n        } else {\n            var setClass = \" \".concat(className, \" \");\n            // Check if class already exists\n            for(var j = 0; j < classNames.length; j++){\n                var appendClass = \"\".concat(classNames[j], \" \");\n                if (!setClass.includes(\" \".concat(appendClass))) setClass += appendClass;\n            }\n            setAttr(el, \"class\", setClass.trim());\n        }\n    }\n    return this;\n}\nexports.addClass = addClass;\n/**\n * Removes one or more space-separated classes from the selected elements. If no\n * `className` is defined, all classes will be removed. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeClass('pear').html();\n * //=> <li class=\"\">Pear</li>\n *\n * $('.apple').addClass('red').removeClass().html();\n * //=> <li class=\"\">Apple</li>\n * ```\n *\n * @param name - Name of the class. If not specified, removes all elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeClass/}\n */ function removeClass(name) {\n    // Handle if value is a function\n    if (typeof name === \"function\") {\n        return (0, utils_js_1.domEach)(this, function(el, i) {\n            if ((0, utils_js_1.isTag)(el)) {\n                removeClass.call([\n                    el\n                ], name.call(el, i, el.attribs[\"class\"] || \"\"));\n            }\n        });\n    }\n    var classes = splitNames(name);\n    var numClasses = classes.length;\n    var removeAll = arguments.length === 0;\n    return (0, utils_js_1.domEach)(this, function(el) {\n        if (!(0, utils_js_1.isTag)(el)) return;\n        if (removeAll) {\n            // Short circuit the remove all case as this is the nice one\n            el.attribs[\"class\"] = \"\";\n        } else {\n            var elClasses = splitNames(el.attribs[\"class\"]);\n            var changed = false;\n            for(var j = 0; j < numClasses; j++){\n                var index = elClasses.indexOf(classes[j]);\n                if (index >= 0) {\n                    elClasses.splice(index, 1);\n                    changed = true;\n                    /*\n                     * We have to do another pass to ensure that there are not duplicate\n                     * classes listed\n                     */ j--;\n                }\n            }\n            if (changed) {\n                el.attribs[\"class\"] = elClasses.join(\" \");\n            }\n        }\n    });\n}\nexports.removeClass = removeClass;\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.apple.green').toggleClass('fruit green red').html();\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * $('.apple.green').toggleClass('fruit green red', true).html();\n * //=> <li class=\"apple green fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of the class. Can also be a function.\n * @param stateVal - If specified the state of the class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/toggleClass/}\n */ function toggleClass(value, stateVal) {\n    // Support functions\n    if (typeof value === \"function\") {\n        return (0, utils_js_1.domEach)(this, function(el, i) {\n            if ((0, utils_js_1.isTag)(el)) {\n                toggleClass.call([\n                    el\n                ], value.call(el, i, el.attribs[\"class\"] || \"\", stateVal), stateVal);\n            }\n        });\n    }\n    // Return if no value or not a string or function\n    if (!value || typeof value !== \"string\") return this;\n    var classNames = value.split(rspace);\n    var numClasses = classNames.length;\n    var state = typeof stateVal === \"boolean\" ? stateVal ? 1 : -1 : 0;\n    var numElements = this.length;\n    for(var i = 0; i < numElements; i++){\n        var el = this[i];\n        // If selected element isn't a tag, move on\n        if (!(0, utils_js_1.isTag)(el)) continue;\n        var elementClasses = splitNames(el.attribs[\"class\"]);\n        // Check if class already exists\n        for(var j = 0; j < numClasses; j++){\n            // Check if the class name is currently defined\n            var index = elementClasses.indexOf(classNames[j]);\n            // Add if stateValue === true or we are toggling and there is no value\n            if (state >= 0 && index < 0) {\n                elementClasses.push(classNames[j]);\n            } else if (state <= 0 && index >= 0) {\n                // Otherwise remove but only if the item exists\n                elementClasses.splice(index, 1);\n            }\n        }\n        el.attribs[\"class\"] = elementClasses.join(\" \");\n    }\n    return this;\n}\nexports.toggleClass = toggleClass; //# sourceMappingURL=attributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/api/attributes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/api/css.js":
/*!*********************************************!*\
  !*** ./node_modules/cheerio/lib/api/css.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.css = void 0;\nvar utils_js_1 = __webpack_require__(/*! ../utils.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/utils.js\");\n/**\n * Set multiple CSS properties for every matched element.\n *\n * @category CSS\n * @param prop - The names of the properties.\n * @param val - The new values.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/css/}\n */ function css(prop, val) {\n    if (prop != null && val != null || // When `prop` is a \"plain\" object\n    typeof prop === \"object\" && !Array.isArray(prop)) {\n        return (0, utils_js_1.domEach)(this, function(el, i) {\n            if ((0, utils_js_1.isTag)(el)) {\n                // `prop` can't be an array here anymore.\n                setCss(el, prop, val, i);\n            }\n        });\n    }\n    if (this.length === 0) {\n        return undefined;\n    }\n    return getCss(this[0], prop);\n}\nexports.css = css;\n/**\n * Set styles of all elements.\n *\n * @private\n * @param el - Element to set style of.\n * @param prop - Name of property.\n * @param value - Value to set property to.\n * @param idx - Optional index within the selection.\n */ function setCss(el, prop, value, idx) {\n    if (typeof prop === \"string\") {\n        var styles = getCss(el);\n        var val = typeof value === \"function\" ? value.call(el, idx, styles[prop]) : value;\n        if (val === \"\") {\n            delete styles[prop];\n        } else if (val != null) {\n            styles[prop] = val;\n        }\n        el.attribs[\"style\"] = stringify(styles);\n    } else if (typeof prop === \"object\") {\n        Object.keys(prop).forEach(function(k, i) {\n            setCss(el, k, prop[k], i);\n        });\n    }\n}\nfunction getCss(el, prop) {\n    if (!el || !(0, utils_js_1.isTag)(el)) return;\n    var styles = parse(el.attribs[\"style\"]);\n    if (typeof prop === \"string\") {\n        return styles[prop];\n    }\n    if (Array.isArray(prop)) {\n        var newStyles_1 = {};\n        prop.forEach(function(item) {\n            if (styles[item] != null) {\n                newStyles_1[item] = styles[item];\n            }\n        });\n        return newStyles_1;\n    }\n    return styles;\n}\n/**\n * Stringify `obj` to styles.\n *\n * @private\n * @category CSS\n * @param obj - Object to stringify.\n * @returns The serialized styles.\n */ function stringify(obj) {\n    return Object.keys(obj).reduce(function(str, prop) {\n        return \"\".concat(str).concat(str ? \" \" : \"\").concat(prop, \": \").concat(obj[prop], \";\");\n    }, \"\");\n}\n/**\n * Parse `styles`.\n *\n * @private\n * @category CSS\n * @param styles - Styles to be parsed.\n * @returns The parsed styles.\n */ function parse(styles) {\n    styles = (styles || \"\").trim();\n    if (!styles) return {};\n    var obj = {};\n    var key;\n    for(var _i = 0, _a = styles.split(\";\"); _i < _a.length; _i++){\n        var str = _a[_i];\n        var n = str.indexOf(\":\");\n        // If there is no :, or if it is the first/last character, add to the previous item's value\n        if (n < 1 || n === str.length - 1) {\n            var trimmed = str.trimEnd();\n            if (trimmed.length > 0 && key !== undefined) {\n                obj[key] += \";\".concat(trimmed);\n            }\n        } else {\n            key = str.slice(0, n).trim();\n            obj[key] = str.slice(n + 1).trim();\n        }\n    }\n    return obj;\n} //# sourceMappingURL=css.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9hcGkvY3NzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxXQUFXLEdBQUcsS0FBSztBQUNuQixJQUFJRyxhQUFhQyxtQkFBT0EsQ0FBQyw0RUFBYTtBQUN0Qzs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNGLElBQUlHLElBQUksRUFBRUMsR0FBRztJQUNsQixJQUFJLFFBQVMsUUFBUUEsT0FBTyxRQUN4QixrQ0FBa0M7SUFDakMsT0FBT0QsU0FBUyxZQUFZLENBQUNFLE1BQU1DLE9BQU8sQ0FBQ0gsT0FBUTtRQUNwRCxPQUFPLENBQUMsR0FBR0YsV0FBV00sT0FBTyxFQUFFLElBQUksRUFBRSxTQUFVQyxFQUFFLEVBQUVDLENBQUM7WUFDaEQsSUFBSSxDQUFDLEdBQUdSLFdBQVdTLEtBQUssRUFBRUYsS0FBSztnQkFDM0IseUNBQXlDO2dCQUN6Q0csT0FBT0gsSUFBSUwsTUFBTUMsS0FBS0s7WUFDMUI7UUFDSjtJQUNKO0lBQ0EsSUFBSSxJQUFJLENBQUNHLE1BQU0sS0FBSyxHQUFHO1FBQ25CLE9BQU9DO0lBQ1g7SUFDQSxPQUFPQyxPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUVYO0FBQzNCO0FBQ0FMLFdBQVcsR0FBR0U7QUFDZDs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNXLE9BQU9ILEVBQUUsRUFBRUwsSUFBSSxFQUFFSixLQUFLLEVBQUVnQixHQUFHO0lBQ2hDLElBQUksT0FBT1osU0FBUyxVQUFVO1FBQzFCLElBQUlhLFNBQVNGLE9BQU9OO1FBQ3BCLElBQUlKLE1BQU0sT0FBT0wsVUFBVSxhQUFhQSxNQUFNa0IsSUFBSSxDQUFDVCxJQUFJTyxLQUFLQyxNQUFNLENBQUNiLEtBQUssSUFBSUo7UUFDNUUsSUFBSUssUUFBUSxJQUFJO1lBQ1osT0FBT1ksTUFBTSxDQUFDYixLQUFLO1FBQ3ZCLE9BQ0ssSUFBSUMsT0FBTyxNQUFNO1lBQ2xCWSxNQUFNLENBQUNiLEtBQUssR0FBR0M7UUFDbkI7UUFDQUksR0FBR1UsT0FBTyxDQUFDLFFBQVEsR0FBR0MsVUFBVUg7SUFDcEMsT0FDSyxJQUFJLE9BQU9iLFNBQVMsVUFBVTtRQUMvQlAsT0FBT3dCLElBQUksQ0FBQ2pCLE1BQU1rQixPQUFPLENBQUMsU0FBVUMsQ0FBQyxFQUFFYixDQUFDO1lBQ3BDRSxPQUFPSCxJQUFJYyxHQUFHbkIsSUFBSSxDQUFDbUIsRUFBRSxFQUFFYjtRQUMzQjtJQUNKO0FBQ0o7QUFDQSxTQUFTSyxPQUFPTixFQUFFLEVBQUVMLElBQUk7SUFDcEIsSUFBSSxDQUFDSyxNQUFNLENBQUMsQ0FBQyxHQUFHUCxXQUFXUyxLQUFLLEVBQUVGLEtBQzlCO0lBQ0osSUFBSVEsU0FBU08sTUFBTWYsR0FBR1UsT0FBTyxDQUFDLFFBQVE7SUFDdEMsSUFBSSxPQUFPZixTQUFTLFVBQVU7UUFDMUIsT0FBT2EsTUFBTSxDQUFDYixLQUFLO0lBQ3ZCO0lBQ0EsSUFBSUUsTUFBTUMsT0FBTyxDQUFDSCxPQUFPO1FBQ3JCLElBQUlxQixjQUFjLENBQUM7UUFDbkJyQixLQUFLa0IsT0FBTyxDQUFDLFNBQVVJLElBQUk7WUFDdkIsSUFBSVQsTUFBTSxDQUFDUyxLQUFLLElBQUksTUFBTTtnQkFDdEJELFdBQVcsQ0FBQ0MsS0FBSyxHQUFHVCxNQUFNLENBQUNTLEtBQUs7WUFDcEM7UUFDSjtRQUNBLE9BQU9EO0lBQ1g7SUFDQSxPQUFPUjtBQUNYO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNHLFVBQVVPLEdBQUc7SUFDbEIsT0FBTzlCLE9BQU93QixJQUFJLENBQUNNLEtBQUtDLE1BQU0sQ0FBQyxTQUFVQyxHQUFHLEVBQUV6QixJQUFJO1FBQUksT0FBTyxHQUFHMEIsTUFBTSxDQUFDRCxLQUFLQyxNQUFNLENBQUNELE1BQU0sTUFBTSxJQUFJQyxNQUFNLENBQUMxQixNQUFNLE1BQU0wQixNQUFNLENBQUNILEdBQUcsQ0FBQ3ZCLEtBQUssRUFBRTtJQUFNLEdBQUc7QUFDcko7QUFDQTs7Ozs7OztDQU9DLEdBQ0QsU0FBU29CLE1BQU1QLE1BQU07SUFDakJBLFNBQVMsQ0FBQ0EsVUFBVSxFQUFDLEVBQUdjLElBQUk7SUFDNUIsSUFBSSxDQUFDZCxRQUNELE9BQU8sQ0FBQztJQUNaLElBQUlVLE1BQU0sQ0FBQztJQUNYLElBQUlLO0lBQ0osSUFBSyxJQUFJQyxLQUFLLEdBQUdDLEtBQUtqQixPQUFPa0IsS0FBSyxDQUFDLE1BQU1GLEtBQUtDLEdBQUdyQixNQUFNLEVBQUVvQixLQUFNO1FBQzNELElBQUlKLE1BQU1LLEVBQUUsQ0FBQ0QsR0FBRztRQUNoQixJQUFJRyxJQUFJUCxJQUFJUSxPQUFPLENBQUM7UUFDcEIsMkZBQTJGO1FBQzNGLElBQUlELElBQUksS0FBS0EsTUFBTVAsSUFBSWhCLE1BQU0sR0FBRyxHQUFHO1lBQy9CLElBQUl5QixVQUFVVCxJQUFJVSxPQUFPO1lBQ3pCLElBQUlELFFBQVF6QixNQUFNLEdBQUcsS0FBS21CLFFBQVFsQixXQUFXO2dCQUN6Q2EsR0FBRyxDQUFDSyxJQUFJLElBQUksSUFBSUYsTUFBTSxDQUFDUTtZQUMzQjtRQUNKLE9BQ0s7WUFDRE4sTUFBTUgsSUFBSVcsS0FBSyxDQUFDLEdBQUdKLEdBQUdMLElBQUk7WUFDMUJKLEdBQUcsQ0FBQ0ssSUFBSSxHQUFHSCxJQUFJVyxLQUFLLENBQUNKLElBQUksR0FBR0wsSUFBSTtRQUNwQztJQUNKO0lBQ0EsT0FBT0o7QUFDWCxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvYXBpL2Nzcy5qcz8xNmQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jc3MgPSB2b2lkIDA7XG52YXIgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy5qc1wiKTtcbi8qKlxuICogU2V0IG11bHRpcGxlIENTUyBwcm9wZXJ0aWVzIGZvciBldmVyeSBtYXRjaGVkIGVsZW1lbnQuXG4gKlxuICogQGNhdGVnb3J5IENTU1xuICogQHBhcmFtIHByb3AgLSBUaGUgbmFtZXMgb2YgdGhlIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0gdmFsIC0gVGhlIG5ldyB2YWx1ZXMuXG4gKiBAcmV0dXJucyBUaGUgaW5zdGFuY2UgaXRzZWxmLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9jc3MvfVxuICovXG5mdW5jdGlvbiBjc3MocHJvcCwgdmFsKSB7XG4gICAgaWYgKChwcm9wICE9IG51bGwgJiYgdmFsICE9IG51bGwpIHx8XG4gICAgICAgIC8vIFdoZW4gYHByb3BgIGlzIGEgXCJwbGFpblwiIG9iamVjdFxuICAgICAgICAodHlwZW9mIHByb3AgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHByb3ApKSkge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzX2pzXzEuZG9tRWFjaCkodGhpcywgZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgICBpZiAoKDAsIHV0aWxzX2pzXzEuaXNUYWcpKGVsKSkge1xuICAgICAgICAgICAgICAgIC8vIGBwcm9wYCBjYW4ndCBiZSBhbiBhcnJheSBoZXJlIGFueW1vcmUuXG4gICAgICAgICAgICAgICAgc2V0Q3NzKGVsLCBwcm9wLCB2YWwsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBnZXRDc3ModGhpc1swXSwgcHJvcCk7XG59XG5leHBvcnRzLmNzcyA9IGNzcztcbi8qKlxuICogU2V0IHN0eWxlcyBvZiBhbGwgZWxlbWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBlbCAtIEVsZW1lbnQgdG8gc2V0IHN0eWxlIG9mLlxuICogQHBhcmFtIHByb3AgLSBOYW1lIG9mIHByb3BlcnR5LlxuICogQHBhcmFtIHZhbHVlIC0gVmFsdWUgdG8gc2V0IHByb3BlcnR5IHRvLlxuICogQHBhcmFtIGlkeCAtIE9wdGlvbmFsIGluZGV4IHdpdGhpbiB0aGUgc2VsZWN0aW9uLlxuICovXG5mdW5jdGlvbiBzZXRDc3MoZWwsIHByb3AsIHZhbHVlLCBpZHgpIHtcbiAgICBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSBnZXRDc3MoZWwpO1xuICAgICAgICB2YXIgdmFsID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nID8gdmFsdWUuY2FsbChlbCwgaWR4LCBzdHlsZXNbcHJvcF0pIDogdmFsdWU7XG4gICAgICAgIGlmICh2YWwgPT09ICcnKSB7XG4gICAgICAgICAgICBkZWxldGUgc3R5bGVzW3Byb3BdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBzdHlsZXNbcHJvcF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgICAgZWwuYXR0cmlic1snc3R5bGUnXSA9IHN0cmluZ2lmeShzdHlsZXMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcHJvcCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcCkuZm9yRWFjaChmdW5jdGlvbiAoaywgaSkge1xuICAgICAgICAgICAgc2V0Q3NzKGVsLCBrLCBwcm9wW2tdLCBpKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Q3NzKGVsLCBwcm9wKSB7XG4gICAgaWYgKCFlbCB8fCAhKDAsIHV0aWxzX2pzXzEuaXNUYWcpKGVsKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBzdHlsZXMgPSBwYXJzZShlbC5hdHRyaWJzWydzdHlsZSddKTtcbiAgICBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBzdHlsZXNbcHJvcF07XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3ApKSB7XG4gICAgICAgIHZhciBuZXdTdHlsZXNfMSA9IHt9O1xuICAgICAgICBwcm9wLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmIChzdHlsZXNbaXRlbV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG5ld1N0eWxlc18xW2l0ZW1dID0gc3R5bGVzW2l0ZW1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ld1N0eWxlc18xO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGVzO1xufVxuLyoqXG4gKiBTdHJpbmdpZnkgYG9iamAgdG8gc3R5bGVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgQ1NTXG4gKiBAcGFyYW0gb2JqIC0gT2JqZWN0IHRvIHN0cmluZ2lmeS5cbiAqIEByZXR1cm5zIFRoZSBzZXJpYWxpemVkIHN0eWxlcy5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAoc3RyLCBwcm9wKSB7IHJldHVybiBcIlwiLmNvbmNhdChzdHIpLmNvbmNhdChzdHIgPyAnICcgOiAnJykuY29uY2F0KHByb3AsIFwiOiBcIikuY29uY2F0KG9ialtwcm9wXSwgXCI7XCIpOyB9LCAnJyk7XG59XG4vKipcbiAqIFBhcnNlIGBzdHlsZXNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgQ1NTXG4gKiBAcGFyYW0gc3R5bGVzIC0gU3R5bGVzIHRvIGJlIHBhcnNlZC5cbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgc3R5bGVzLlxuICovXG5mdW5jdGlvbiBwYXJzZShzdHlsZXMpIHtcbiAgICBzdHlsZXMgPSAoc3R5bGVzIHx8ICcnKS50cmltKCk7XG4gICAgaWYgKCFzdHlsZXMpXG4gICAgICAgIHJldHVybiB7fTtcbiAgICB2YXIgb2JqID0ge307XG4gICAgdmFyIGtleTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gc3R5bGVzLnNwbGl0KCc7Jyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzdHIgPSBfYVtfaV07XG4gICAgICAgIHZhciBuID0gc3RyLmluZGV4T2YoJzonKTtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gOiwgb3IgaWYgaXQgaXMgdGhlIGZpcnN0L2xhc3QgY2hhcmFjdGVyLCBhZGQgdG8gdGhlIHByZXZpb3VzIGl0ZW0ncyB2YWx1ZVxuICAgICAgICBpZiAobiA8IDEgfHwgbiA9PT0gc3RyLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHZhciB0cmltbWVkID0gc3RyLnRyaW1FbmQoKTtcbiAgICAgICAgICAgIGlmICh0cmltbWVkLmxlbmd0aCA+IDAgJiYga2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvYmpba2V5XSArPSBcIjtcIi5jb25jYXQodHJpbW1lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBrZXkgPSBzdHIuc2xpY2UoMCwgbikudHJpbSgpO1xuICAgICAgICAgICAgb2JqW2tleV0gPSBzdHIuc2xpY2UobiArIDEpLnRyaW0oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNzcyIsInV0aWxzX2pzXzEiLCJyZXF1aXJlIiwicHJvcCIsInZhbCIsIkFycmF5IiwiaXNBcnJheSIsImRvbUVhY2giLCJlbCIsImkiLCJpc1RhZyIsInNldENzcyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImdldENzcyIsImlkeCIsInN0eWxlcyIsImNhbGwiLCJhdHRyaWJzIiwic3RyaW5naWZ5Iiwia2V5cyIsImZvckVhY2giLCJrIiwicGFyc2UiLCJuZXdTdHlsZXNfMSIsIml0ZW0iLCJvYmoiLCJyZWR1Y2UiLCJzdHIiLCJjb25jYXQiLCJ0cmltIiwia2V5IiwiX2kiLCJfYSIsInNwbGl0IiwibiIsImluZGV4T2YiLCJ0cmltbWVkIiwidHJpbUVuZCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/api/css.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/api/forms.js":
/*!***********************************************!*\
  !*** ./node_modules/cheerio/lib/api/forms.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.serializeArray = exports.serialize = void 0;\nvar utils_js_1 = __webpack_require__(/*! ../utils.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/utils.js\");\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */ var submittableSelector = \"input,select,textarea,keygen\";\nvar r20 = /%20/g;\nvar rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serialize();\n * //=> 'foo=bar'\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */ function serialize() {\n    // Convert form elements into name/value objects\n    var arr = this.serializeArray();\n    // Serialize each element into a key/value string\n    var retArr = arr.map(function(data) {\n        return \"\".concat(encodeURIComponent(data.name), \"=\").concat(encodeURIComponent(data.value));\n    });\n    // Return the resulting serialization\n    return retArr.join(\"&\").replace(r20, \"+\");\n}\nexports.serialize = serialize;\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */ function serializeArray() {\n    var _this = this;\n    // Resolve all form elements from either forms or collections of form elements\n    return this.map(function(_, elem) {\n        var $elem = _this._make(elem);\n        if ((0, utils_js_1.isTag)(elem) && elem.name === \"form\") {\n            return $elem.find(submittableSelector).toArray();\n        }\n        return $elem.filter(submittableSelector).toArray();\n    }).filter(// Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n    '[name!=\"\"]:enabled' + // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n    \":not(:submit, :button, :image, :reset, :file)\" + // And are either checked/don't have a checkable state\n    \":matches([checked], :not(:checkbox, :radio))\").map(function(_, elem) {\n        var _a;\n        var $elem = _this._make(elem);\n        var name = $elem.attr(\"name\"); // We have filtered for elements with a name before.\n        // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n        var value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : \"\";\n        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n        if (Array.isArray(value)) {\n            return value.map(function(val) {\n                /*\n                 * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n                 * These can occur inside of `<textarea>'s`\n                 */ return {\n                    name: name,\n                    value: val.replace(rCRLF, \"\\r\\n\")\n                };\n            });\n        }\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n        return {\n            name: name,\n            value: value.replace(rCRLF, \"\\r\\n\")\n        };\n    }).toArray();\n}\nexports.serializeArray = serializeArray; //# sourceMappingURL=forms.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9hcGkvZm9ybXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHQSxpQkFBaUIsR0FBRyxLQUFLO0FBQ2xELElBQUlJLGFBQWFDLG1CQUFPQSxDQUFDLDRFQUFhO0FBQ3RDOzs7Q0FHQyxHQUNELElBQUlDLHNCQUFzQjtBQUMxQixJQUFJQyxNQUFNO0FBQ1YsSUFBSUMsUUFBUTtBQUNaOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FDRCxTQUFTTDtJQUNMLGdEQUFnRDtJQUNoRCxJQUFJTSxNQUFNLElBQUksQ0FBQ1AsY0FBYztJQUM3QixpREFBaUQ7SUFDakQsSUFBSVEsU0FBU0QsSUFBSUUsR0FBRyxDQUFDLFNBQVVDLElBQUk7UUFDL0IsT0FBTyxHQUFHQyxNQUFNLENBQUNDLG1CQUFtQkYsS0FBS0csSUFBSSxHQUFHLEtBQUtGLE1BQU0sQ0FBQ0MsbUJBQW1CRixLQUFLWCxLQUFLO0lBQzdGO0lBQ0EscUNBQXFDO0lBQ3JDLE9BQU9TLE9BQU9NLElBQUksQ0FBQyxLQUFLQyxPQUFPLENBQUNWLEtBQUs7QUFDekM7QUFDQVAsaUJBQWlCLEdBQUdHO0FBQ3BCOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FDRCxTQUFTRDtJQUNMLElBQUlnQixRQUFRLElBQUk7SUFDaEIsOEVBQThFO0lBQzlFLE9BQU8sSUFBSSxDQUFDUCxHQUFHLENBQUMsU0FBVVEsQ0FBQyxFQUFFQyxJQUFJO1FBQzdCLElBQUlDLFFBQVFILE1BQU1JLEtBQUssQ0FBQ0Y7UUFDeEIsSUFBSSxDQUFDLEdBQUdoQixXQUFXbUIsS0FBSyxFQUFFSCxTQUFTQSxLQUFLTCxJQUFJLEtBQUssUUFBUTtZQUNyRCxPQUFPTSxNQUFNRyxJQUFJLENBQUNsQixxQkFBcUJtQixPQUFPO1FBQ2xEO1FBQ0EsT0FBT0osTUFBTUssTUFBTSxDQUFDcEIscUJBQXFCbUIsT0FBTztJQUNwRCxHQUNLQyxNQUFNLENBQ1gsOEVBQThFO0lBQzlFLHVCQUNJLGlHQUFpRztJQUNqRyxrREFDQSxzREFBc0Q7SUFDdEQsZ0RBR0NmLEdBQUcsQ0FBQyxTQUFVUSxDQUFDLEVBQUVDLElBQUk7UUFDdEIsSUFBSU87UUFDSixJQUFJTixRQUFRSCxNQUFNSSxLQUFLLENBQUNGO1FBQ3hCLElBQUlMLE9BQU9NLE1BQU1PLElBQUksQ0FBQyxTQUFTLG9EQUFvRDtRQUNuRixtRkFBbUY7UUFDbkYsSUFBSTNCLFFBQVEsQ0FBQzBCLEtBQUtOLE1BQU1RLEdBQUcsRUFBQyxNQUFPLFFBQVFGLE9BQU8sS0FBSyxJQUFJQSxLQUFLO1FBQ2hFLCtGQUErRjtRQUMvRixJQUFJRyxNQUFNQyxPQUFPLENBQUM5QixRQUFRO1lBQ3RCLE9BQU9BLE1BQU1VLEdBQUcsQ0FBQyxTQUFVa0IsR0FBRztnQkFDMUI7OztpQkFHQyxHQUNELE9BQVE7b0JBQUVkLE1BQU1BO29CQUFNZCxPQUFPNEIsSUFBSVosT0FBTyxDQUFDVCxPQUFPO2dCQUFRO1lBQzVEO1FBQ0o7UUFDQSx3RUFBd0U7UUFDeEUsT0FBTztZQUFFTyxNQUFNQTtZQUFNZCxPQUFPQSxNQUFNZ0IsT0FBTyxDQUFDVCxPQUFPO1FBQVE7SUFDN0QsR0FDS2lCLE9BQU87QUFDaEI7QUFDQXpCLHNCQUFzQixHQUFHRSxnQkFDekIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9hcGkvZm9ybXMuanM/ZGNiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2VyaWFsaXplQXJyYXkgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IHZvaWQgMDtcbnZhciB1dGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzLmpzXCIpO1xuLypcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvMi4xLjMvc3JjL21hbmlwdWxhdGlvbi92YXIvcmNoZWNrYWJsZVR5cGUuanNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvMi4xLjMvc3JjL3NlcmlhbGl6ZS5qc1xuICovXG52YXIgc3VibWl0dGFibGVTZWxlY3RvciA9ICdpbnB1dCxzZWxlY3QsdGV4dGFyZWEsa2V5Z2VuJztcbnZhciByMjAgPSAvJTIwL2c7XG52YXIgckNSTEYgPSAvXFxyP1xcbi9nO1xuLyoqXG4gKiBFbmNvZGUgYSBzZXQgb2YgZm9ybSBlbGVtZW50cyBhcyBhIHN0cmluZyBmb3Igc3VibWlzc2lvbi5cbiAqXG4gKiBAY2F0ZWdvcnkgRm9ybXNcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJzxmb3JtPjxpbnB1dCBuYW1lPVwiZm9vXCIgdmFsdWU9XCJiYXJcIiAvPjwvZm9ybT4nKS5zZXJpYWxpemUoKTtcbiAqIC8vPT4gJ2Zvbz1iYXInXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyBUaGUgc2VyaWFsaXplZCBmb3JtLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9zZXJpYWxpemUvfVxuICovXG5mdW5jdGlvbiBzZXJpYWxpemUoKSB7XG4gICAgLy8gQ29udmVydCBmb3JtIGVsZW1lbnRzIGludG8gbmFtZS92YWx1ZSBvYmplY3RzXG4gICAgdmFyIGFyciA9IHRoaXMuc2VyaWFsaXplQXJyYXkoKTtcbiAgICAvLyBTZXJpYWxpemUgZWFjaCBlbGVtZW50IGludG8gYSBrZXkvdmFsdWUgc3RyaW5nXG4gICAgdmFyIHJldEFyciA9IGFyci5tYXAoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChkYXRhLm5hbWUpLCBcIj1cIikuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChkYXRhLnZhbHVlKSk7XG4gICAgfSk7XG4gICAgLy8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuICAgIHJldHVybiByZXRBcnIuam9pbignJicpLnJlcGxhY2UocjIwLCAnKycpO1xufVxuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG4vKipcbiAqIEVuY29kZSBhIHNldCBvZiBmb3JtIGVsZW1lbnRzIGFzIGFuIGFycmF5IG9mIG5hbWVzIGFuZCB2YWx1ZXMuXG4gKlxuICogQGNhdGVnb3J5IEZvcm1zXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCc8Zm9ybT48aW5wdXQgbmFtZT1cImZvb1wiIHZhbHVlPVwiYmFyXCIgLz48L2Zvcm0+Jykuc2VyaWFsaXplQXJyYXkoKTtcbiAqIC8vPT4gWyB7IG5hbWU6ICdmb28nLCB2YWx1ZTogJ2JhcicgfSBdXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyBUaGUgc2VyaWFsaXplZCBmb3JtLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9zZXJpYWxpemVBcnJheS99XG4gKi9cbmZ1bmN0aW9uIHNlcmlhbGl6ZUFycmF5KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgLy8gUmVzb2x2ZSBhbGwgZm9ybSBlbGVtZW50cyBmcm9tIGVpdGhlciBmb3JtcyBvciBjb2xsZWN0aW9ucyBvZiBmb3JtIGVsZW1lbnRzXG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChfLCBlbGVtKSB7XG4gICAgICAgIHZhciAkZWxlbSA9IF90aGlzLl9tYWtlKGVsZW0pO1xuICAgICAgICBpZiAoKDAsIHV0aWxzX2pzXzEuaXNUYWcpKGVsZW0pICYmIGVsZW0ubmFtZSA9PT0gJ2Zvcm0nKSB7XG4gICAgICAgICAgICByZXR1cm4gJGVsZW0uZmluZChzdWJtaXR0YWJsZVNlbGVjdG9yKS50b0FycmF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRlbGVtLmZpbHRlcihzdWJtaXR0YWJsZVNlbGVjdG9yKS50b0FycmF5KCk7XG4gICAgfSlcbiAgICAgICAgLmZpbHRlcihcbiAgICAvLyBWZXJpZnkgZWxlbWVudHMgaGF2ZSBhIG5hbWUgKGBhdHRyLm5hbWVgKSBhbmQgYXJlIG5vdCBkaXNhYmxlZCAoYDplbmFibGVkYClcbiAgICAnW25hbWUhPVwiXCJdOmVuYWJsZWQnICtcbiAgICAgICAgLy8gQW5kIGNhbm5vdCBiZSBjbGlja2VkIChgW3R5cGU9c3VibWl0XWApIG9yIGFyZSB1c2VkIGluIGB4LXd3dy1mb3JtLXVybGVuY29kZWRgIChgW3R5cGU9ZmlsZV1gKVxuICAgICAgICAnOm5vdCg6c3VibWl0LCA6YnV0dG9uLCA6aW1hZ2UsIDpyZXNldCwgOmZpbGUpJyArXG4gICAgICAgIC8vIEFuZCBhcmUgZWl0aGVyIGNoZWNrZWQvZG9uJ3QgaGF2ZSBhIGNoZWNrYWJsZSBzdGF0ZVxuICAgICAgICAnOm1hdGNoZXMoW2NoZWNrZWRdLCA6bm90KDpjaGVja2JveCwgOnJhZGlvKSknXG4gICAgLy8gQ29udmVydCBlYWNoIG9mIHRoZSBlbGVtZW50cyB0byBpdHMgdmFsdWUocylcbiAgICApXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKF8sIGVsZW0pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgJGVsZW0gPSBfdGhpcy5fbWFrZShlbGVtKTtcbiAgICAgICAgdmFyIG5hbWUgPSAkZWxlbS5hdHRyKCduYW1lJyk7IC8vIFdlIGhhdmUgZmlsdGVyZWQgZm9yIGVsZW1lbnRzIHdpdGggYSBuYW1lIGJlZm9yZS5cbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gdmFsdWUgc2V0IChlLmcuIGB1bmRlZmluZWRgLCBgbnVsbGApLCB0aGVuIGRlZmF1bHQgdmFsdWUgdG8gZW1wdHlcbiAgICAgICAgdmFyIHZhbHVlID0gKF9hID0gJGVsZW0udmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGFuIGFycmF5IG9mIHZhbHVlcyAoZS5nLiBgPHNlbGVjdCBtdWx0aXBsZT5gKSwgcmV0dXJuIGFuIGFycmF5IG9mIGtleS92YWx1ZSBwYWlyc1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICogV2UgdHJpbSByZXBsYWNlIGFueSBsaW5lIGVuZGluZ3MgKGUuZy4gYFxccmAgb3IgYFxcclxcbmAgd2l0aCBgXFxyXFxuYCkgdG8gZ3VhcmFudGVlIGNvbnNpc3RlbmN5IGFjcm9zcyBwbGF0Zm9ybXNcbiAgICAgICAgICAgICAgICAgKiBUaGVzZSBjYW4gb2NjdXIgaW5zaWRlIG9mIGA8dGV4dGFyZWE+J3NgXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgcmV0dXJuICh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZShyQ1JMRiwgJ1xcclxcbicpIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlIChlLmcuIGA8aW5wdXQgdHlwZT1cInRleHRcIj5gLCByZXR1cm4gb25seSBvbmUga2V5L3ZhbHVlIHBhaXJcbiAgICAgICAgcmV0dXJuIHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLnJlcGxhY2UockNSTEYsICdcXHJcXG4nKSB9O1xuICAgIH0pXG4gICAgICAgIC50b0FycmF5KCk7XG59XG5leHBvcnRzLnNlcmlhbGl6ZUFycmF5ID0gc2VyaWFsaXplQXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3Jtcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzZXJpYWxpemVBcnJheSIsInNlcmlhbGl6ZSIsInV0aWxzX2pzXzEiLCJyZXF1aXJlIiwic3VibWl0dGFibGVTZWxlY3RvciIsInIyMCIsInJDUkxGIiwiYXJyIiwicmV0QXJyIiwibWFwIiwiZGF0YSIsImNvbmNhdCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm5hbWUiLCJqb2luIiwicmVwbGFjZSIsIl90aGlzIiwiXyIsImVsZW0iLCIkZWxlbSIsIl9tYWtlIiwiaXNUYWciLCJmaW5kIiwidG9BcnJheSIsImZpbHRlciIsIl9hIiwiYXR0ciIsInZhbCIsIkFycmF5IiwiaXNBcnJheSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/api/forms.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/api/manipulation.js":
/*!******************************************************!*\
  !*** ./node_modules/cheerio/lib/api/manipulation.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */ var __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.clone = exports.text = exports.toString = exports.html = exports.empty = exports.replaceWith = exports.remove = exports.insertBefore = exports.before = exports.insertAfter = exports.after = exports.wrapAll = exports.unwrap = exports.wrapInner = exports.wrap = exports.prepend = exports.append = exports.prependTo = exports.appendTo = exports._makeDomArray = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nvar parse_js_1 = __webpack_require__(/*! ../parse.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/parse.js\");\nvar static_js_1 = __webpack_require__(/*! ../static.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/static.js\");\nvar utils_js_1 = __webpack_require__(/*! ../utils.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/utils.js\");\nvar domutils_1 = __webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\");\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @category Manipulation\n * @param elem - Elements to make an array of.\n * @param clone - Optionally clone nodes.\n * @returns The array of nodes.\n */ function _makeDomArray(elem, clone) {\n    var _this = this;\n    if (elem == null) {\n        return [];\n    }\n    if ((0, utils_js_1.isCheerio)(elem)) {\n        return clone ? (0, utils_js_1.cloneDom)(elem.get()) : elem.get();\n    }\n    if (Array.isArray(elem)) {\n        return elem.reduce(function(newElems, el) {\n            return newElems.concat(_this._makeDomArray(el, clone));\n        }, []);\n    }\n    if (typeof elem === \"string\") {\n        return this._parse(elem, this.options, false, null).children;\n    }\n    return clone ? (0, utils_js_1.cloneDom)([\n        elem\n    ]) : [\n        elem\n    ];\n}\nexports._makeDomArray = _makeDomArray;\nfunction _insert(concatenator) {\n    return function() {\n        var _this = this;\n        var elems = [];\n        for(var _i = 0; _i < arguments.length; _i++){\n            elems[_i] = arguments[_i];\n        }\n        var lastIdx = this.length - 1;\n        return (0, utils_js_1.domEach)(this, function(el, i) {\n            if (!(0, domhandler_1.hasChildren)(el)) return;\n            var domSrc = typeof elems[0] === \"function\" ? elems[0].call(el, i, _this._render(el.children)) : elems;\n            var dom = _this._makeDomArray(domSrc, i < lastIdx);\n            concatenator(dom, el.children, el);\n        });\n    };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @category Manipulation\n * @param array - Target array to splice.\n * @param spliceIdx - Index at which to begin changing the array.\n * @param spliceCount - Number of elements to remove from the array.\n * @param newElems - Elements to insert into the array.\n * @param parent - The parent of the node.\n * @returns The spliced array.\n */ function uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n    var _a, _b;\n    var spliceArgs = __spreadArray([\n        spliceIdx,\n        spliceCount\n    ], newElems, true);\n    var prev = spliceIdx === 0 ? null : array[spliceIdx - 1];\n    var next = spliceIdx + spliceCount >= array.length ? null : array[spliceIdx + spliceCount];\n    /*\n     * Before splicing in new elements, ensure they do not already appear in the\n     * current array.\n     */ for(var idx = 0; idx < newElems.length; ++idx){\n        var node = newElems[idx];\n        var oldParent = node.parent;\n        if (oldParent) {\n            var oldSiblings = oldParent.children;\n            var prevIdx = oldSiblings.indexOf(node);\n            if (prevIdx > -1) {\n                oldParent.children.splice(prevIdx, 1);\n                if (parent === oldParent && spliceIdx > prevIdx) {\n                    spliceArgs[0]--;\n                }\n            }\n        }\n        node.parent = parent;\n        if (node.prev) {\n            node.prev.next = (_a = node.next) !== null && _a !== void 0 ? _a : null;\n        }\n        if (node.next) {\n            node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;\n        }\n        node.prev = idx === 0 ? prev : newElems[idx - 1];\n        node.next = idx === newElems.length - 1 ? next : newElems[idx + 1];\n    }\n    if (prev) {\n        prev.next = newElems[0];\n    }\n    if (next) {\n        next.prev = newElems[newElems.length - 1];\n    }\n    return array.splice.apply(array, spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to append elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */ function appendTo(target) {\n    var appendTarget = (0, utils_js_1.isCheerio)(target) ? target : this._make(target);\n    appendTarget.append(this);\n    return this;\n}\nexports.appendTo = appendTo;\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to prepend elements to.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */ function prependTo(target) {\n    var prependTarget = (0, utils_js_1.isCheerio)(target) ? target : this._make(target);\n    prependTarget.prepend(this);\n    return this;\n}\nexports.prependTo = prependTo;\n/**\n * Inserts content as the _last_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').append('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/append/}\n */ exports.append = _insert(function(dom, children, parent) {\n    uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the _first_ child of each of the selected elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').prepend('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @see {@link https://api.jquery.com/prepend/}\n */ exports.prepend = _insert(function(dom, children, parent) {\n    uniqueSplice(children, 0, 0, dom, parent);\n});\nfunction _wrap(insert) {\n    return function(wrapper) {\n        var lastIdx = this.length - 1;\n        var lastParent = this.parents().last();\n        for(var i = 0; i < this.length; i++){\n            var el = this[i];\n            var wrap_1 = typeof wrapper === \"function\" ? wrapper.call(el, i, el) : typeof wrapper === \"string\" && !(0, utils_js_1.isHtml)(wrapper) ? lastParent.find(wrapper).clone() : wrapper;\n            var wrapperDom = this._makeDomArray(wrap_1, i < lastIdx)[0];\n            if (!wrapperDom || !(0, domhandler_1.hasChildren)(wrapperDom)) continue;\n            var elInsertLocation = wrapperDom;\n            /*\n             * Find the deepest child. Only consider the first tag child of each node\n             * (ignore text); stop if no children are found.\n             */ var j = 0;\n            while(j < elInsertLocation.children.length){\n                var child = elInsertLocation.children[j];\n                if ((0, utils_js_1.isTag)(child)) {\n                    elInsertLocation = child;\n                    j = 0;\n                } else {\n                    j++;\n                }\n            }\n            insert(el, elInsertLocation, [\n                wrapperDom\n            ]);\n        }\n        return this;\n    };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrap(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrap(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around each element in the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */ exports.wrap = _wrap(function(el, elInsertLocation, wrapperDom) {\n    var parent = el.parent;\n    if (!parent) return;\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    (0, parse_js_1.update)([\n        el\n    ], elInsertLocation);\n    /*\n     * The previous operation removed the current element from the `siblings`\n     * array, so the `dom` array can be inserted without removing any\n     * additional elements.\n     */ uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const redFruit = $('<div class=\"red-fruit\"></div>');\n * $('.apple').wrapInner(redFruit);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>');\n * $('li').wrapInner(healthy);\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around the content of each element\n *   in the selection.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/wrapInner/}\n */ exports.wrapInner = _wrap(function(el, elInsertLocation, wrapperDom) {\n    if (!(0, domhandler_1.hasChildren)(el)) return;\n    (0, parse_js_1.update)(el.children, elInsertLocation);\n    (0, parse_js_1.update)(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @category Manipulation\n * @example <caption>without selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n * );\n * $('#test p').unwrap();\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @example <caption>with selector</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n * );\n * $('#test p').unwrap('b');\n *\n * //=> <div id=test>\n * //     <p>Hello</p>\n * //     <p>World</p>\n * //   </div>\n * ```\n *\n * @param selector - A selector to check the parent element against. If an\n *   element's parent does not match the selector, the element won't be unwrapped.\n * @returns The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */ function unwrap(selector) {\n    var _this = this;\n    this.parent(selector).not(\"body\").each(function(_, el) {\n        _this._make(el).replaceWith(el.children);\n    });\n    return this;\n}\nexports.unwrap = unwrap;\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @category Manipulation\n * @example <caption>With markup passed to `wrapAll`</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n * );\n * $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n * //=> <div class=\"container\">\n * //     <div class='new'>\n * //       <div class=\"inner\">First</div>\n * //       <div class=\"inner\">Second</div>\n * //     </div>\n * //   </div>\n * ```\n *\n * @example <caption>With an existing cheerio instance</caption>\n *\n * ```js\n * const $ = cheerio.load(\n *   '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n * );\n * const wrap = $('<div><p><em><b></b></em></p></div>');\n * $('span').wrapAll(wrap);\n *\n * //=> <div>\n * //     <p>\n * //       <em>\n * //         <b>\n * //           <span>Span 1</span>\n * //           <span>Span 2</span>\n * //         </b>\n * //       </em>\n * //     </p>\n * //   </div>\n * //   <strong>Strong</strong>\n * ```\n *\n * @param wrapper - The DOM structure to wrap around all matched elements in the\n *   selection.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */ function wrapAll(wrapper) {\n    var el = this[0];\n    if (el) {\n        var wrap_2 = this._make(typeof wrapper === \"function\" ? wrapper.call(el, 0, el) : wrapper).insertBefore(el);\n        // If html is given as wrapper, wrap may contain text elements\n        var elInsertLocation = void 0;\n        for(var i = 0; i < wrap_2.length; i++){\n            if (wrap_2[i].type === \"tag\") elInsertLocation = wrap_2[i];\n        }\n        var j = 0;\n        /*\n         * Find the deepest child. Only consider the first tag child of each node\n         * (ignore text); stop if no children are found.\n         */ while(elInsertLocation && j < elInsertLocation.children.length){\n            var child = elInsertLocation.children[j];\n            if (child.type === \"tag\") {\n                elInsertLocation = child;\n                j = 0;\n            } else {\n                j++;\n            }\n        }\n        if (elInsertLocation) this._make(elInsertLocation).append(this);\n    }\n    return this;\n}\nexports.wrapAll = wrapAll;\n/* eslint-disable jsdoc/check-param-names*/ /**\n * Insert content next to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').after('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert after each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */ function after() {\n    var _this = this;\n    var elems = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        elems[_i] = arguments[_i];\n    }\n    var lastIdx = this.length - 1;\n    return (0, utils_js_1.domEach)(this, function(el, i) {\n        var parent = el.parent;\n        if (!(0, domhandler_1.hasChildren)(el) || !parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */ if (index < 0) return;\n        var domSrc = typeof elems[0] === \"function\" ? elems[0].call(el, i, _this._render(el.children)) : elems;\n        var dom = _this._makeDomArray(domSrc, i < lastIdx);\n        // Add element after `this` element\n        uniqueSplice(siblings, index + 1, 0, dom, parent);\n    });\n}\nexports.after = after;\n/* eslint-enable jsdoc/check-param-names*/ /**\n * Insert every element in the set of matched elements after the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements after.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */ function insertAfter(target) {\n    var _this = this;\n    if (typeof target === \"string\") {\n        target = this._make(target);\n    }\n    this.remove();\n    var clones = [];\n    this._makeDomArray(target).forEach(function(el) {\n        var clonedSelf = _this.clone().toArray();\n        var parent = el.parent;\n        if (!parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */ if (index < 0) return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n        clones.push.apply(clones, clonedSelf);\n    });\n    return this._make(clones);\n}\nexports.insertAfter = insertAfter;\n/* eslint-disable jsdoc/check-param-names*/ /**\n * Insert content previous to each element in the set of matched elements.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.apple').before('<li class=\"plum\">Plum</li>');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param content - HTML string, DOM element, array of DOM elements or Cheerio\n *   to insert before each element in the set of matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */ function before() {\n    var _this = this;\n    var elems = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        elems[_i] = arguments[_i];\n    }\n    var lastIdx = this.length - 1;\n    return (0, utils_js_1.domEach)(this, function(el, i) {\n        var parent = el.parent;\n        if (!(0, domhandler_1.hasChildren)(el) || !parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */ if (index < 0) return;\n        var domSrc = typeof elems[0] === \"function\" ? elems[0].call(el, i, _this._render(el.children)) : elems;\n        var dom = _this._makeDomArray(domSrc, i < lastIdx);\n        // Add element before `el` element\n        uniqueSplice(siblings, index, 0, dom, parent);\n    });\n}\nexports.before = before;\n/* eslint-enable jsdoc/check-param-names*/ /**\n * Insert every element in the set of matched elements before the target.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n * ```\n *\n * @param target - Element to insert elements before.\n * @returns The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */ function insertBefore(target) {\n    var _this = this;\n    var targetArr = this._make(target);\n    this.remove();\n    var clones = [];\n    (0, utils_js_1.domEach)(targetArr, function(el) {\n        var clonedSelf = _this.clone().toArray();\n        var parent = el.parent;\n        if (!parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var index = siblings.indexOf(el);\n        // If not found, move on\n        /* istanbul ignore next */ if (index < 0) return;\n        // Add cloned `this` element(s) after target element\n        uniqueSplice(siblings, index, 0, clonedSelf, parent);\n        clones.push.apply(clones, clonedSelf);\n    });\n    return this._make(clones);\n}\nexports.insertBefore = insertBefore;\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('.pear').remove();\n * $.html();\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n * ```\n *\n * @param selector - Optional selector for elements to remove.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */ function remove(selector) {\n    // Filter if we have selector\n    var elems = selector ? this.filter(selector) : this;\n    (0, utils_js_1.domEach)(elems, function(el) {\n        (0, domutils_1.removeElement)(el);\n        el.prev = el.next = el.parent = null;\n    });\n    return this;\n}\nexports.remove = remove;\n/**\n * Replaces matched elements with `content`.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const plum = $('<li class=\"plum\">Plum</li>');\n * $('.pear').replaceWith(plum);\n * $.html();\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n * ```\n *\n * @param content - Replacement for matched elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */ function replaceWith(content) {\n    var _this = this;\n    return (0, utils_js_1.domEach)(this, function(el, i) {\n        var parent = el.parent;\n        if (!parent) {\n            return;\n        }\n        var siblings = parent.children;\n        var cont = typeof content === \"function\" ? content.call(el, i, el) : content;\n        var dom = _this._makeDomArray(cont);\n        /*\n         * In the case that `dom` contains nodes that already exist in other\n         * structures, ensure those nodes are properly removed.\n         */ (0, parse_js_1.update)(dom, null);\n        var index = siblings.indexOf(el);\n        // Completely remove old element\n        uniqueSplice(siblings, index, 1, dom, parent);\n        if (!dom.includes(el)) {\n            el.parent = el.prev = el.next = null;\n        }\n    });\n}\nexports.replaceWith = replaceWith;\n/**\n * Empties an element, removing all its children.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * $('ul').empty();\n * $.html();\n * //=>  <ul id=\"fruits\"></ul>\n * ```\n *\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */ function empty() {\n    return (0, utils_js_1.domEach)(this, function(el) {\n        if (!(0, domhandler_1.hasChildren)(el)) return;\n        el.children.forEach(function(child) {\n            child.next = child.prev = child.parent = null;\n        });\n        el.children.length = 0;\n    });\n}\nexports.empty = empty;\nfunction html(str) {\n    var _this = this;\n    if (str === undefined) {\n        var el = this[0];\n        if (!el || !(0, domhandler_1.hasChildren)(el)) return null;\n        return this._render(el.children);\n    }\n    return (0, utils_js_1.domEach)(this, function(el) {\n        if (!(0, domhandler_1.hasChildren)(el)) return;\n        el.children.forEach(function(child) {\n            child.next = child.prev = child.parent = null;\n        });\n        var content = (0, utils_js_1.isCheerio)(str) ? str.toArray() : _this._parse(\"\".concat(str), _this.options, false, el).children;\n        (0, parse_js_1.update)(content, el);\n    });\n}\nexports.html = html;\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @category Manipulation\n * @returns The rendered document.\n */ function toString() {\n    return this._render(this);\n}\nexports.toString = toString;\nfunction text(str) {\n    var _this = this;\n    // If `str` is undefined, act as a \"getter\"\n    if (str === undefined) {\n        return (0, static_js_1.text)(this);\n    }\n    if (typeof str === \"function\") {\n        // Function support\n        return (0, utils_js_1.domEach)(this, function(el, i) {\n            return _this._make(el).text(str.call(el, i, (0, static_js_1.text)([\n                el\n            ])));\n        });\n    }\n    // Append text node to each selected elements\n    return (0, utils_js_1.domEach)(this, function(el) {\n        if (!(0, domhandler_1.hasChildren)(el)) return;\n        el.children.forEach(function(child) {\n            child.next = child.prev = child.parent = null;\n        });\n        var textNode = new domhandler_1.Text(\"\".concat(str));\n        (0, parse_js_1.update)(textNode, el);\n    });\n}\nexports.text = text;\n/**\n * Clone the cheerio object.\n *\n * @category Manipulation\n * @example\n *\n * ```js\n * const moreFruit = $('#fruits').clone();\n * ```\n *\n * @returns The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */ function clone() {\n    return this._make((0, utils_js_1.cloneDom)(this.get()));\n}\nexports.clone = clone; //# sourceMappingURL=manipulation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/api/manipulation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/api/traversing.js":
/*!****************************************************!*\
  !*** ./node_modules/cheerio/lib/api/traversing.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n/**\n * Methods for traversing the DOM structure.\n *\n * @module cheerio/traversing\n */ var __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.addBack = exports.add = exports.end = exports.slice = exports.index = exports.toArray = exports.get = exports.eq = exports.last = exports.first = exports.has = exports.not = exports.is = exports.filterArray = exports.filter = exports.map = exports.each = exports.contents = exports.children = exports.siblings = exports.prevUntil = exports.prevAll = exports.prev = exports.nextUntil = exports.nextAll = exports.next = exports.closest = exports.parentsUntil = exports.parents = exports.parent = exports.find = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nvar select = __importStar(__webpack_require__(/*! cheerio-select */ \"(app-pages-browser)/./node_modules/cheerio-select/lib/index.js\"));\nvar utils_js_1 = __webpack_require__(/*! ../utils.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/utils.js\");\nvar static_js_1 = __webpack_require__(/*! ../static.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/static.js\");\nvar domutils_1 = __webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\");\nvar reSiblingSelector = /^\\s*[~+]/;\n/**\n * Get the descendants of each element in the current set of matched elements,\n * filtered by a selector, jQuery object, or element.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').find('li').length;\n * //=> 3\n * $('#fruits').find($('.apple')).length;\n * //=> 1\n * ```\n *\n * @param selectorOrHaystack - Element to look for.\n * @returns The found elements.\n * @see {@link https://api.jquery.com/find/}\n */ function find(selectorOrHaystack) {\n    var _a;\n    if (!selectorOrHaystack) {\n        return this._make([]);\n    }\n    var context = this.toArray();\n    if (typeof selectorOrHaystack !== \"string\") {\n        var haystack = (0, utils_js_1.isCheerio)(selectorOrHaystack) ? selectorOrHaystack.toArray() : [\n            selectorOrHaystack\n        ];\n        return this._make(haystack.filter(function(elem) {\n            return context.some(function(node) {\n                return (0, static_js_1.contains)(node, elem);\n            });\n        }));\n    }\n    var elems = reSiblingSelector.test(selectorOrHaystack) ? context : this.children().toArray();\n    var options = {\n        context: context,\n        root: (_a = this._root) === null || _a === void 0 ? void 0 : _a[0],\n        // Pass options that are recognized by `cheerio-select`\n        xmlMode: this.options.xmlMode,\n        lowerCaseTags: this.options.lowerCaseTags,\n        lowerCaseAttributeNames: this.options.lowerCaseAttributeNames,\n        pseudos: this.options.pseudos,\n        quirksMode: this.options.quirksMode\n    };\n    return this._make(select.select(selectorOrHaystack, elems, options));\n}\nexports.find = find;\n/**\n * Creates a matcher, using a particular mapping function. Matchers provide a\n * function that finds elements using a generating function, supporting filtering.\n *\n * @private\n * @param matchMap - Mapping function.\n * @returns - Function for wrapping generating functions.\n */ function _getMatcher(matchMap) {\n    return function(fn) {\n        var postFns = [];\n        for(var _i = 1; _i < arguments.length; _i++){\n            postFns[_i - 1] = arguments[_i];\n        }\n        return function(selector) {\n            var _a;\n            var matched = matchMap(fn, this);\n            if (selector) {\n                matched = filterArray(matched, selector, this.options.xmlMode, (_a = this._root) === null || _a === void 0 ? void 0 : _a[0]);\n            }\n            return this._make(// Post processing is only necessary if there is more than one element.\n            this.length > 1 && matched.length > 1 ? postFns.reduce(function(elems, fn) {\n                return fn(elems);\n            }, matched) : matched);\n        };\n    };\n}\n/** Matcher that adds multiple elements for each entry in the input. */ var _matcher = _getMatcher(function(fn, elems) {\n    var _a;\n    var ret = [];\n    for(var i = 0; i < elems.length; i++){\n        var value = fn(elems[i]);\n        ret.push(value);\n    }\n    return (_a = new Array()).concat.apply(_a, ret);\n});\n/** Matcher that adds at most one element for each entry in the input. */ var _singleMatcher = _getMatcher(function(fn, elems) {\n    var ret = [];\n    for(var i = 0; i < elems.length; i++){\n        var value = fn(elems[i]);\n        if (value !== null) {\n            ret.push(value);\n        }\n    }\n    return ret;\n});\n/**\n * Matcher that supports traversing until a condition is met.\n *\n * @returns A function usable for `*Until` methods.\n */ function _matchUntil(nextElem) {\n    var postFns = [];\n    for(var _i = 1; _i < arguments.length; _i++){\n        postFns[_i - 1] = arguments[_i];\n    }\n    // We use a variable here that is used from within the matcher.\n    var matches = null;\n    var innerMatcher = _getMatcher(function(nextElem, elems) {\n        var matched = [];\n        (0, utils_js_1.domEach)(elems, function(elem) {\n            for(var next_1; next_1 = nextElem(elem); elem = next_1){\n                // FIXME: `matched` might contain duplicates here and the index is too large.\n                if (matches === null || matches === void 0 ? void 0 : matches(next_1, matched.length)) break;\n                matched.push(next_1);\n            }\n        });\n        return matched;\n    }).apply(void 0, __spreadArray([\n        nextElem\n    ], postFns, false));\n    return function(selector, filterSelector) {\n        var _this = this;\n        // Override `matches` variable with the new target.\n        matches = typeof selector === \"string\" ? function(elem) {\n            return select.is(elem, selector, _this.options);\n        } : selector ? getFilterFn(selector) : null;\n        var ret = innerMatcher.call(this, filterSelector);\n        // Set `matches` to `null`, so we don't waste memory.\n        matches = null;\n        return ret;\n    };\n}\nfunction _removeDuplicates(elems) {\n    return Array.from(new Set(elems));\n}\n/**\n * Get the parent of each element in the current set of matched elements,\n * optionally filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').parent().attr('id');\n * //=> fruits\n * ```\n *\n * @param selector - If specified filter for parent.\n * @returns The parents.\n * @see {@link https://api.jquery.com/parent/}\n */ exports.parent = _singleMatcher(function(_a) {\n    var parent = _a.parent;\n    return parent && !(0, domhandler_1.isDocument)(parent) ? parent : null;\n}, _removeDuplicates);\n/**\n * Get a set of parents filtered by `selector` of each element in the current\n * set of match elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').parents().length;\n * //=> 2\n * $('.orange').parents('#fruits').length;\n * //=> 1\n * ```\n *\n * @param selector - If specified filter for parents.\n * @returns The parents.\n * @see {@link https://api.jquery.com/parents/}\n */ exports.parents = _matcher(function(elem) {\n    var matched = [];\n    while(elem.parent && !(0, domhandler_1.isDocument)(elem.parent)){\n        matched.push(elem.parent);\n        elem = elem.parent;\n    }\n    return matched;\n}, domutils_1.uniqueSort, function(elems) {\n    return elems.reverse();\n});\n/**\n * Get the ancestors of each element in the current set of matched elements, up\n * to but not including the element matched by the selector, DOM node, or cheerio object.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').parentsUntil('#food').length;\n * //=> 1\n * ```\n *\n * @param selector - Selector for element to stop at.\n * @param filterSelector - Optional filter for parents.\n * @returns The parents.\n * @see {@link https://api.jquery.com/parentsUntil/}\n */ exports.parentsUntil = _matchUntil(function(_a) {\n    var parent = _a.parent;\n    return parent && !(0, domhandler_1.isDocument)(parent) ? parent : null;\n}, domutils_1.uniqueSort, function(elems) {\n    return elems.reverse();\n});\n/**\n * For each element in the set, get the first element that matches the selector\n * by testing the element itself and traversing up through its ancestors in the DOM tree.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').closest();\n * //=> []\n *\n * $('.orange').closest('.apple');\n * // => []\n *\n * $('.orange').closest('li');\n * //=> [<li class=\"orange\">Orange</li>]\n *\n * $('.orange').closest('#fruits');\n * //=> [<ul id=\"fruits\"> ... </ul>]\n * ```\n *\n * @param selector - Selector for the element to find.\n * @returns The closest nodes.\n * @see {@link https://api.jquery.com/closest/}\n */ function closest(selector) {\n    var _a;\n    var set = [];\n    if (!selector) {\n        return this._make(set);\n    }\n    var selectOpts = {\n        xmlMode: this.options.xmlMode,\n        root: (_a = this._root) === null || _a === void 0 ? void 0 : _a[0]\n    };\n    var selectFn = typeof selector === \"string\" ? function(elem) {\n        return select.is(elem, selector, selectOpts);\n    } : getFilterFn(selector);\n    (0, utils_js_1.domEach)(this, function(elem) {\n        while(elem && (0, utils_js_1.isTag)(elem)){\n            if (selectFn(elem, 0)) {\n                // Do not add duplicate elements to the set\n                if (!set.includes(elem)) {\n                    set.push(elem);\n                }\n                break;\n            }\n            elem = elem.parent;\n        }\n    });\n    return this._make(set);\n}\nexports.closest = closest;\n/**\n * Gets the next sibling of the first selected element, optionally filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').next().hasClass('orange');\n * //=> true\n * ```\n *\n * @param selector - If specified filter for sibling.\n * @returns The next nodes.\n * @see {@link https://api.jquery.com/next/}\n */ exports.next = _singleMatcher(function(elem) {\n    return (0, domutils_1.nextElementSibling)(elem);\n});\n/**\n * Gets all the following siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').nextAll();\n * //=> [<li class=\"orange\">Orange</li>, <li class=\"pear\">Pear</li>]\n * $('.apple').nextAll('.orange');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The next nodes.\n * @see {@link https://api.jquery.com/nextAll/}\n */ exports.nextAll = _matcher(function(elem) {\n    var matched = [];\n    while(elem.next){\n        elem = elem.next;\n        if ((0, utils_js_1.isTag)(elem)) matched.push(elem);\n    }\n    return matched;\n}, _removeDuplicates);\n/**\n * Gets all the following siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').nextUntil('.pear');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - Selector for element to stop at.\n * @param filterSelector - If specified filter for siblings.\n * @returns The next nodes.\n * @see {@link https://api.jquery.com/nextUntil/}\n */ exports.nextUntil = _matchUntil(function(el) {\n    return (0, domutils_1.nextElementSibling)(el);\n}, _removeDuplicates);\n/**\n * Gets the previous sibling of the first selected element optionally filtered\n * by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').prev().hasClass('apple');\n * //=> true\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The previous nodes.\n * @see {@link https://api.jquery.com/prev/}\n */ exports.prev = _singleMatcher(function(elem) {\n    return (0, domutils_1.prevElementSibling)(elem);\n});\n/**\n * Gets all the preceding siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').prevAll();\n * //=> [<li class=\"orange\">Orange</li>, <li class=\"apple\">Apple</li>]\n *\n * $('.pear').prevAll('.orange');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The previous nodes.\n * @see {@link https://api.jquery.com/prevAll/}\n */ exports.prevAll = _matcher(function(elem) {\n    var matched = [];\n    while(elem.prev){\n        elem = elem.prev;\n        if ((0, utils_js_1.isTag)(elem)) matched.push(elem);\n    }\n    return matched;\n}, _removeDuplicates);\n/**\n * Gets all the preceding siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').prevUntil('.apple');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - Selector for element to stop at.\n * @param filterSelector - If specified filter for siblings.\n * @returns The previous nodes.\n * @see {@link https://api.jquery.com/prevUntil/}\n */ exports.prevUntil = _matchUntil(function(el) {\n    return (0, domutils_1.prevElementSibling)(el);\n}, _removeDuplicates);\n/**\n * Get the siblings of each element (excluding the element) in the set of\n * matched elements, optionally filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').siblings().length;\n * //=> 2\n *\n * $('.pear').siblings('.orange').length;\n * //=> 1\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The siblings.\n * @see {@link https://api.jquery.com/siblings/}\n */ exports.siblings = _matcher(function(elem) {\n    return (0, domutils_1.getSiblings)(elem).filter(function(el) {\n        return (0, utils_js_1.isTag)(el) && el !== elem;\n    });\n}, domutils_1.uniqueSort);\n/**\n * Gets the element children of each element in the set of matched elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').children().length;\n * //=> 3\n *\n * $('#fruits').children('.pear').text();\n * //=> Pear\n * ```\n *\n * @param selector - If specified filter for children.\n * @returns The children.\n * @see {@link https://api.jquery.com/children/}\n */ exports.children = _matcher(function(elem) {\n    return (0, domutils_1.getChildren)(elem).filter(utils_js_1.isTag);\n}, _removeDuplicates);\n/**\n * Gets the children of each element in the set of matched elements, including\n * text and comment nodes.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').contents().length;\n * //=> 3\n * ```\n *\n * @returns The children.\n * @see {@link https://api.jquery.com/contents/}\n */ function contents() {\n    var elems = this.toArray().reduce(function(newElems, elem) {\n        return (0, domhandler_1.hasChildren)(elem) ? newElems.concat(elem.children) : newElems;\n    }, []);\n    return this._make(elems);\n}\nexports.contents = contents;\n/**\n * Iterates over a cheerio object, executing a function for each matched\n * element. When the callback is fired, the function is fired in the context of\n * the DOM element, so `this` refers to the current element, which is equivalent\n * to the function parameter `element`. To break out of the `each` loop early,\n * return with `false`.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * const fruits = [];\n *\n * $('li').each(function (i, elem) {\n *   fruits[i] = $(this).text();\n * });\n *\n * fruits.join(', ');\n * //=> Apple, Orange, Pear\n * ```\n *\n * @param fn - Function to execute.\n * @returns The instance itself, useful for chaining.\n * @see {@link https://api.jquery.com/each/}\n */ function each(fn) {\n    var i = 0;\n    var len = this.length;\n    while(i < len && fn.call(this[i], i, this[i]) !== false)++i;\n    return this;\n}\nexports.each = each;\n/**\n * Pass each element in the current matched set through a function, producing a\n * new Cheerio object containing the return values. The function can return an\n * individual data item or an array of data items to be inserted into the\n * resulting set. If an array is returned, the elements inside the array are\n * inserted into the set. If the function returns null or undefined, no element\n * will be inserted.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li')\n *   .map(function (i, el) {\n *     // this === el\n *     return $(this).text();\n *   })\n *   .toArray()\n *   .join(' ');\n * //=> \"apple orange pear\"\n * ```\n *\n * @param fn - Function to execute.\n * @returns The mapped elements, wrapped in a Cheerio collection.\n * @see {@link https://api.jquery.com/map/}\n */ function map(fn) {\n    var elems = [];\n    for(var i = 0; i < this.length; i++){\n        var el = this[i];\n        var val = fn.call(el, i, el);\n        if (val != null) {\n            elems = elems.concat(val);\n        }\n    }\n    return this._make(elems);\n}\nexports.map = map;\n/**\n * Creates a function to test if a filter is matched.\n *\n * @param match - A filter.\n * @returns A function that determines if a filter has been matched.\n */ function getFilterFn(match) {\n    if (typeof match === \"function\") {\n        return function(el, i) {\n            return match.call(el, i, el);\n        };\n    }\n    if ((0, utils_js_1.isCheerio)(match)) {\n        return function(el) {\n            return Array.prototype.includes.call(match, el);\n        };\n    }\n    return function(el) {\n        return match === el;\n    };\n}\nfunction filter(match) {\n    var _a;\n    return this._make(filterArray(this.toArray(), match, this.options.xmlMode, (_a = this._root) === null || _a === void 0 ? void 0 : _a[0]));\n}\nexports.filter = filter;\nfunction filterArray(nodes, match, xmlMode, root) {\n    return typeof match === \"string\" ? select.filter(match, nodes, {\n        xmlMode: xmlMode,\n        root: root\n    }) : nodes.filter(getFilterFn(match));\n}\nexports.filterArray = filterArray;\n/**\n * Checks the current list of elements and returns `true` if _any_ of the\n * elements match the selector. If using an element or Cheerio selection,\n * returns `true` if _any_ of the elements match. If using a predicate function,\n * the function is executed in the context of the selected element, so `this`\n * refers to the current element.\n *\n * @category Attributes\n * @param selector - Selector for the selection.\n * @returns Whether or not the selector matches an element of the instance.\n * @see {@link https://api.jquery.com/is/}\n */ function is(selector) {\n    var nodes = this.toArray();\n    return typeof selector === \"string\" ? select.some(nodes.filter(utils_js_1.isTag), selector, this.options) : selector ? nodes.some(getFilterFn(selector)) : false;\n}\nexports.is = is;\n/**\n * Remove elements from the set of matched elements. Given a Cheerio object that\n * represents a set of DOM elements, the `.not()` method constructs a new\n * Cheerio object from a subset of the matching elements. The supplied selector\n * is tested against each element; the elements that don't match the selector\n * will be included in the result.\n *\n * The `.not()` method can take a function as its argument in the same way that\n * `.filter()` does. Elements for which the function returns `true` are excluded\n * from the filtered set; all other elements are included.\n *\n * @category Traversing\n * @example <caption>Selector</caption>\n *\n * ```js\n * $('li').not('.apple').length;\n * //=> 2\n * ```\n *\n * @example <caption>Function</caption>\n *\n * ```js\n * $('li').not(function (i, el) {\n *   // this === el\n *   return $(this).attr('class') === 'orange';\n * }).length; //=> 2\n * ```\n *\n * @param match - Value to look for, following the rules above.\n * @param container - Optional node to filter instead.\n * @returns The filtered collection.\n * @see {@link https://api.jquery.com/not/}\n */ function not(match) {\n    var nodes = this.toArray();\n    if (typeof match === \"string\") {\n        var matches_1 = new Set(select.filter(match, nodes, this.options));\n        nodes = nodes.filter(function(el) {\n            return !matches_1.has(el);\n        });\n    } else {\n        var filterFn_1 = getFilterFn(match);\n        nodes = nodes.filter(function(el, i) {\n            return !filterFn_1(el, i);\n        });\n    }\n    return this._make(nodes);\n}\nexports.not = not;\n/**\n * Filters the set of matched elements to only those which have the given DOM\n * element as a descendant or which have a descendant that matches the given\n * selector. Equivalent to `.filter(':has(selector)')`.\n *\n * @category Traversing\n * @example <caption>Selector</caption>\n *\n * ```js\n * $('ul').has('.pear').attr('id');\n * //=> fruits\n * ```\n *\n * @example <caption>Element</caption>\n *\n * ```js\n * $('ul').has($('.pear')[0]).attr('id');\n * //=> fruits\n * ```\n *\n * @param selectorOrHaystack - Element to look for.\n * @returns The filtered collection.\n * @see {@link https://api.jquery.com/has/}\n */ function has(selectorOrHaystack) {\n    var _this = this;\n    return this.filter(typeof selectorOrHaystack === \"string\" ? \":has(\".concat(selectorOrHaystack, \")\") : function(_, el) {\n        return _this._make(el).find(selectorOrHaystack).length > 0;\n    });\n}\nexports.has = has;\n/**\n * Will select the first element of a cheerio object.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').children().first().text();\n * //=> Apple\n * ```\n *\n * @returns The first element.\n * @see {@link https://api.jquery.com/first/}\n */ function first() {\n    return this.length > 1 ? this._make(this[0]) : this;\n}\nexports.first = first;\n/**\n * Will select the last element of a cheerio object.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').children().last().text();\n * //=> Pear\n * ```\n *\n * @returns The last element.\n * @see {@link https://api.jquery.com/last/}\n */ function last() {\n    return this.length > 0 ? this._make(this[this.length - 1]) : this;\n}\nexports.last = last;\n/**\n * Reduce the set of matched elements to the one at the specified index. Use\n * `.eq(-i)` to count backwards from the last selected element.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').eq(0).text();\n * //=> Apple\n *\n * $('li').eq(-1).text();\n * //=> Pear\n * ```\n *\n * @param i - Index of the element to select.\n * @returns The element at the `i`th position.\n * @see {@link https://api.jquery.com/eq/}\n */ function eq(i) {\n    var _a;\n    i = +i;\n    // Use the first identity optimization if possible\n    if (i === 0 && this.length <= 1) return this;\n    if (i < 0) i = this.length + i;\n    return this._make((_a = this[i]) !== null && _a !== void 0 ? _a : []);\n}\nexports.eq = eq;\nfunction get(i) {\n    if (i == null) {\n        return this.toArray();\n    }\n    return this[i < 0 ? this.length + i : i];\n}\nexports.get = get;\n/**\n * Retrieve all the DOM elements contained in the jQuery set as an array.\n *\n * @example\n *\n * ```js\n * $('li').toArray();\n * //=> [ {...}, {...}, {...} ]\n * ```\n *\n * @returns The contained items.\n */ function toArray() {\n    return Array.prototype.slice.call(this);\n}\nexports.toArray = toArray;\n/**\n * Search for a given element from among the matched elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').index();\n * //=> 2 $('.orange').index('li');\n * //=> 1\n * $('.apple').index($('#fruit, li'));\n * //=> 1\n * ```\n *\n * @param selectorOrNeedle - Element to look for.\n * @returns The index of the element.\n * @see {@link https://api.jquery.com/index/}\n */ function index(selectorOrNeedle) {\n    var $haystack;\n    var needle;\n    if (selectorOrNeedle == null) {\n        $haystack = this.parent().children();\n        needle = this[0];\n    } else if (typeof selectorOrNeedle === \"string\") {\n        $haystack = this._make(selectorOrNeedle);\n        needle = this[0];\n    } else {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        $haystack = this;\n        needle = (0, utils_js_1.isCheerio)(selectorOrNeedle) ? selectorOrNeedle[0] : selectorOrNeedle;\n    }\n    return Array.prototype.indexOf.call($haystack, needle);\n}\nexports.index = index;\n/**\n * Gets the elements matching the specified range (0-based position).\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').slice(1).eq(0).text();\n * //=> 'Orange'\n *\n * $('li').slice(1, 2).length;\n * //=> 1\n * ```\n *\n * @param start - A position at which the elements begin to be selected. If\n *   negative, it indicates an offset from the end of the set.\n * @param end - A position at which the elements stop being selected. If\n *   negative, it indicates an offset from the end of the set. If omitted, the\n *   range continues until the end of the set.\n * @returns The elements matching the specified range.\n * @see {@link https://api.jquery.com/slice/}\n */ function slice(start, end) {\n    return this._make(Array.prototype.slice.call(this, start, end));\n}\nexports.slice = slice;\n/**\n * End the most recent filtering operation in the current chain and return the\n * set of matched elements to its previous state.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').eq(0).end().length;\n * //=> 3\n * ```\n *\n * @returns The previous state of the set of matched elements.\n * @see {@link https://api.jquery.com/end/}\n */ function end() {\n    var _a;\n    return (_a = this.prevObject) !== null && _a !== void 0 ? _a : this._make([]);\n}\nexports.end = end;\n/**\n * Add elements to the set of matched elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').add('.orange').length;\n * //=> 2\n * ```\n *\n * @param other - Elements to add.\n * @param context - Optionally the context of the new selection.\n * @returns The combined set.\n * @see {@link https://api.jquery.com/add/}\n */ function add(other, context) {\n    var selection = this._make(other, context);\n    var contents = (0, domutils_1.uniqueSort)(__spreadArray(__spreadArray([], this.get(), true), selection.get(), true));\n    return this._make(contents);\n}\nexports.add = add;\n/**\n * Add the previous set of elements on the stack to the current set, optionally\n * filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').eq(0).addBack('.orange').length;\n * //=> 2\n * ```\n *\n * @param selector - Selector for the elements to add.\n * @returns The combined set.\n * @see {@link https://api.jquery.com/addBack/}\n */ function addBack(selector) {\n    return this.prevObject ? this.add(selector ? this.prevObject.filter(selector) : this.prevObject) : this;\n}\nexports.addBack = addBack; //# sourceMappingURL=traversing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/api/traversing.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/cheerio.js":
/*!*********************************************!*\
  !*** ./node_modules/cheerio/lib/cheerio.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Cheerio = void 0;\nvar Attributes = __importStar(__webpack_require__(/*! ./api/attributes.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/api/attributes.js\"));\nvar Traversing = __importStar(__webpack_require__(/*! ./api/traversing.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/api/traversing.js\"));\nvar Manipulation = __importStar(__webpack_require__(/*! ./api/manipulation.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/api/manipulation.js\"));\nvar Css = __importStar(__webpack_require__(/*! ./api/css.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/api/css.js\"));\nvar Forms = __importStar(__webpack_require__(/*! ./api/forms.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/api/forms.js\"));\nvar Cheerio = /** @class */ function() {\n    /**\n     * Instance of cheerio. Methods are specified in the modules. Usage of this\n     * constructor is not recommended. Please use `$.load` instead.\n     *\n     * @private\n     * @param elements - The new selection.\n     * @param root - Sets the root node.\n     * @param options - Options for the instance.\n     */ function Cheerio(elements, root, options) {\n        this.length = 0;\n        this.options = options;\n        this._root = root;\n        if (elements) {\n            for(var idx = 0; idx < elements.length; idx++){\n                this[idx] = elements[idx];\n            }\n            this.length = elements.length;\n        }\n    }\n    return Cheerio;\n}();\nexports.Cheerio = Cheerio;\n/** Set a signature of the object. */ Cheerio.prototype.cheerio = \"[cheerio object]\";\n/*\n * Make cheerio an array-like object\n */ Cheerio.prototype.splice = Array.prototype.splice;\n// Support for (const element of $(...)) iteration:\nCheerio.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];\n// Plug in the API\nObject.assign(Cheerio.prototype, Attributes, Traversing, Manipulation, Css, Forms); //# sourceMappingURL=cheerio.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9jaGVlcmlvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcscUJBQXFCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsa0JBQWtCLElBQU1mLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVjLENBQUM7SUFDekZoQixPQUFPYyxjQUFjLENBQUNaLEdBQUcsV0FBVztRQUFFVSxZQUFZO1FBQU1LLE9BQU9EO0lBQUU7QUFDckUsSUFBSyxTQUFTZCxDQUFDLEVBQUVjLENBQUM7SUFDZGQsQ0FBQyxDQUFDLFVBQVUsR0FBR2M7QUFDbkI7QUFDQSxJQUFJRSxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVVDLEdBQUc7SUFDM0QsSUFBSUEsT0FBT0EsSUFBSVYsVUFBVSxFQUFFLE9BQU9VO0lBQ2xDLElBQUlDLFNBQVMsQ0FBQztJQUNkLElBQUlELE9BQU8sTUFBTTtRQUFBLElBQUssSUFBSWYsS0FBS2UsSUFBSyxJQUFJZixNQUFNLGFBQWFKLE9BQU9xQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixLQUFLZixJQUFJTCxnQkFBZ0JxQixRQUFRRCxLQUFLZjtJQUFFO0lBQ3hJVyxtQkFBbUJLLFFBQVFEO0lBQzNCLE9BQU9DO0FBQ1g7QUFDQXBCLDhDQUE2QztJQUFFaUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE8sZUFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUUsYUFBYVIsYUFBYVMsbUJBQU9BLENBQUMsNkZBQXFCO0FBQzNELElBQUlDLGFBQWFWLGFBQWFTLG1CQUFPQSxDQUFDLDZGQUFxQjtBQUMzRCxJQUFJRSxlQUFlWCxhQUFhUyxtQkFBT0EsQ0FBQyxpR0FBdUI7QUFDL0QsSUFBSUcsTUFBTVosYUFBYVMsbUJBQU9BLENBQUMsK0VBQWM7QUFDN0MsSUFBSUksUUFBUWIsYUFBYVMsbUJBQU9BLENBQUMsbUZBQWdCO0FBQ2pELElBQUlGLFVBQVUsV0FBVyxHQUFJO0lBQ3pCOzs7Ozs7OztLQVFDLEdBQ0QsU0FBU0EsUUFBUU8sUUFBUSxFQUFFQyxJQUFJLEVBQUVDLE9BQU87UUFDcEMsSUFBSSxDQUFDQyxNQUFNLEdBQUc7UUFDZCxJQUFJLENBQUNELE9BQU8sR0FBR0E7UUFDZixJQUFJLENBQUNFLEtBQUssR0FBR0g7UUFDYixJQUFJRCxVQUFVO1lBQ1YsSUFBSyxJQUFJSyxNQUFNLEdBQUdBLE1BQU1MLFNBQVNHLE1BQU0sRUFBRUUsTUFBTztnQkFDNUMsSUFBSSxDQUFDQSxJQUFJLEdBQUdMLFFBQVEsQ0FBQ0ssSUFBSTtZQUM3QjtZQUNBLElBQUksQ0FBQ0YsTUFBTSxHQUFHSCxTQUFTRyxNQUFNO1FBQ2pDO0lBQ0o7SUFDQSxPQUFPVjtBQUNYO0FBQ0FELGVBQWUsR0FBR0M7QUFDbEIsbUNBQW1DLEdBQ25DQSxRQUFRSixTQUFTLENBQUNpQixPQUFPLEdBQUc7QUFDNUI7O0NBRUMsR0FDRGIsUUFBUUosU0FBUyxDQUFDa0IsTUFBTSxHQUFHQyxNQUFNbkIsU0FBUyxDQUFDa0IsTUFBTTtBQUNqRCxtREFBbUQ7QUFDbkRkLFFBQVFKLFNBQVMsQ0FBQ29CLE9BQU9DLFFBQVEsQ0FBQyxHQUFHRixNQUFNbkIsU0FBUyxDQUFDb0IsT0FBT0MsUUFBUSxDQUFDO0FBQ3JFLGtCQUFrQjtBQUNsQjFDLE9BQU8yQyxNQUFNLENBQUNsQixRQUFRSixTQUFTLEVBQUVLLFlBQVlFLFlBQVlDLGNBQWNDLEtBQUtDLFFBQzVFLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvY2hlZXJpby5qcz9mZjVlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNoZWVyaW8gPSB2b2lkIDA7XG52YXIgQXR0cmlidXRlcyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9hcGkvYXR0cmlidXRlcy5qc1wiKSk7XG52YXIgVHJhdmVyc2luZyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9hcGkvdHJhdmVyc2luZy5qc1wiKSk7XG52YXIgTWFuaXB1bGF0aW9uID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2FwaS9tYW5pcHVsYXRpb24uanNcIikpO1xudmFyIENzcyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9hcGkvY3NzLmpzXCIpKTtcbnZhciBGb3JtcyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9hcGkvZm9ybXMuanNcIikpO1xudmFyIENoZWVyaW8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2Ugb2YgY2hlZXJpby4gTWV0aG9kcyBhcmUgc3BlY2lmaWVkIGluIHRoZSBtb2R1bGVzLiBVc2FnZSBvZiB0aGlzXG4gICAgICogY29uc3RydWN0b3IgaXMgbm90IHJlY29tbWVuZGVkLiBQbGVhc2UgdXNlIGAkLmxvYWRgIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSBlbGVtZW50cyAtIFRoZSBuZXcgc2VsZWN0aW9uLlxuICAgICAqIEBwYXJhbSByb290IC0gU2V0cyB0aGUgcm9vdCBub2RlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIENoZWVyaW8oZWxlbWVudHMsIHJvb3QsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9yb290ID0gcm9vdDtcbiAgICAgICAgaWYgKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBlbGVtZW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tpZHhdID0gZWxlbWVudHNbaWR4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBDaGVlcmlvO1xufSgpKTtcbmV4cG9ydHMuQ2hlZXJpbyA9IENoZWVyaW87XG4vKiogU2V0IGEgc2lnbmF0dXJlIG9mIHRoZSBvYmplY3QuICovXG5DaGVlcmlvLnByb3RvdHlwZS5jaGVlcmlvID0gJ1tjaGVlcmlvIG9iamVjdF0nO1xuLypcbiAqIE1ha2UgY2hlZXJpbyBhbiBhcnJheS1saWtlIG9iamVjdFxuICovXG5DaGVlcmlvLnByb3RvdHlwZS5zcGxpY2UgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlO1xuLy8gU3VwcG9ydCBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgJCguLi4pKSBpdGVyYXRpb246XG5DaGVlcmlvLnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdID0gQXJyYXkucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl07XG4vLyBQbHVnIGluIHRoZSBBUElcbk9iamVjdC5hc3NpZ24oQ2hlZXJpby5wcm90b3R5cGUsIEF0dHJpYnV0ZXMsIFRyYXZlcnNpbmcsIE1hbmlwdWxhdGlvbiwgQ3NzLCBGb3Jtcyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGVlcmlvLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2NyZWF0ZUJpbmRpbmciLCJPYmplY3QiLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfX2VzTW9kdWxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJfX3NldE1vZHVsZURlZmF1bHQiLCJ2IiwidmFsdWUiLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJyZXN1bHQiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJleHBvcnRzIiwiQ2hlZXJpbyIsIkF0dHJpYnV0ZXMiLCJyZXF1aXJlIiwiVHJhdmVyc2luZyIsIk1hbmlwdWxhdGlvbiIsIkNzcyIsIkZvcm1zIiwiZWxlbWVudHMiLCJyb290Iiwib3B0aW9ucyIsImxlbmd0aCIsIl9yb290IiwiaWR4IiwiY2hlZXJpbyIsInNwbGljZSIsIkFycmF5IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/cheerio.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/index.js":
/*!*******************************************!*\
  !*** ./node_modules/cheerio/lib/index.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.root = exports.parseHTML = exports.merge = exports.contains = exports.text = exports.xml = exports.html = exports.load = void 0;\n/**\n * Types used in signatures of Cheerio methods.\n *\n * @category Cheerio\n */ __exportStar(__webpack_require__(/*! ./types.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/types.js\"), exports);\nvar load_js_1 = __webpack_require__(/*! ./load.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/load.js\");\nvar parse_js_1 = __webpack_require__(/*! ./parse.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/parse.js\");\nvar parse5_adapter_js_1 = __webpack_require__(/*! ./parsers/parse5-adapter.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/parsers/parse5-adapter.js\");\nvar dom_serializer_1 = __importDefault(__webpack_require__(/*! dom-serializer */ \"(app-pages-browser)/./node_modules/dom-serializer/lib/index.js\"));\nvar htmlparser2_1 = __webpack_require__(/*! htmlparser2 */ \"(app-pages-browser)/./node_modules/htmlparser2/lib/index.js\");\nvar parse = (0, parse_js_1.getParse)(function(content, options, isDocument, context) {\n    return options.xmlMode || options._useHtmlParser2 ? (0, htmlparser2_1.parseDocument)(content, options) : (0, parse5_adapter_js_1.parseWithParse5)(content, options, isDocument, context);\n});\n// Duplicate docs due to https://github.com/TypeStrong/typedoc/issues/1616\n/**\n * Create a querying function, bound to a document created from the provided markup.\n *\n * Note that similar to web browser contexts, this operation may introduce\n * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n * switch to fragment mode and disable this.\n *\n * @param content - Markup to be loaded.\n * @param options - Options for the created instance.\n * @param isDocument - Allows parser to be switched to fragment mode.\n * @returns The loaded document.\n * @see {@link https://cheerio.js.org#loading} for additional usage information.\n */ exports.load = (0, load_js_1.getLoad)(parse, function(dom, options) {\n    return options.xmlMode || options._useHtmlParser2 ? (0, dom_serializer_1.default)(dom, options) : (0, parse5_adapter_js_1.renderWithParse5)(dom);\n});\n/**\n * The default cheerio instance.\n *\n * @deprecated Use the function returned by `load` instead.\n */ exports[\"default\"] = (0, exports.load)([]);\nvar static_js_1 = __webpack_require__(/*! ./static.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/static.js\");\nObject.defineProperty(exports, \"html\", ({\n    enumerable: true,\n    get: function() {\n        return static_js_1.html;\n    }\n}));\nObject.defineProperty(exports, \"xml\", ({\n    enumerable: true,\n    get: function() {\n        return static_js_1.xml;\n    }\n}));\nObject.defineProperty(exports, \"text\", ({\n    enumerable: true,\n    get: function() {\n        return static_js_1.text;\n    }\n}));\nvar staticMethods = __importStar(__webpack_require__(/*! ./static.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/static.js\"));\n/**\n * In order to promote consistency with the jQuery library, users are encouraged\n * to instead use the static method of the same name.\n *\n * @deprecated\n * @example\n *\n * ```js\n * const $ = cheerio.load('<div><p></p></div>');\n *\n * $.contains($('div').get(0), $('p').get(0));\n * //=> true\n *\n * $.contains($('p').get(0), $('div').get(0));\n * //=> false\n * ```\n *\n * @returns {boolean}\n */ exports.contains = staticMethods.contains;\n/**\n * In order to promote consistency with the jQuery library, users are encouraged\n * to instead use the static method of the same name.\n *\n * @deprecated\n * @example\n *\n * ```js\n * const $ = cheerio.load('');\n *\n * $.merge([1, 2], [3, 4]);\n * //=> [1, 2, 3, 4]\n * ```\n */ exports.merge = staticMethods.merge;\n/**\n * In order to promote consistency with the jQuery library, users are encouraged\n * to instead use the static method of the same name as it is defined on the\n * \"loaded\" Cheerio factory function.\n *\n * @deprecated See {@link static/parseHTML}.\n * @example\n *\n * ```js\n * const $ = cheerio.load('');\n * $.parseHTML('<b>markup</b>');\n * ```\n */ exports.parseHTML = staticMethods.parseHTML;\n/**\n * Users seeking to access the top-level element of a parsed document should\n * instead use the `root` static method of a \"loaded\" Cheerio function.\n *\n * @deprecated\n * @example\n *\n * ```js\n * const $ = cheerio.load('');\n * $.root();\n * ```\n */ exports.root = staticMethods.root; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/load.js":
/*!******************************************!*\
  !*** ./node_modules/cheerio/lib/load.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getLoad = void 0;\nvar options_js_1 = __importStar(__webpack_require__(/*! ./options.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/options.js\"));\nvar staticMethods = __importStar(__webpack_require__(/*! ./static.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/static.js\"));\nvar cheerio_js_1 = __webpack_require__(/*! ./cheerio.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/cheerio.js\");\nvar utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/utils.js\");\nfunction getLoad(parse, render) {\n    /**\n     * Create a querying function, bound to a document created from the provided markup.\n     *\n     * Note that similar to web browser contexts, this operation may introduce\n     * `<html>`, `<head>`, and `<body>` elements; set `isDocument` to `false` to\n     * switch to fragment mode and disable this.\n     *\n     * @param content - Markup to be loaded.\n     * @param options - Options for the created instance.\n     * @param isDocument - Allows parser to be switched to fragment mode.\n     * @returns The loaded document.\n     * @see {@link https://cheerio.js.org#loading} for additional usage information.\n     */ return function load(content, options, isDocument) {\n        if (isDocument === void 0) {\n            isDocument = true;\n        }\n        if (content == null) {\n            throw new Error(\"cheerio.load() expects a string\");\n        }\n        var internalOpts = __assign(__assign({}, options_js_1.default), (0, options_js_1.flatten)(options));\n        var initialRoot = parse(content, internalOpts, isDocument, null);\n        /** Create an extended class here, so that extensions only live on one instance. */ var LoadedCheerio = /** @class */ function(_super) {\n            __extends(LoadedCheerio, _super);\n            function LoadedCheerio() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            LoadedCheerio.prototype._make = function(selector, context) {\n                var cheerio = initialize(selector, context);\n                cheerio.prevObject = this;\n                return cheerio;\n            };\n            LoadedCheerio.prototype._parse = function(content, options, isDocument, context) {\n                return parse(content, options, isDocument, context);\n            };\n            LoadedCheerio.prototype._render = function(dom) {\n                return render(dom, this.options);\n            };\n            return LoadedCheerio;\n        }(cheerio_js_1.Cheerio);\n        function initialize(selector, context, root, opts) {\n            if (root === void 0) {\n                root = initialRoot;\n            }\n            // $($)\n            if (selector && (0, utils_js_1.isCheerio)(selector)) return selector;\n            var options = __assign(__assign({}, internalOpts), (0, options_js_1.flatten)(opts));\n            var r = typeof root === \"string\" ? [\n                parse(root, options, false, null)\n            ] : \"length\" in root ? root : [\n                root\n            ];\n            var rootInstance = (0, utils_js_1.isCheerio)(r) ? r : new LoadedCheerio(r, null, options);\n            // Add a cyclic reference, so that calling methods on `_root` never fails.\n            rootInstance._root = rootInstance;\n            // $(), $(null), $(undefined), $(false)\n            if (!selector) {\n                return new LoadedCheerio(undefined, rootInstance, options);\n            }\n            var elements = typeof selector === \"string\" && (0, utils_js_1.isHtml)(selector) ? parse(selector, options, false, null).children : isNode(selector) ? [\n                selector\n            ] : Array.isArray(selector) ? selector : undefined;\n            var instance = new LoadedCheerio(elements, rootInstance, options);\n            if (elements) {\n                return instance;\n            }\n            if (typeof selector !== \"string\") {\n                throw new Error(\"Unexpected type of selector\");\n            }\n            // We know that our selector is a string now.\n            var search = selector;\n            var searchContext = !context ? rootInstance : typeof context === \"string\" ? (0, utils_js_1.isHtml)(context) ? new LoadedCheerio([\n                parse(context, options, false, null)\n            ], rootInstance, options) : (search = \"\".concat(context, \" \").concat(search), rootInstance) : (0, utils_js_1.isCheerio)(context) ? context : new LoadedCheerio(Array.isArray(context) ? context : [\n                context\n            ], rootInstance, options);\n            // If we still don't have a context, return\n            if (!searchContext) return instance;\n            /*\n             * #id, .class, tag\n             */ return searchContext.find(search);\n        }\n        // Add in static methods & properties\n        Object.assign(initialize, staticMethods, {\n            load: load,\n            // `_root` and `_options` are used in static methods.\n            _root: initialRoot,\n            _options: internalOpts,\n            // Add `fn` for plugins\n            fn: LoadedCheerio.prototype,\n            // Add the prototype here to maintain `instanceof` behavior.\n            prototype: LoadedCheerio.prototype\n        });\n        return initialize;\n    };\n}\nexports.getLoad = getLoad;\nfunction isNode(obj) {\n    return !!obj.name || obj.type === \"root\" || obj.type === \"text\" || obj.type === \"comment\";\n} //# sourceMappingURL=load.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/load.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/options.js":
/*!*********************************************!*\
  !*** ./node_modules/cheerio/lib/options.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.flatten = void 0;\nvar defaultOpts = {\n    xml: false,\n    decodeEntities: true\n};\n/** Cheerio default options. */ exports[\"default\"] = defaultOpts;\nvar xmlModeDefault = {\n    _useHtmlParser2: true,\n    xmlMode: true\n};\n/**\n * Flatten the options for Cheerio.\n *\n * This will set `_useHtmlParser2` to true if `xml` is set to true.\n *\n * @param options - The options to flatten.\n * @returns The flattened options.\n */ function flatten(options) {\n    return (options === null || options === void 0 ? void 0 : options.xml) ? typeof options.xml === \"boolean\" ? xmlModeDefault : __assign(__assign({}, xmlModeDefault), options.xml) : options !== null && options !== void 0 ? options : undefined;\n}\nexports.flatten = flatten; //# sourceMappingURL=options.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9vcHRpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsV0FBVyxDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLFFBQVEsSUFBSztJQUN0Q0EsV0FBV0MsT0FBT0MsTUFBTSxJQUFJLFNBQVNDLENBQUM7UUFDbEMsSUFBSyxJQUFJQyxHQUFHQyxJQUFJLEdBQUdDLElBQUlDLFVBQVVDLE1BQU0sRUFBRUgsSUFBSUMsR0FBR0QsSUFBSztZQUNqREQsSUFBSUcsU0FBUyxDQUFDRixFQUFFO1lBQ2hCLElBQUssSUFBSUksS0FBS0wsRUFBRyxJQUFJSCxPQUFPUyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUixHQUFHSyxJQUN6RE4sQ0FBQyxDQUFDTSxFQUFFLEdBQUdMLENBQUMsQ0FBQ0ssRUFBRTtRQUNuQjtRQUNBLE9BQU9OO0lBQ1g7SUFDQSxPQUFPSCxTQUFTYSxLQUFLLENBQUMsSUFBSSxFQUFFTjtBQUNoQztBQUNBTiw4Q0FBNkM7SUFBRWUsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUcsY0FBYztJQUNkQyxLQUFLO0lBQ0xDLGdCQUFnQjtBQUNwQjtBQUNBLDZCQUE2QixHQUM3Qkwsa0JBQWUsR0FBR0c7QUFDbEIsSUFBSUksaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFDakJDLFNBQVM7QUFDYjtBQUNBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTUCxRQUFRUSxPQUFPO0lBQ3BCLE9BQU8sQ0FBQ0EsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUlBLFFBQVFOLEdBQUcsSUFDL0QsT0FBT00sUUFBUU4sR0FBRyxLQUFLLFlBQ25CRyxpQkFDQXRCLFNBQVNBLFNBQVMsQ0FBQyxHQUFHc0IsaUJBQWlCRyxRQUFRTixHQUFHLElBQ3RETSxZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJQSxVQUFVQztBQUM3RDtBQUNBWCxlQUFlLEdBQUdFLFNBQ2xCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvb3B0aW9ucy5qcz82MGZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmxhdHRlbiA9IHZvaWQgMDtcbnZhciBkZWZhdWx0T3B0cyA9IHtcbiAgICB4bWw6IGZhbHNlLFxuICAgIGRlY29kZUVudGl0aWVzOiB0cnVlLFxufTtcbi8qKiBDaGVlcmlvIGRlZmF1bHQgb3B0aW9ucy4gKi9cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZmF1bHRPcHRzO1xudmFyIHhtbE1vZGVEZWZhdWx0ID0ge1xuICAgIF91c2VIdG1sUGFyc2VyMjogdHJ1ZSxcbiAgICB4bWxNb2RlOiB0cnVlLFxufTtcbi8qKlxuICogRmxhdHRlbiB0aGUgb3B0aW9ucyBmb3IgQ2hlZXJpby5cbiAqXG4gKiBUaGlzIHdpbGwgc2V0IGBfdXNlSHRtbFBhcnNlcjJgIHRvIHRydWUgaWYgYHhtbGAgaXMgc2V0IHRvIHRydWUuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byBmbGF0dGVuLlxuICogQHJldHVybnMgVGhlIGZsYXR0ZW5lZCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy54bWwpXG4gICAgICAgID8gdHlwZW9mIG9wdGlvbnMueG1sID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgID8geG1sTW9kZURlZmF1bHRcbiAgICAgICAgICAgIDogX19hc3NpZ24oX19hc3NpZ24oe30sIHhtbE1vZGVEZWZhdWx0KSwgb3B0aW9ucy54bWwpXG4gICAgICAgIDogb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5mbGF0dGVuID0gZmxhdHRlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbIl9fYXNzaWduIiwiT2JqZWN0IiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZmxhdHRlbiIsImRlZmF1bHRPcHRzIiwieG1sIiwiZGVjb2RlRW50aXRpZXMiLCJkZWZhdWx0IiwieG1sTW9kZURlZmF1bHQiLCJfdXNlSHRtbFBhcnNlcjIiLCJ4bWxNb2RlIiwib3B0aW9ucyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/options.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/parse.js":
/*!*******************************************!*\
  !*** ./node_modules/cheerio/lib/parse.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.update = exports.getParse = void 0;\nvar domutils_1 = __webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\");\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\n/**\n * Get the parse function with options.\n *\n * @param parser - The parser function.\n * @returns The parse function with options.\n */ function getParse(parser) {\n    /**\n     * Parse a HTML string or a node.\n     *\n     * @param content - The HTML string or node.\n     * @param options - The parser options.\n     * @param isDocument - If `content` is a document.\n     * @param context - The context node in the DOM tree.\n     * @returns The parsed document node.\n     */ return function parse(content, options, isDocument, context) {\n        if (typeof Buffer !== \"undefined\" && Buffer.isBuffer(content)) {\n            content = content.toString();\n        }\n        if (typeof content === \"string\") {\n            return parser(content, options, isDocument, context);\n        }\n        var doc = content;\n        if (!Array.isArray(doc) && (0, domhandler_1.isDocument)(doc)) {\n            // If `doc` is already a root, just return it\n            return doc;\n        }\n        // Add conent to new root element\n        var root = new domhandler_1.Document([]);\n        // Update the DOM using the root\n        update(doc, root);\n        return root;\n    };\n}\nexports.getParse = getParse;\n/**\n * Update the dom structure, for one changed layer.\n *\n * @param newChilds - The new children.\n * @param parent - The new parent.\n * @returns The parent node.\n */ function update(newChilds, parent) {\n    // Normalize\n    var arr = Array.isArray(newChilds) ? newChilds : [\n        newChilds\n    ];\n    // Update parent\n    if (parent) {\n        parent.children = arr;\n    } else {\n        parent = null;\n    }\n    // Update neighbors\n    for(var i = 0; i < arr.length; i++){\n        var node = arr[i];\n        // Cleanly remove existing nodes from their previous structures.\n        if (node.parent && node.parent.children !== arr) {\n            (0, domutils_1.removeElement)(node);\n        }\n        if (parent) {\n            node.prev = arr[i - 1] || null;\n            node.next = arr[i + 1] || null;\n        } else {\n            node.prev = node.next = null;\n        }\n        node.parent = parent;\n    }\n    return parent;\n}\nexports.update = update; //# sourceMappingURL=parse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9wYXJzZS5qcyIsIm1hcHBpbmdzIjoiO0FBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGNBQWMsR0FBR0EsZ0JBQWdCLEdBQUcsS0FBSztBQUN6QyxJQUFJSSxhQUFhQyxtQkFBT0EsQ0FBQywwRUFBVTtBQUNuQyxJQUFJQyxlQUFlRCxtQkFBT0EsQ0FBQyw4RUFBWTtBQUN2Qzs7Ozs7Q0FLQyxHQUNELFNBQVNGLFNBQVNJLE1BQU07SUFDcEI7Ozs7Ozs7O0tBUUMsR0FDRCxPQUFPLFNBQVNDLE1BQU1DLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxVQUFVLEVBQUVDLE9BQU87UUFDdkQsSUFBSSxPQUFPQyxNQUFNQSxLQUFLLGVBQWVBLE1BQU1BLENBQUNDLFFBQVEsQ0FBQ0wsVUFBVTtZQUMzREEsVUFBVUEsUUFBUU0sUUFBUTtRQUM5QjtRQUNBLElBQUksT0FBT04sWUFBWSxVQUFVO1lBQzdCLE9BQU9GLE9BQU9FLFNBQVNDLFNBQVNDLFlBQVlDO1FBQ2hEO1FBQ0EsSUFBSUksTUFBTVA7UUFDVixJQUFJLENBQUNRLE1BQU1DLE9BQU8sQ0FBQ0YsUUFBUSxDQUFDLEdBQUdWLGFBQWFLLFVBQVUsRUFBRUssTUFBTTtZQUMxRCw2Q0FBNkM7WUFDN0MsT0FBT0E7UUFDWDtRQUNBLGlDQUFpQztRQUNqQyxJQUFJRyxPQUFPLElBQUliLGFBQWFjLFFBQVEsQ0FBQyxFQUFFO1FBQ3ZDLGdDQUFnQztRQUNoQ2xCLE9BQU9jLEtBQUtHO1FBQ1osT0FBT0E7SUFDWDtBQUNKO0FBQ0FuQixnQkFBZ0IsR0FBR0c7QUFDbkI7Ozs7OztDQU1DLEdBQ0QsU0FBU0QsT0FBT21CLFNBQVMsRUFBRUMsTUFBTTtJQUM3QixZQUFZO0lBQ1osSUFBSUMsTUFBTU4sTUFBTUMsT0FBTyxDQUFDRyxhQUFhQSxZQUFZO1FBQUNBO0tBQVU7SUFDNUQsZ0JBQWdCO0lBQ2hCLElBQUlDLFFBQVE7UUFDUkEsT0FBT0UsUUFBUSxHQUFHRDtJQUN0QixPQUNLO1FBQ0RELFNBQVM7SUFDYjtJQUNBLG1CQUFtQjtJQUNuQixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUYsSUFBSUcsTUFBTSxFQUFFRCxJQUFLO1FBQ2pDLElBQUlFLE9BQU9KLEdBQUcsQ0FBQ0UsRUFBRTtRQUNqQixnRUFBZ0U7UUFDaEUsSUFBSUUsS0FBS0wsTUFBTSxJQUFJSyxLQUFLTCxNQUFNLENBQUNFLFFBQVEsS0FBS0QsS0FBSztZQUM1QyxJQUFHbkIsV0FBV3dCLGFBQWEsRUFBRUQ7UUFDbEM7UUFDQSxJQUFJTCxRQUFRO1lBQ1JLLEtBQUtFLElBQUksR0FBR04sR0FBRyxDQUFDRSxJQUFJLEVBQUUsSUFBSTtZQUMxQkUsS0FBS0csSUFBSSxHQUFHUCxHQUFHLENBQUNFLElBQUksRUFBRSxJQUFJO1FBQzlCLE9BQ0s7WUFDREUsS0FBS0UsSUFBSSxHQUFHRixLQUFLRyxJQUFJLEdBQUc7UUFDNUI7UUFDQUgsS0FBS0wsTUFBTSxHQUFHQTtJQUNsQjtJQUNBLE9BQU9BO0FBQ1g7QUFDQXRCLGNBQWMsR0FBR0UsUUFDakIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9wYXJzZS5qcz9kNjg4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51cGRhdGUgPSBleHBvcnRzLmdldFBhcnNlID0gdm9pZCAwO1xudmFyIGRvbXV0aWxzXzEgPSByZXF1aXJlKFwiZG9tdXRpbHNcIik7XG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG4vKipcbiAqIEdldCB0aGUgcGFyc2UgZnVuY3Rpb24gd2l0aCBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSBwYXJzZXIgLSBUaGUgcGFyc2VyIGZ1bmN0aW9uLlxuICogQHJldHVybnMgVGhlIHBhcnNlIGZ1bmN0aW9uIHdpdGggb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZ2V0UGFyc2UocGFyc2VyKSB7XG4gICAgLyoqXG4gICAgICogUGFyc2UgYSBIVE1MIHN0cmluZyBvciBhIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29udGVudCAtIFRoZSBIVE1MIHN0cmluZyBvciBub2RlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIHBhcnNlciBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBpc0RvY3VtZW50IC0gSWYgYGNvbnRlbnRgIGlzIGEgZG9jdW1lbnQuXG4gICAgICogQHBhcmFtIGNvbnRleHQgLSBUaGUgY29udGV4dCBub2RlIGluIHRoZSBET00gdHJlZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgcGFyc2VkIGRvY3VtZW50IG5vZGUuXG4gICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBhcnNlKGNvbnRlbnQsIG9wdGlvbnMsIGlzRG9jdW1lbnQsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIEJ1ZmZlci5pc0J1ZmZlcihjb250ZW50KSkge1xuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VyKGNvbnRlbnQsIG9wdGlvbnMsIGlzRG9jdW1lbnQsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkb2MgPSBjb250ZW50O1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZG9jKSAmJiAoMCwgZG9taGFuZGxlcl8xLmlzRG9jdW1lbnQpKGRvYykpIHtcbiAgICAgICAgICAgIC8vIElmIGBkb2NgIGlzIGFscmVhZHkgYSByb290LCBqdXN0IHJldHVybiBpdFxuICAgICAgICAgICAgcmV0dXJuIGRvYztcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgY29uZW50IHRvIG5ldyByb290IGVsZW1lbnRcbiAgICAgICAgdmFyIHJvb3QgPSBuZXcgZG9taGFuZGxlcl8xLkRvY3VtZW50KFtdKTtcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBET00gdXNpbmcgdGhlIHJvb3RcbiAgICAgICAgdXBkYXRlKGRvYywgcm9vdCk7XG4gICAgICAgIHJldHVybiByb290O1xuICAgIH07XG59XG5leHBvcnRzLmdldFBhcnNlID0gZ2V0UGFyc2U7XG4vKipcbiAqIFVwZGF0ZSB0aGUgZG9tIHN0cnVjdHVyZSwgZm9yIG9uZSBjaGFuZ2VkIGxheWVyLlxuICpcbiAqIEBwYXJhbSBuZXdDaGlsZHMgLSBUaGUgbmV3IGNoaWxkcmVuLlxuICogQHBhcmFtIHBhcmVudCAtIFRoZSBuZXcgcGFyZW50LlxuICogQHJldHVybnMgVGhlIHBhcmVudCBub2RlLlxuICovXG5mdW5jdGlvbiB1cGRhdGUobmV3Q2hpbGRzLCBwYXJlbnQpIHtcbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgYXJyID0gQXJyYXkuaXNBcnJheShuZXdDaGlsZHMpID8gbmV3Q2hpbGRzIDogW25ld0NoaWxkc107XG4gICAgLy8gVXBkYXRlIHBhcmVudFxuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuID0gYXJyO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgLy8gVXBkYXRlIG5laWdoYm9yc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gYXJyW2ldO1xuICAgICAgICAvLyBDbGVhbmx5IHJlbW92ZSBleGlzdGluZyBub2RlcyBmcm9tIHRoZWlyIHByZXZpb3VzIHN0cnVjdHVyZXMuXG4gICAgICAgIGlmIChub2RlLnBhcmVudCAmJiBub2RlLnBhcmVudC5jaGlsZHJlbiAhPT0gYXJyKSB7XG4gICAgICAgICAgICAoMCwgZG9tdXRpbHNfMS5yZW1vdmVFbGVtZW50KShub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICBub2RlLnByZXYgPSBhcnJbaSAtIDFdIHx8IG51bGw7XG4gICAgICAgICAgICBub2RlLm5leHQgPSBhcnJbaSArIDFdIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLnByZXYgPSBub2RlLm5leHQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50O1xufVxuZXhwb3J0cy51cGRhdGUgPSB1cGRhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1cGRhdGUiLCJnZXRQYXJzZSIsImRvbXV0aWxzXzEiLCJyZXF1aXJlIiwiZG9taGFuZGxlcl8xIiwicGFyc2VyIiwicGFyc2UiLCJjb250ZW50Iiwib3B0aW9ucyIsImlzRG9jdW1lbnQiLCJjb250ZXh0IiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsImRvYyIsIkFycmF5IiwiaXNBcnJheSIsInJvb3QiLCJEb2N1bWVudCIsIm5ld0NoaWxkcyIsInBhcmVudCIsImFyciIsImNoaWxkcmVuIiwiaSIsImxlbmd0aCIsIm5vZGUiLCJyZW1vdmVFbGVtZW50IiwicHJldiIsIm5leHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/parse.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/parsers/parse5-adapter.js":
/*!************************************************************!*\
  !*** ./node_modules/cheerio/lib/parsers/parse5-adapter.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.renderWithParse5 = exports.parseWithParse5 = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nvar parse5_1 = __webpack_require__(/*! parse5 */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/index.js\");\nvar parse5_htmlparser2_tree_adapter_1 = __webpack_require__(/*! parse5-htmlparser2-tree-adapter */ \"(app-pages-browser)/./node_modules/parse5-htmlparser2-tree-adapter/dist/cjs/index.js\");\n/**\n * Parse the content with `parse5` in the context of the given `ParentNode`.\n *\n * @param content - The content to parse.\n * @param options - A set of options to use to parse.\n * @param isDocument - Whether to parse the content as a full HTML document.\n * @param context - The context in which to parse the content.\n * @returns The parsed content.\n */ function parseWithParse5(content, options, isDocument, context) {\n    var opts = {\n        scriptingEnabled: typeof options.scriptingEnabled === \"boolean\" ? options.scriptingEnabled : true,\n        treeAdapter: parse5_htmlparser2_tree_adapter_1.adapter,\n        sourceCodeLocationInfo: options.sourceCodeLocationInfo\n    };\n    return isDocument ? (0, parse5_1.parse)(content, opts) : (0, parse5_1.parseFragment)(context, content, opts);\n}\nexports.parseWithParse5 = parseWithParse5;\nvar renderOpts = {\n    treeAdapter: parse5_htmlparser2_tree_adapter_1.adapter\n};\n/**\n * Renders the given DOM tree with `parse5` and returns the result as a string.\n *\n * @param dom - The DOM tree to render.\n * @returns The rendered document.\n */ function renderWithParse5(dom) {\n    var _a;\n    /*\n     * `dom-serializer` passes over the special \"root\" node and renders the\n     * node's children in its place. To mimic this behavior with `parse5`, an\n     * equivalent operation must be applied to the input array.\n     */ var nodes = \"length\" in dom ? dom : [\n        dom\n    ];\n    for(var index = 0; index < nodes.length; index += 1){\n        var node = nodes[index];\n        if ((0, domhandler_1.isDocument)(node)) {\n            (_a = Array.prototype.splice).call.apply(_a, __spreadArray([\n                nodes,\n                index,\n                1\n            ], node.children, false));\n        }\n    }\n    var result = \"\";\n    for(var index = 0; index < nodes.length; index += 1){\n        var node = nodes[index];\n        result += (0, parse5_1.serializeOuter)(node, renderOpts);\n    }\n    return result;\n}\nexports.renderWithParse5 = renderWithParse5; //# sourceMappingURL=parse5-adapter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9wYXJzZXJzL3BhcnNlNS1hZGFwdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsZ0JBQWdCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsYUFBYSxJQUFLLFNBQVVDLEVBQUUsRUFBRUMsSUFBSSxFQUFFQyxJQUFJO0lBQ3hFLElBQUlBLFFBQVFDLFVBQVVDLE1BQU0sS0FBSyxHQUFHLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJTCxLQUFLRyxNQUFNLEVBQUVHLElBQUlGLElBQUlDLEdBQUdELElBQUs7UUFDakYsSUFBSUUsTUFBTSxDQUFFRixDQUFBQSxLQUFLSixJQUFHLEdBQUk7WUFDcEIsSUFBSSxDQUFDTSxJQUFJQSxLQUFLQyxNQUFNQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDVixNQUFNLEdBQUdJO1lBQ2xERSxFQUFFLENBQUNGLEVBQUUsR0FBR0osSUFBSSxDQUFDSSxFQUFFO1FBQ25CO0lBQ0o7SUFDQSxPQUFPTCxHQUFHWSxNQUFNLENBQUNMLE1BQU1DLE1BQU1DLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNWO0FBQ3REO0FBQ0FZLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBR0EsdUJBQXVCLEdBQUcsS0FBSztBQUMxRCxJQUFJSSxlQUFlQyxtQkFBT0EsQ0FBQyw4RUFBWTtBQUN2QyxJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQywyRUFBUTtBQUMvQixJQUFJRSxvQ0FBb0NGLG1CQUFPQSxDQUFDLDZIQUFpQztBQUNqRjs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNGLGdCQUFnQkssT0FBTyxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsT0FBTztJQUMxRCxJQUFJQyxPQUFPO1FBQ1BDLGtCQUFrQixPQUFPSixRQUFRSSxnQkFBZ0IsS0FBSyxZQUNoREosUUFBUUksZ0JBQWdCLEdBQ3hCO1FBQ05DLGFBQWFQLGtDQUFrQ1EsT0FBTztRQUN0REMsd0JBQXdCUCxRQUFRTyxzQkFBc0I7SUFDMUQ7SUFDQSxPQUFPTixhQUNELENBQUMsR0FBR0osU0FBU1csS0FBSyxFQUFFVCxTQUFTSSxRQUM3QixDQUFDLEdBQUdOLFNBQVNZLGFBQWEsRUFBRVAsU0FBU0gsU0FBU0k7QUFDeEQ7QUFDQVosdUJBQXVCLEdBQUdHO0FBQzFCLElBQUlnQixhQUFhO0lBQUVMLGFBQWFQLGtDQUFrQ1EsT0FBTztBQUFDO0FBQzFFOzs7OztDQUtDLEdBQ0QsU0FBU2IsaUJBQWlCa0IsR0FBRztJQUN6QixJQUFJQztJQUNKOzs7O0tBSUMsR0FDRCxJQUFJQyxRQUFRLFlBQVlGLE1BQU1BLE1BQU07UUFBQ0E7S0FBSTtJQUN6QyxJQUFLLElBQUlHLFFBQVEsR0FBR0EsUUFBUUQsTUFBTWpDLE1BQU0sRUFBRWtDLFNBQVMsRUFBRztRQUNsRCxJQUFJQyxPQUFPRixLQUFLLENBQUNDLE1BQU07UUFDdkIsSUFBSSxDQUFDLEdBQUduQixhQUFhTSxVQUFVLEVBQUVjLE9BQU87WUFDbkNILENBQUFBLEtBQUs1QixNQUFNQyxTQUFTLENBQUMrQixNQUFNLEVBQUU3QixJQUFJLENBQUM4QixLQUFLLENBQUNMLElBQUlyQyxjQUFjO2dCQUFDc0M7Z0JBQU9DO2dCQUFPO2FBQUUsRUFBRUMsS0FBS0csUUFBUSxFQUFFO1FBQ2pHO0lBQ0o7SUFDQSxJQUFJQyxTQUFTO0lBQ2IsSUFBSyxJQUFJTCxRQUFRLEdBQUdBLFFBQVFELE1BQU1qQyxNQUFNLEVBQUVrQyxTQUFTLEVBQUc7UUFDbEQsSUFBSUMsT0FBT0YsS0FBSyxDQUFDQyxNQUFNO1FBQ3ZCSyxVQUFVLENBQUMsR0FBR3RCLFNBQVN1QixjQUFjLEVBQUVMLE1BQU1MO0lBQ2pEO0lBQ0EsT0FBT1M7QUFDWDtBQUNBNUIsd0JBQXdCLEdBQUdFLGtCQUMzQiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NoZWVyaW8vbGliL3BhcnNlcnMvcGFyc2U1LWFkYXB0ZXIuanM/MWZiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVuZGVyV2l0aFBhcnNlNSA9IGV4cG9ydHMucGFyc2VXaXRoUGFyc2U1ID0gdm9pZCAwO1xudmFyIGRvbWhhbmRsZXJfMSA9IHJlcXVpcmUoXCJkb21oYW5kbGVyXCIpO1xudmFyIHBhcnNlNV8xID0gcmVxdWlyZShcInBhcnNlNVwiKTtcbnZhciBwYXJzZTVfaHRtbHBhcnNlcjJfdHJlZV9hZGFwdGVyXzEgPSByZXF1aXJlKFwicGFyc2U1LWh0bWxwYXJzZXIyLXRyZWUtYWRhcHRlclwiKTtcbi8qKlxuICogUGFyc2UgdGhlIGNvbnRlbnQgd2l0aCBgcGFyc2U1YCBpbiB0aGUgY29udGV4dCBvZiB0aGUgZ2l2ZW4gYFBhcmVudE5vZGVgLlxuICpcbiAqIEBwYXJhbSBjb250ZW50IC0gVGhlIGNvbnRlbnQgdG8gcGFyc2UuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEEgc2V0IG9mIG9wdGlvbnMgdG8gdXNlIHRvIHBhcnNlLlxuICogQHBhcmFtIGlzRG9jdW1lbnQgLSBXaGV0aGVyIHRvIHBhcnNlIHRoZSBjb250ZW50IGFzIGEgZnVsbCBIVE1MIGRvY3VtZW50LlxuICogQHBhcmFtIGNvbnRleHQgLSBUaGUgY29udGV4dCBpbiB3aGljaCB0byBwYXJzZSB0aGUgY29udGVudC5cbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgY29udGVudC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VXaXRoUGFyc2U1KGNvbnRlbnQsIG9wdGlvbnMsIGlzRG9jdW1lbnQsIGNvbnRleHQpIHtcbiAgICB2YXIgb3B0cyA9IHtcbiAgICAgICAgc2NyaXB0aW5nRW5hYmxlZDogdHlwZW9mIG9wdGlvbnMuc2NyaXB0aW5nRW5hYmxlZCA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICA/IG9wdGlvbnMuc2NyaXB0aW5nRW5hYmxlZFxuICAgICAgICAgICAgOiB0cnVlLFxuICAgICAgICB0cmVlQWRhcHRlcjogcGFyc2U1X2h0bWxwYXJzZXIyX3RyZWVfYWRhcHRlcl8xLmFkYXB0ZXIsXG4gICAgICAgIHNvdXJjZUNvZGVMb2NhdGlvbkluZm86IG9wdGlvbnMuc291cmNlQ29kZUxvY2F0aW9uSW5mbyxcbiAgICB9O1xuICAgIHJldHVybiBpc0RvY3VtZW50XG4gICAgICAgID8gKDAsIHBhcnNlNV8xLnBhcnNlKShjb250ZW50LCBvcHRzKVxuICAgICAgICA6ICgwLCBwYXJzZTVfMS5wYXJzZUZyYWdtZW50KShjb250ZXh0LCBjb250ZW50LCBvcHRzKTtcbn1cbmV4cG9ydHMucGFyc2VXaXRoUGFyc2U1ID0gcGFyc2VXaXRoUGFyc2U1O1xudmFyIHJlbmRlck9wdHMgPSB7IHRyZWVBZGFwdGVyOiBwYXJzZTVfaHRtbHBhcnNlcjJfdHJlZV9hZGFwdGVyXzEuYWRhcHRlciB9O1xuLyoqXG4gKiBSZW5kZXJzIHRoZSBnaXZlbiBET00gdHJlZSB3aXRoIGBwYXJzZTVgIGFuZCByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIGRvbSAtIFRoZSBET00gdHJlZSB0byByZW5kZXIuXG4gKiBAcmV0dXJucyBUaGUgcmVuZGVyZWQgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcldpdGhQYXJzZTUoZG9tKSB7XG4gICAgdmFyIF9hO1xuICAgIC8qXG4gICAgICogYGRvbS1zZXJpYWxpemVyYCBwYXNzZXMgb3ZlciB0aGUgc3BlY2lhbCBcInJvb3RcIiBub2RlIGFuZCByZW5kZXJzIHRoZVxuICAgICAqIG5vZGUncyBjaGlsZHJlbiBpbiBpdHMgcGxhY2UuIFRvIG1pbWljIHRoaXMgYmVoYXZpb3Igd2l0aCBgcGFyc2U1YCwgYW5cbiAgICAgKiBlcXVpdmFsZW50IG9wZXJhdGlvbiBtdXN0IGJlIGFwcGxpZWQgdG8gdGhlIGlucHV0IGFycmF5LlxuICAgICAqL1xuICAgIHZhciBub2RlcyA9ICdsZW5ndGgnIGluIGRvbSA/IGRvbSA6IFtkb21dO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBub2Rlcy5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpbmRleF07XG4gICAgICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmlzRG9jdW1lbnQpKG5vZGUpKSB7XG4gICAgICAgICAgICAoX2EgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlKS5jYWxsLmFwcGx5KF9hLCBfX3NwcmVhZEFycmF5KFtub2RlcywgaW5kZXgsIDFdLCBub2RlLmNoaWxkcmVuLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbm9kZXMubGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNbaW5kZXhdO1xuICAgICAgICByZXN1bHQgKz0gKDAsIHBhcnNlNV8xLnNlcmlhbGl6ZU91dGVyKShub2RlLCByZW5kZXJPcHRzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMucmVuZGVyV2l0aFBhcnNlNSA9IHJlbmRlcldpdGhQYXJzZTU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZTUtYWRhcHRlci5qcy5tYXAiXSwibmFtZXMiOlsiX19zcHJlYWRBcnJheSIsInRvIiwiZnJvbSIsInBhY2siLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJpIiwibCIsImFyIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJjb25jYXQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJlbmRlcldpdGhQYXJzZTUiLCJwYXJzZVdpdGhQYXJzZTUiLCJkb21oYW5kbGVyXzEiLCJyZXF1aXJlIiwicGFyc2U1XzEiLCJwYXJzZTVfaHRtbHBhcnNlcjJfdHJlZV9hZGFwdGVyXzEiLCJjb250ZW50Iiwib3B0aW9ucyIsImlzRG9jdW1lbnQiLCJjb250ZXh0Iiwib3B0cyIsInNjcmlwdGluZ0VuYWJsZWQiLCJ0cmVlQWRhcHRlciIsImFkYXB0ZXIiLCJzb3VyY2VDb2RlTG9jYXRpb25JbmZvIiwicGFyc2UiLCJwYXJzZUZyYWdtZW50IiwicmVuZGVyT3B0cyIsImRvbSIsIl9hIiwibm9kZXMiLCJpbmRleCIsIm5vZGUiLCJzcGxpY2UiLCJhcHBseSIsImNoaWxkcmVuIiwicmVzdWx0Iiwic2VyaWFsaXplT3V0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/parsers/parse5-adapter.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/static.js":
/*!********************************************!*\
  !*** ./node_modules/cheerio/lib/static.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.merge = exports.contains = exports.root = exports.parseHTML = exports.text = exports.xml = exports.html = void 0;\nvar domutils_1 = __webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\");\nvar options_js_1 = __importStar(__webpack_require__(/*! ./options.js */ \"(app-pages-browser)/./node_modules/cheerio/lib/options.js\"));\n/**\n * Helper function to render a DOM.\n *\n * @param that - Cheerio instance to render.\n * @param dom - The DOM to render. Defaults to `that`'s root.\n * @param options - Options for rendering.\n * @returns The rendered document.\n */ function render(that, dom, options) {\n    if (!that) return \"\";\n    return that(dom !== null && dom !== void 0 ? dom : that._root.children, null, undefined, options).toString();\n}\n/**\n * Checks if a passed object is an options object.\n *\n * @param dom - Object to check if it is an options object.\n * @returns Whether the object is an options object.\n */ function isOptions(dom, options) {\n    return !options && typeof dom === \"object\" && dom != null && !(\"length\" in dom) && !(\"type\" in dom);\n}\nfunction html(dom, options) {\n    /*\n     * Be flexible about parameters, sometimes we call html(),\n     * with options as only parameter\n     * check dom argument for dom element specific properties\n     * assume there is no 'length' or 'type' properties in the options object\n     */ var toRender = isOptions(dom) ? (options = dom, undefined) : dom;\n    /*\n     * Sometimes `$.html()` is used without preloading html,\n     * so fallback non-existing options to the default ones.\n     */ var opts = __assign(__assign(__assign({}, options_js_1.default), this === null || this === void 0 ? void 0 : this._options), (0, options_js_1.flatten)(options !== null && options !== void 0 ? options : {}));\n    return render(this, toRender, opts);\n}\nexports.html = html;\n/**\n * Render the document as XML.\n *\n * @param dom - Element to render.\n * @returns THe rendered document.\n */ function xml(dom) {\n    var options = __assign(__assign({}, this._options), {\n        xmlMode: true\n    });\n    return render(this, dom, options);\n}\nexports.xml = xml;\n/**\n * Render the document as text.\n *\n * This returns the `textContent` of the passed elements. The result will\n * include the contents of `script` and `stype` elements. To avoid this, use\n * `.prop('innerText')` instead.\n *\n * @param elements - Elements to render.\n * @returns The rendered document.\n */ function text(elements) {\n    var elems = elements ? elements : this ? this.root() : [];\n    var ret = \"\";\n    for(var i = 0; i < elems.length; i++){\n        ret += (0, domutils_1.textContent)(elems[i]);\n    }\n    return ret;\n}\nexports.text = text;\nfunction parseHTML(data, context, keepScripts) {\n    if (keepScripts === void 0) {\n        keepScripts = typeof context === \"boolean\" ? context : false;\n    }\n    if (!data || typeof data !== \"string\") {\n        return null;\n    }\n    if (typeof context === \"boolean\") {\n        keepScripts = context;\n    }\n    var parsed = this.load(data, options_js_1.default, false);\n    if (!keepScripts) {\n        parsed(\"script\").remove();\n    }\n    /*\n     * The `children` array is used by Cheerio internally to group elements that\n     * share the same parents. When nodes created through `parseHTML` are\n     * inserted into previously-existing DOM structures, they will be removed\n     * from the `children` array. The results of `parseHTML` should remain\n     * constant across these operations, so a shallow copy should be returned.\n     */ return parsed.root()[0].children.slice();\n}\nexports.parseHTML = parseHTML;\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *\n * ```js\n * $.root().append('<ul id=\"vegetables\"></ul>').html();\n * //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n * ```\n *\n * @returns Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */ function root() {\n    return this(this._root);\n}\nexports.root = root;\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param container - Potential parent node.\n * @param contained - Potential child node.\n * @returns Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */ function contains(container, contained) {\n    // According to the jQuery API, an element does not \"contain\" itself\n    if (contained === container) {\n        return false;\n    }\n    /*\n     * Step up the descendants, stopping when the root element is reached\n     * (signaled by `.parent` returning a reference to the same object)\n     */ var next = contained;\n    while(next && next !== next.parent){\n        next = next.parent;\n        if (next === container) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.contains = contains;\n/**\n * $.merge().\n *\n * @param arr1 - First array.\n * @param arr2 - Second array.\n * @returns `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */ function merge(arr1, arr2) {\n    if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n        return;\n    }\n    var newLength = arr1.length;\n    var len = +arr2.length;\n    for(var i = 0; i < len; i++){\n        arr1[newLength++] = arr2[i];\n    }\n    arr1.length = newLength;\n    return arr1;\n}\nexports.merge = merge;\n/**\n * Checks if an object is array-like.\n *\n * @param item - Item to check.\n * @returns Indicates if the item is array-like.\n */ function isArrayLike(item) {\n    if (Array.isArray(item)) {\n        return true;\n    }\n    if (typeof item !== \"object\" || !Object.prototype.hasOwnProperty.call(item, \"length\") || typeof item.length !== \"number\" || item.length < 0) {\n        return false;\n    }\n    for(var i = 0; i < item.length; i++){\n        if (!(i in item)) {\n            return false;\n        }\n    }\n    return true;\n} //# sourceMappingURL=static.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9zdGF0aWMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxXQUFXLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsUUFBUSxJQUFLO0lBQ3RDQSxXQUFXQyxPQUFPQyxNQUFNLElBQUksU0FBU0MsQ0FBQztRQUNsQyxJQUFLLElBQUlDLEdBQUdDLElBQUksR0FBR0MsSUFBSUMsVUFBVUMsTUFBTSxFQUFFSCxJQUFJQyxHQUFHRCxJQUFLO1lBQ2pERCxJQUFJRyxTQUFTLENBQUNGLEVBQUU7WUFDaEIsSUFBSyxJQUFJSSxLQUFLTCxFQUFHLElBQUlILE9BQU9TLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNSLEdBQUdLLElBQ3pETixDQUFDLENBQUNNLEVBQUUsR0FBR0wsQ0FBQyxDQUFDSyxFQUFFO1FBQ25CO1FBQ0EsT0FBT047SUFDWDtJQUNBLE9BQU9ILFNBQVNhLEtBQUssQ0FBQyxJQUFJLEVBQUVOO0FBQ2hDO0FBQ0EsSUFBSU8sa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNYixDQUFBQSxPQUFPYyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPcEIsT0FBT3FCLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FqQixPQUFPMkIsY0FBYyxDQUFDWixHQUFHRyxJQUFJRTtBQUNqQyxJQUFNLFNBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDdEIsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JGLENBQUMsQ0FBQ0csR0FBRyxHQUFHRixDQUFDLENBQUNDLEVBQUU7QUFDaEIsQ0FBQztBQUNELElBQUlXLHFCQUFxQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGtCQUFrQixJQUFNNUIsQ0FBQUEsT0FBT2MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRWMsQ0FBQztJQUN6RjdCLE9BQU8yQixjQUFjLENBQUNaLEdBQUcsV0FBVztRQUFFVSxZQUFZO1FBQU1LLE9BQU9EO0lBQUU7QUFDckUsSUFBSyxTQUFTZCxDQUFDLEVBQUVjLENBQUM7SUFDZGQsQ0FBQyxDQUFDLFVBQVUsR0FBR2M7QUFDbkI7QUFDQSxJQUFJRSxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVVDLEdBQUc7SUFDM0QsSUFBSUEsT0FBT0EsSUFBSVYsVUFBVSxFQUFFLE9BQU9VO0lBQ2xDLElBQUlDLFNBQVMsQ0FBQztJQUNkLElBQUlELE9BQU8sTUFBTTtRQUFBLElBQUssSUFBSWYsS0FBS2UsSUFBSyxJQUFJZixNQUFNLGFBQWFqQixPQUFPUyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDcUIsS0FBS2YsSUFBSUosZ0JBQWdCb0IsUUFBUUQsS0FBS2Y7SUFBRTtJQUN4SVcsbUJBQW1CSyxRQUFRRDtJQUMzQixPQUFPQztBQUNYO0FBQ0FqQyw4Q0FBNkM7SUFBRThCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RJLGFBQWEsR0FBR0EsZ0JBQWdCLEdBQUdBLFlBQVksR0FBR0EsaUJBQWlCLEdBQUdBLFlBQVksR0FBR0EsV0FBVyxHQUFHQSxZQUFZLEdBQUcsS0FBSztBQUN2SCxJQUFJUSxhQUFhQyxtQkFBT0EsQ0FBQywwRUFBVTtBQUNuQyxJQUFJQyxlQUFlYixhQUFhWSxtQkFBT0EsQ0FBQywrRUFBYztBQUN0RDs7Ozs7OztDQU9DLEdBQ0QsU0FBU0UsT0FBT0MsSUFBSSxFQUFFQyxHQUFHLEVBQUVDLE9BQU87SUFDOUIsSUFBSSxDQUFDRixNQUNELE9BQU87SUFDWCxPQUFPQSxLQUFLQyxRQUFRLFFBQVFBLFFBQVEsS0FBSyxJQUFJQSxNQUFNRCxLQUFLRyxLQUFLLENBQUNDLFFBQVEsRUFBRSxNQUFNL0IsV0FBVzZCLFNBQVNHLFFBQVE7QUFDOUc7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVNDLFVBQVVMLEdBQUcsRUFBRUMsT0FBTztJQUMzQixPQUFRLENBQUNBLFdBQ0wsT0FBT0QsUUFBUSxZQUNmQSxPQUFPLFFBQ1AsQ0FBRSxhQUFZQSxHQUFFLEtBQ2hCLENBQUUsV0FBVUEsR0FBRTtBQUN0QjtBQUNBLFNBQVNOLEtBQUtNLEdBQUcsRUFBRUMsT0FBTztJQUN0Qjs7Ozs7S0FLQyxHQUNELElBQUlLLFdBQVdELFVBQVVMLE9BQVEsV0FBV0EsS0FBTTVCLFNBQVEsSUFBSzRCO0lBQy9EOzs7S0FHQyxHQUNELElBQUlPLE9BQU92RCxTQUFTQSxTQUFTQSxTQUFTLENBQUMsR0FBRzZDLGFBQWFXLE9BQU8sR0FBRyxJQUFJLEtBQUssUUFBUSxJQUFJLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUNDLFFBQVEsR0FBRyxDQUFDLEdBQUdaLGFBQWFhLE9BQU8sRUFBRVQsWUFBWSxRQUFRQSxZQUFZLEtBQUssSUFBSUEsVUFBVSxDQUFDO0lBQzNNLE9BQU9ILE9BQU8sSUFBSSxFQUFFUSxVQUFVQztBQUNsQztBQUNBcEIsWUFBWSxHQUFHTztBQUNmOzs7OztDQUtDLEdBQ0QsU0FBU0QsSUFBSU8sR0FBRztJQUNaLElBQUlDLFVBQVVqRCxTQUFTQSxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUN5RCxRQUFRLEdBQUc7UUFBRUUsU0FBUztJQUFLO0lBQ3BFLE9BQU9iLE9BQU8sSUFBSSxFQUFFRSxLQUFLQztBQUM3QjtBQUNBZCxXQUFXLEdBQUdNO0FBQ2Q7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0QsS0FBS29CLFFBQVE7SUFDbEIsSUFBSUMsUUFBUUQsV0FBV0EsV0FBVyxJQUFJLEdBQUcsSUFBSSxDQUFDdEIsSUFBSSxLQUFLLEVBQUU7SUFDekQsSUFBSXdCLE1BQU07SUFDVixJQUFLLElBQUl6RCxJQUFJLEdBQUdBLElBQUl3RCxNQUFNckQsTUFBTSxFQUFFSCxJQUFLO1FBQ25DeUQsT0FBTyxDQUFDLEdBQUduQixXQUFXb0IsV0FBVyxFQUFFRixLQUFLLENBQUN4RCxFQUFFO0lBQy9DO0lBQ0EsT0FBT3lEO0FBQ1g7QUFDQTNCLFlBQVksR0FBR0s7QUFDZixTQUFTRCxVQUFVeUIsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLFdBQVc7SUFDekMsSUFBSUEsZ0JBQWdCLEtBQUssR0FBRztRQUFFQSxjQUFjLE9BQU9ELFlBQVksWUFBWUEsVUFBVTtJQUFPO0lBQzVGLElBQUksQ0FBQ0QsUUFBUSxPQUFPQSxTQUFTLFVBQVU7UUFDbkMsT0FBTztJQUNYO0lBQ0EsSUFBSSxPQUFPQyxZQUFZLFdBQVc7UUFDOUJDLGNBQWNEO0lBQ2xCO0lBQ0EsSUFBSUUsU0FBUyxJQUFJLENBQUNDLElBQUksQ0FBQ0osTUFBTW5CLGFBQWFXLE9BQU8sRUFBRTtJQUNuRCxJQUFJLENBQUNVLGFBQWE7UUFDZEMsT0FBTyxVQUFVRSxNQUFNO0lBQzNCO0lBQ0E7Ozs7OztLQU1DLEdBQ0QsT0FBT0YsT0FBTzdCLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQ2EsUUFBUSxDQUFDbUIsS0FBSztBQUMxQztBQUNBbkMsaUJBQWlCLEdBQUdJO0FBQ3BCOzs7Ozs7Ozs7Ozs7O0NBYUMsR0FDRCxTQUFTRDtJQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQ1ksS0FBSztBQUMxQjtBQUNBZixZQUFZLEdBQUdHO0FBQ2Y7Ozs7Ozs7OztDQVNDLEdBQ0QsU0FBU0QsU0FBU2tDLFNBQVMsRUFBRUMsU0FBUztJQUNsQyxvRUFBb0U7SUFDcEUsSUFBSUEsY0FBY0QsV0FBVztRQUN6QixPQUFPO0lBQ1g7SUFDQTs7O0tBR0MsR0FDRCxJQUFJRSxPQUFPRDtJQUNYLE1BQU9DLFFBQVFBLFNBQVNBLEtBQUtDLE1BQU0sQ0FBRTtRQUNqQ0QsT0FBT0EsS0FBS0MsTUFBTTtRQUNsQixJQUFJRCxTQUFTRixXQUFXO1lBQ3BCLE9BQU87UUFDWDtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ0FwQyxnQkFBZ0IsR0FBR0U7QUFDbkI7Ozs7Ozs7O0NBUUMsR0FDRCxTQUFTRCxNQUFNdUMsSUFBSSxFQUFFQyxJQUFJO0lBQ3JCLElBQUksQ0FBQ0MsWUFBWUYsU0FBUyxDQUFDRSxZQUFZRCxPQUFPO1FBQzFDO0lBQ0o7SUFDQSxJQUFJRSxZQUFZSCxLQUFLbkUsTUFBTTtJQUMzQixJQUFJdUUsTUFBTSxDQUFDSCxLQUFLcEUsTUFBTTtJQUN0QixJQUFLLElBQUlILElBQUksR0FBR0EsSUFBSTBFLEtBQUsxRSxJQUFLO1FBQzFCc0UsSUFBSSxDQUFDRyxZQUFZLEdBQUdGLElBQUksQ0FBQ3ZFLEVBQUU7SUFDL0I7SUFDQXNFLEtBQUtuRSxNQUFNLEdBQUdzRTtJQUNkLE9BQU9IO0FBQ1g7QUFDQXhDLGFBQWEsR0FBR0M7QUFDaEI7Ozs7O0NBS0MsR0FDRCxTQUFTeUMsWUFBWUcsSUFBSTtJQUNyQixJQUFJQyxNQUFNQyxPQUFPLENBQUNGLE9BQU87UUFDckIsT0FBTztJQUNYO0lBQ0EsSUFBSSxPQUFPQSxTQUFTLFlBQ2hCLENBQUMvRSxPQUFPUyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDb0UsTUFBTSxhQUM1QyxPQUFPQSxLQUFLeEUsTUFBTSxLQUFLLFlBQ3ZCd0UsS0FBS3hFLE1BQU0sR0FBRyxHQUFHO1FBQ2pCLE9BQU87SUFDWDtJQUNBLElBQUssSUFBSUgsSUFBSSxHQUFHQSxJQUFJMkUsS0FBS3hFLE1BQU0sRUFBRUgsSUFBSztRQUNsQyxJQUFJLENBQUVBLENBQUFBLEtBQUsyRSxJQUFHLEdBQUk7WUFDZCxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU87QUFDWCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvc3RhdGljLmpzP2RlOTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlID0gZXhwb3J0cy5jb250YWlucyA9IGV4cG9ydHMucm9vdCA9IGV4cG9ydHMucGFyc2VIVE1MID0gZXhwb3J0cy50ZXh0ID0gZXhwb3J0cy54bWwgPSBleHBvcnRzLmh0bWwgPSB2b2lkIDA7XG52YXIgZG9tdXRpbHNfMSA9IHJlcXVpcmUoXCJkb211dGlsc1wiKTtcbnZhciBvcHRpb25zX2pzXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vb3B0aW9ucy5qc1wiKSk7XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byByZW5kZXIgYSBET00uXG4gKlxuICogQHBhcmFtIHRoYXQgLSBDaGVlcmlvIGluc3RhbmNlIHRvIHJlbmRlci5cbiAqIEBwYXJhbSBkb20gLSBUaGUgRE9NIHRvIHJlbmRlci4gRGVmYXVsdHMgdG8gYHRoYXRgJ3Mgcm9vdC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgcmVuZGVyaW5nLlxuICogQHJldHVybnMgVGhlIHJlbmRlcmVkIGRvY3VtZW50LlxuICovXG5mdW5jdGlvbiByZW5kZXIodGhhdCwgZG9tLCBvcHRpb25zKSB7XG4gICAgaWYgKCF0aGF0KVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgcmV0dXJuIHRoYXQoZG9tICE9PSBudWxsICYmIGRvbSAhPT0gdm9pZCAwID8gZG9tIDogdGhhdC5fcm9vdC5jaGlsZHJlbiwgbnVsbCwgdW5kZWZpbmVkLCBvcHRpb25zKS50b1N0cmluZygpO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgYSBwYXNzZWQgb2JqZWN0IGlzIGFuIG9wdGlvbnMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBkb20gLSBPYmplY3QgdG8gY2hlY2sgaWYgaXQgaXMgYW4gb3B0aW9ucyBvYmplY3QuXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBvYmplY3QgaXMgYW4gb3B0aW9ucyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzT3B0aW9ucyhkb20sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKCFvcHRpb25zICYmXG4gICAgICAgIHR5cGVvZiBkb20gPT09ICdvYmplY3QnICYmXG4gICAgICAgIGRvbSAhPSBudWxsICYmXG4gICAgICAgICEoJ2xlbmd0aCcgaW4gZG9tKSAmJlxuICAgICAgICAhKCd0eXBlJyBpbiBkb20pKTtcbn1cbmZ1bmN0aW9uIGh0bWwoZG9tLCBvcHRpb25zKSB7XG4gICAgLypcbiAgICAgKiBCZSBmbGV4aWJsZSBhYm91dCBwYXJhbWV0ZXJzLCBzb21ldGltZXMgd2UgY2FsbCBodG1sKCksXG4gICAgICogd2l0aCBvcHRpb25zIGFzIG9ubHkgcGFyYW1ldGVyXG4gICAgICogY2hlY2sgZG9tIGFyZ3VtZW50IGZvciBkb20gZWxlbWVudCBzcGVjaWZpYyBwcm9wZXJ0aWVzXG4gICAgICogYXNzdW1lIHRoZXJlIGlzIG5vICdsZW5ndGgnIG9yICd0eXBlJyBwcm9wZXJ0aWVzIGluIHRoZSBvcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIHZhciB0b1JlbmRlciA9IGlzT3B0aW9ucyhkb20pID8gKChvcHRpb25zID0gZG9tKSwgdW5kZWZpbmVkKSA6IGRvbTtcbiAgICAvKlxuICAgICAqIFNvbWV0aW1lcyBgJC5odG1sKClgIGlzIHVzZWQgd2l0aG91dCBwcmVsb2FkaW5nIGh0bWwsXG4gICAgICogc28gZmFsbGJhY2sgbm9uLWV4aXN0aW5nIG9wdGlvbnMgdG8gdGhlIGRlZmF1bHQgb25lcy5cbiAgICAgKi9cbiAgICB2YXIgb3B0cyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRpb25zX2pzXzEuZGVmYXVsdCksIHRoaXMgPT09IG51bGwgfHwgdGhpcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhpcy5fb3B0aW9ucyksICgwLCBvcHRpb25zX2pzXzEuZmxhdHRlbikob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge30pKTtcbiAgICByZXR1cm4gcmVuZGVyKHRoaXMsIHRvUmVuZGVyLCBvcHRzKTtcbn1cbmV4cG9ydHMuaHRtbCA9IGh0bWw7XG4vKipcbiAqIFJlbmRlciB0aGUgZG9jdW1lbnQgYXMgWE1MLlxuICpcbiAqIEBwYXJhbSBkb20gLSBFbGVtZW50IHRvIHJlbmRlci5cbiAqIEByZXR1cm5zIFRIZSByZW5kZXJlZCBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24geG1sKGRvbSkge1xuICAgIHZhciBvcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuX29wdGlvbnMpLCB7IHhtbE1vZGU6IHRydWUgfSk7XG4gICAgcmV0dXJuIHJlbmRlcih0aGlzLCBkb20sIG9wdGlvbnMpO1xufVxuZXhwb3J0cy54bWwgPSB4bWw7XG4vKipcbiAqIFJlbmRlciB0aGUgZG9jdW1lbnQgYXMgdGV4dC5cbiAqXG4gKiBUaGlzIHJldHVybnMgdGhlIGB0ZXh0Q29udGVudGAgb2YgdGhlIHBhc3NlZCBlbGVtZW50cy4gVGhlIHJlc3VsdCB3aWxsXG4gKiBpbmNsdWRlIHRoZSBjb250ZW50cyBvZiBgc2NyaXB0YCBhbmQgYHN0eXBlYCBlbGVtZW50cy4gVG8gYXZvaWQgdGhpcywgdXNlXG4gKiBgLnByb3AoJ2lubmVyVGV4dCcpYCBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSBlbGVtZW50cyAtIEVsZW1lbnRzIHRvIHJlbmRlci5cbiAqIEByZXR1cm5zIFRoZSByZW5kZXJlZCBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gdGV4dChlbGVtZW50cykge1xuICAgIHZhciBlbGVtcyA9IGVsZW1lbnRzID8gZWxlbWVudHMgOiB0aGlzID8gdGhpcy5yb290KCkgOiBbXTtcbiAgICB2YXIgcmV0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXQgKz0gKDAsIGRvbXV0aWxzXzEudGV4dENvbnRlbnQpKGVsZW1zW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmV4cG9ydHMudGV4dCA9IHRleHQ7XG5mdW5jdGlvbiBwYXJzZUhUTUwoZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMpIHtcbiAgICBpZiAoa2VlcFNjcmlwdHMgPT09IHZvaWQgMCkgeyBrZWVwU2NyaXB0cyA9IHR5cGVvZiBjb250ZXh0ID09PSAnYm9vbGVhbicgPyBjb250ZXh0IDogZmFsc2U7IH1cbiAgICBpZiAoIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnRleHQgPT09ICdib29sZWFuJykge1xuICAgICAgICBrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG4gICAgfVxuICAgIHZhciBwYXJzZWQgPSB0aGlzLmxvYWQoZGF0YSwgb3B0aW9uc19qc18xLmRlZmF1bHQsIGZhbHNlKTtcbiAgICBpZiAoIWtlZXBTY3JpcHRzKSB7XG4gICAgICAgIHBhcnNlZCgnc2NyaXB0JykucmVtb3ZlKCk7XG4gICAgfVxuICAgIC8qXG4gICAgICogVGhlIGBjaGlsZHJlbmAgYXJyYXkgaXMgdXNlZCBieSBDaGVlcmlvIGludGVybmFsbHkgdG8gZ3JvdXAgZWxlbWVudHMgdGhhdFxuICAgICAqIHNoYXJlIHRoZSBzYW1lIHBhcmVudHMuIFdoZW4gbm9kZXMgY3JlYXRlZCB0aHJvdWdoIGBwYXJzZUhUTUxgIGFyZVxuICAgICAqIGluc2VydGVkIGludG8gcHJldmlvdXNseS1leGlzdGluZyBET00gc3RydWN0dXJlcywgdGhleSB3aWxsIGJlIHJlbW92ZWRcbiAgICAgKiBmcm9tIHRoZSBgY2hpbGRyZW5gIGFycmF5LiBUaGUgcmVzdWx0cyBvZiBgcGFyc2VIVE1MYCBzaG91bGQgcmVtYWluXG4gICAgICogY29uc3RhbnQgYWNyb3NzIHRoZXNlIG9wZXJhdGlvbnMsIHNvIGEgc2hhbGxvdyBjb3B5IHNob3VsZCBiZSByZXR1cm5lZC5cbiAgICAgKi9cbiAgICByZXR1cm4gcGFyc2VkLnJvb3QoKVswXS5jaGlsZHJlbi5zbGljZSgpO1xufVxuZXhwb3J0cy5wYXJzZUhUTUwgPSBwYXJzZUhUTUw7XG4vKipcbiAqIFNvbWV0aW1lcyB5b3UgbmVlZCB0byB3b3JrIHdpdGggdGhlIHRvcC1sZXZlbCByb290IGVsZW1lbnQuIFRvIHF1ZXJ5IGl0LCB5b3VcbiAqIGNhbiB1c2UgYCQucm9vdCgpYC5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkLnJvb3QoKS5hcHBlbmQoJzx1bCBpZD1cInZlZ2V0YWJsZXNcIj48L3VsPicpLmh0bWwoKTtcbiAqIC8vPT4gPHVsIGlkPVwiZnJ1aXRzXCI+Li4uPC91bD48dWwgaWQ9XCJ2ZWdldGFibGVzXCI+PC91bD5cbiAqIGBgYFxuICpcbiAqIEByZXR1cm5zIENoZWVyaW8gaW5zdGFuY2Ugd3JhcHBpbmcgdGhlIHJvb3Qgbm9kZS5cbiAqIEBhbGlhcyBDaGVlcmlvLnJvb3RcbiAqL1xuZnVuY3Rpb24gcm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcyh0aGlzLl9yb290KTtcbn1cbmV4cG9ydHMucm9vdCA9IHJvb3Q7XG4vKipcbiAqIENoZWNrcyB0byBzZWUgaWYgdGhlIGBjb250YWluZWRgIERPTSBlbGVtZW50IGlzIGEgZGVzY2VuZGFudCBvZiB0aGVcbiAqIGBjb250YWluZXJgIERPTSBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBjb250YWluZXIgLSBQb3RlbnRpYWwgcGFyZW50IG5vZGUuXG4gKiBAcGFyYW0gY29udGFpbmVkIC0gUG90ZW50aWFsIGNoaWxkIG5vZGUuXG4gKiBAcmV0dXJucyBJbmRpY2F0ZXMgaWYgdGhlIG5vZGVzIGNvbnRhaW4gb25lIGFub3RoZXIuXG4gKiBAYWxpYXMgQ2hlZXJpby5jb250YWluc1xuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkuY29udGFpbnMvfVxuICovXG5mdW5jdGlvbiBjb250YWlucyhjb250YWluZXIsIGNvbnRhaW5lZCkge1xuICAgIC8vIEFjY29yZGluZyB0byB0aGUgalF1ZXJ5IEFQSSwgYW4gZWxlbWVudCBkb2VzIG5vdCBcImNvbnRhaW5cIiBpdHNlbGZcbiAgICBpZiAoY29udGFpbmVkID09PSBjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvKlxuICAgICAqIFN0ZXAgdXAgdGhlIGRlc2NlbmRhbnRzLCBzdG9wcGluZyB3aGVuIHRoZSByb290IGVsZW1lbnQgaXMgcmVhY2hlZFxuICAgICAqIChzaWduYWxlZCBieSBgLnBhcmVudGAgcmV0dXJuaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBzYW1lIG9iamVjdClcbiAgICAgKi9cbiAgICB2YXIgbmV4dCA9IGNvbnRhaW5lZDtcbiAgICB3aGlsZSAobmV4dCAmJiBuZXh0ICE9PSBuZXh0LnBhcmVudCkge1xuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnQ7XG4gICAgICAgIGlmIChuZXh0ID09PSBjb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuY29udGFpbnMgPSBjb250YWlucztcbi8qKlxuICogJC5tZXJnZSgpLlxuICpcbiAqIEBwYXJhbSBhcnIxIC0gRmlyc3QgYXJyYXkuXG4gKiBAcGFyYW0gYXJyMiAtIFNlY29uZCBhcnJheS5cbiAqIEByZXR1cm5zIGBhcnIxYCwgd2l0aCBlbGVtZW50cyBvZiBgYXJyMmAgaW5zZXJ0ZWQuXG4gKiBAYWxpYXMgQ2hlZXJpby5tZXJnZVxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9qUXVlcnkubWVyZ2UvfVxuICovXG5mdW5jdGlvbiBtZXJnZShhcnIxLCBhcnIyKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShhcnIxKSB8fCAhaXNBcnJheUxpa2UoYXJyMikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbmV3TGVuZ3RoID0gYXJyMS5sZW5ndGg7XG4gICAgdmFyIGxlbiA9ICthcnIyLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGFycjFbbmV3TGVuZ3RoKytdID0gYXJyMltpXTtcbiAgICB9XG4gICAgYXJyMS5sZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgcmV0dXJuIGFycjE7XG59XG5leHBvcnRzLm1lcmdlID0gbWVyZ2U7XG4vKipcbiAqIENoZWNrcyBpZiBhbiBvYmplY3QgaXMgYXJyYXktbGlrZS5cbiAqXG4gKiBAcGFyYW0gaXRlbSAtIEl0ZW0gdG8gY2hlY2suXG4gKiBAcmV0dXJucyBJbmRpY2F0ZXMgaWYgdGhlIGl0ZW0gaXMgYXJyYXktbGlrZS5cbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UoaXRlbSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnIHx8XG4gICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaXRlbSwgJ2xlbmd0aCcpIHx8XG4gICAgICAgIHR5cGVvZiBpdGVtLmxlbmd0aCAhPT0gJ251bWJlcicgfHxcbiAgICAgICAgaXRlbS5sZW5ndGggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKGkgaW4gaXRlbSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRpYy5qcy5tYXAiXSwibmFtZXMiOlsiX19hc3NpZ24iLCJPYmplY3QiLCJhc3NpZ24iLCJ0IiwicyIsImkiLCJuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX19jcmVhdGVCaW5kaW5nIiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwicmVzdWx0IiwiZXhwb3J0cyIsIm1lcmdlIiwiY29udGFpbnMiLCJyb290IiwicGFyc2VIVE1MIiwidGV4dCIsInhtbCIsImh0bWwiLCJkb211dGlsc18xIiwicmVxdWlyZSIsIm9wdGlvbnNfanNfMSIsInJlbmRlciIsInRoYXQiLCJkb20iLCJvcHRpb25zIiwiX3Jvb3QiLCJjaGlsZHJlbiIsInRvU3RyaW5nIiwiaXNPcHRpb25zIiwidG9SZW5kZXIiLCJvcHRzIiwiZGVmYXVsdCIsIl9vcHRpb25zIiwiZmxhdHRlbiIsInhtbE1vZGUiLCJlbGVtZW50cyIsImVsZW1zIiwicmV0IiwidGV4dENvbnRlbnQiLCJkYXRhIiwiY29udGV4dCIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwibG9hZCIsInJlbW92ZSIsInNsaWNlIiwiY29udGFpbmVyIiwiY29udGFpbmVkIiwibmV4dCIsInBhcmVudCIsImFycjEiLCJhcnIyIiwiaXNBcnJheUxpa2UiLCJuZXdMZW5ndGgiLCJsZW4iLCJpdGVtIiwiQXJyYXkiLCJpc0FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/static.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/types.js":
/*!*******************************************!*\
  !*** ./node_modules/cheerio/lib/types.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n})); //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQyxFQUM3RCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NoZWVyaW8vbGliL3R5cGVzLmpzPzFiMTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/cheerio/lib/utils.js":
/*!*******************************************!*\
  !*** ./node_modules/cheerio/lib/utils.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */ var domhandler_2 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nObject.defineProperty(exports, \"isTag\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_2.isTag;\n    }\n}));\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */ function isCheerio(maybeCheerio) {\n    return maybeCheerio.cheerio != null;\n}\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */ function camelCase(str) {\n    return str.replace(/[_.-](\\w|$)/g, function(_, x) {\n        return x.toUpperCase();\n    });\n}\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */ function cssCase(str) {\n    return str.replace(/[A-Z]/g, \"-$&\").toLowerCase();\n}\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */ function domEach(array, fn) {\n    var len = array.length;\n    for(var i = 0; i < len; i++)fn(array[i], i);\n    return array;\n}\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */ function cloneDom(dom) {\n    var clone = \"length\" in dom ? Array.prototype.map.call(dom, function(el) {\n        return (0, domhandler_1.cloneNode)(el, true);\n    }) : [\n        (0, domhandler_1.cloneNode)(dom, true)\n    ];\n    // Add a root node around the cloned nodes\n    var root = new domhandler_1.Document(clone);\n    clone.forEach(function(node) {\n        node.parent = root;\n    });\n    return clone;\n}\nexports.cloneDom = cloneDom;\nvar CharacterCodes;\n(function(CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n    CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n    CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n    CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n    CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */ function isHtml(str) {\n    var tagStart = str.indexOf(\"<\");\n    if (tagStart < 0 || tagStart > str.length - 3) return false;\n    var tagChar = str.charCodeAt(tagStart + 1);\n    return (tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ || tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ || tagChar === CharacterCodes.Exclamation) && str.includes(\">\", tagStart + 2);\n}\nexports.isHtml = isHtml; //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/cheerio/lib/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/attributes.js":
/*!***************************************************!*\
  !*** ./node_modules/css-select/lib/attributes.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.attributeRules = void 0;\nvar boolbase_1 = __importDefault(__webpack_require__(/*! boolbase */ \"(app-pages-browser)/./node_modules/boolbase/index.js\"));\n/**\n * All reserved characters in a regex, used for escaping.\n *\n * Taken from XRegExp, (c) 2007-2020 Steven Levithan under the MIT license\n * https://github.com/slevithan/xregexp/blob/95eeebeb8fac8754d54eafe2b4743661ac1cf028/src/xregexp.js#L794\n */ var reChars = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\nfunction escapeRegex(value) {\n    return value.replace(reChars, \"\\\\$&\");\n}\n/**\n * Attributes that are case-insensitive in HTML.\n *\n * @private\n * @see https://html.spec.whatwg.org/multipage/semantics-other.html#case-sensitivity-of-selectors\n */ var caseInsensitiveAttributes = new Set([\n    \"accept\",\n    \"accept-charset\",\n    \"align\",\n    \"alink\",\n    \"axis\",\n    \"bgcolor\",\n    \"charset\",\n    \"checked\",\n    \"clear\",\n    \"codetype\",\n    \"color\",\n    \"compact\",\n    \"declare\",\n    \"defer\",\n    \"dir\",\n    \"direction\",\n    \"disabled\",\n    \"enctype\",\n    \"face\",\n    \"frame\",\n    \"hreflang\",\n    \"http-equiv\",\n    \"lang\",\n    \"language\",\n    \"link\",\n    \"media\",\n    \"method\",\n    \"multiple\",\n    \"nohref\",\n    \"noresize\",\n    \"noshade\",\n    \"nowrap\",\n    \"readonly\",\n    \"rel\",\n    \"rev\",\n    \"rules\",\n    \"scope\",\n    \"scrolling\",\n    \"selected\",\n    \"shape\",\n    \"target\",\n    \"text\",\n    \"type\",\n    \"valign\",\n    \"valuetype\",\n    \"vlink\"\n]);\nfunction shouldIgnoreCase(selector, options) {\n    return typeof selector.ignoreCase === \"boolean\" ? selector.ignoreCase : selector.ignoreCase === \"quirks\" ? !!options.quirksMode : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);\n}\n/**\n * Attribute selectors\n */ exports.attributeRules = {\n    equals: function(next, data, options) {\n        var adapter = options.adapter;\n        var name = data.name;\n        var value = data.value;\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return function(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && attr.length === value.length && attr.toLowerCase() === value && next(elem);\n            };\n        }\n        return function(elem) {\n            return adapter.getAttributeValue(elem, name) === value && next(elem);\n        };\n    },\n    hyphen: function(next, data, options) {\n        var adapter = options.adapter;\n        var name = data.name;\n        var value = data.value;\n        var len = value.length;\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return function hyphenIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && (attr.length === len || attr.charAt(len) === \"-\") && attr.substr(0, len).toLowerCase() === value && next(elem);\n            };\n        }\n        return function hyphen(elem) {\n            var attr = adapter.getAttributeValue(elem, name);\n            return attr != null && (attr.length === len || attr.charAt(len) === \"-\") && attr.substr(0, len) === value && next(elem);\n        };\n    },\n    element: function(next, data, options) {\n        var adapter = options.adapter;\n        var name = data.name, value = data.value;\n        if (/\\s/.test(value)) {\n            return boolbase_1.default.falseFunc;\n        }\n        var regex = new RegExp(\"(?:^|\\\\s)\".concat(escapeRegex(value), \"(?:$|\\\\s)\"), shouldIgnoreCase(data, options) ? \"i\" : \"\");\n        return function element(elem) {\n            var attr = adapter.getAttributeValue(elem, name);\n            return attr != null && attr.length >= value.length && regex.test(attr) && next(elem);\n        };\n    },\n    exists: function(next, _a, _b) {\n        var name = _a.name;\n        var adapter = _b.adapter;\n        return function(elem) {\n            return adapter.hasAttrib(elem, name) && next(elem);\n        };\n    },\n    start: function(next, data, options) {\n        var adapter = options.adapter;\n        var name = data.name;\n        var value = data.value;\n        var len = value.length;\n        if (len === 0) {\n            return boolbase_1.default.falseFunc;\n        }\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return function(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && attr.length >= len && attr.substr(0, len).toLowerCase() === value && next(elem);\n            };\n        }\n        return function(elem) {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) && next(elem);\n        };\n    },\n    end: function(next, data, options) {\n        var adapter = options.adapter;\n        var name = data.name;\n        var value = data.value;\n        var len = -value.length;\n        if (len === 0) {\n            return boolbase_1.default.falseFunc;\n        }\n        if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return function(elem) {\n                var _a;\n                return ((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);\n            };\n        }\n        return function(elem) {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) && next(elem);\n        };\n    },\n    any: function(next, data, options) {\n        var adapter = options.adapter;\n        var name = data.name, value = data.value;\n        if (value === \"\") {\n            return boolbase_1.default.falseFunc;\n        }\n        if (shouldIgnoreCase(data, options)) {\n            var regex_1 = new RegExp(escapeRegex(value), \"i\");\n            return function anyIC(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return attr != null && attr.length >= value.length && regex_1.test(attr) && next(elem);\n            };\n        }\n        return function(elem) {\n            var _a;\n            return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) && next(elem);\n        };\n    },\n    not: function(next, data, options) {\n        var adapter = options.adapter;\n        var name = data.name;\n        var value = data.value;\n        if (value === \"\") {\n            return function(elem) {\n                return !!adapter.getAttributeValue(elem, name) && next(elem);\n            };\n        } else if (shouldIgnoreCase(data, options)) {\n            value = value.toLowerCase();\n            return function(elem) {\n                var attr = adapter.getAttributeValue(elem, name);\n                return (attr == null || attr.length !== value.length || attr.toLowerCase() !== value) && next(elem);\n            };\n        }\n        return function(elem) {\n            return adapter.getAttributeValue(elem, name) !== value && next(elem);\n        };\n    }\n}; //# sourceMappingURL=attributes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/attributes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/compile.js":
/*!************************************************!*\
  !*** ./node_modules/css-select/lib/compile.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.compileToken = exports.compileUnsafe = exports.compile = void 0;\nvar css_what_1 = __webpack_require__(/*! css-what */ \"(app-pages-browser)/./node_modules/css-what/lib/es/index.js\");\nvar boolbase_1 = __importDefault(__webpack_require__(/*! boolbase */ \"(app-pages-browser)/./node_modules/boolbase/index.js\"));\nvar sort_js_1 = __importStar(__webpack_require__(/*! ./sort.js */ \"(app-pages-browser)/./node_modules/css-select/lib/sort.js\"));\nvar general_js_1 = __webpack_require__(/*! ./general.js */ \"(app-pages-browser)/./node_modules/css-select/lib/general.js\");\nvar subselects_js_1 = __webpack_require__(/*! ./pseudo-selectors/subselects.js */ \"(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/subselects.js\");\n/**\n * Compiles a selector to an executable function.\n *\n * @param selector Selector to compile.\n * @param options Compilation options.\n * @param context Optional context for the selector.\n */ function compile(selector, options, context) {\n    var next = compileUnsafe(selector, options, context);\n    return (0, subselects_js_1.ensureIsTag)(next, options.adapter);\n}\nexports.compile = compile;\nfunction compileUnsafe(selector, options, context) {\n    var token = typeof selector === \"string\" ? (0, css_what_1.parse)(selector) : selector;\n    return compileToken(token, options, context);\n}\nexports.compileUnsafe = compileUnsafe;\nfunction includesScopePseudo(t) {\n    return t.type === css_what_1.SelectorType.Pseudo && (t.name === \"scope\" || Array.isArray(t.data) && t.data.some(function(data) {\n        return data.some(includesScopePseudo);\n    }));\n}\nvar DESCENDANT_TOKEN = {\n    type: css_what_1.SelectorType.Descendant\n};\nvar FLEXIBLE_DESCENDANT_TOKEN = {\n    type: \"_flexibleDescendant\"\n};\nvar SCOPE_TOKEN = {\n    type: css_what_1.SelectorType.Pseudo,\n    name: \"scope\",\n    data: null\n};\n/*\n * CSS 4 Spec (Draft): 3.4.1. Absolutizing a Relative Selector\n * http://www.w3.org/TR/selectors4/#absolutizing\n */ function absolutize(token, _a, context) {\n    var adapter = _a.adapter;\n    // TODO Use better check if the context is a document\n    var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function(e) {\n        var parent = adapter.isTag(e) && adapter.getParent(e);\n        return e === subselects_js_1.PLACEHOLDER_ELEMENT || parent && adapter.isTag(parent);\n    }));\n    for(var _i = 0, token_1 = token; _i < token_1.length; _i++){\n        var t = token_1[_i];\n        if (t.length > 0 && (0, sort_js_1.isTraversal)(t[0]) && t[0].type !== css_what_1.SelectorType.Descendant) {\n        // Don't continue in else branch\n        } else if (hasContext && !t.some(includesScopePseudo)) {\n            t.unshift(DESCENDANT_TOKEN);\n        } else {\n            continue;\n        }\n        t.unshift(SCOPE_TOKEN);\n    }\n}\nfunction compileToken(token, options, context) {\n    var _a;\n    token.forEach(sort_js_1.default);\n    context = (_a = options.context) !== null && _a !== void 0 ? _a : context;\n    var isArrayContext = Array.isArray(context);\n    var finalContext = context && (Array.isArray(context) ? context : [\n        context\n    ]);\n    // Check if the selector is relative\n    if (options.relativeSelector !== false) {\n        absolutize(token, options, finalContext);\n    } else if (token.some(function(t) {\n        return t.length > 0 && (0, sort_js_1.isTraversal)(t[0]);\n    })) {\n        throw new Error(\"Relative selectors are not allowed when the `relativeSelector` option is disabled\");\n    }\n    var shouldTestNextSiblings = false;\n    var query = token.map(function(rules) {\n        if (rules.length >= 2) {\n            var first = rules[0], second = rules[1];\n            if (first.type !== css_what_1.SelectorType.Pseudo || first.name !== \"scope\") {\n            // Ignore\n            } else if (isArrayContext && second.type === css_what_1.SelectorType.Descendant) {\n                rules[1] = FLEXIBLE_DESCENDANT_TOKEN;\n            } else if (second.type === css_what_1.SelectorType.Adjacent || second.type === css_what_1.SelectorType.Sibling) {\n                shouldTestNextSiblings = true;\n            }\n        }\n        return compileRules(rules, options, finalContext);\n    }).reduce(reduceRules, boolbase_1.default.falseFunc);\n    query.shouldTestNextSiblings = shouldTestNextSiblings;\n    return query;\n}\nexports.compileToken = compileToken;\nfunction compileRules(rules, options, context) {\n    var _a;\n    return rules.reduce(function(previous, rule) {\n        return previous === boolbase_1.default.falseFunc ? boolbase_1.default.falseFunc : (0, general_js_1.compileGeneralSelector)(previous, rule, options, context, compileToken);\n    }, (_a = options.rootFunc) !== null && _a !== void 0 ? _a : boolbase_1.default.trueFunc);\n}\nfunction reduceRules(a, b) {\n    if (b === boolbase_1.default.falseFunc || a === boolbase_1.default.trueFunc) {\n        return a;\n    }\n    if (a === boolbase_1.default.falseFunc || b === boolbase_1.default.trueFunc) {\n        return b;\n    }\n    return function combine(elem) {\n        return a(elem) || b(elem);\n    };\n} //# sourceMappingURL=compile.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/compile.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/general.js":
/*!************************************************!*\
  !*** ./node_modules/css-select/lib/general.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.compileGeneralSelector = void 0;\nvar attributes_js_1 = __webpack_require__(/*! ./attributes.js */ \"(app-pages-browser)/./node_modules/css-select/lib/attributes.js\");\nvar index_js_1 = __webpack_require__(/*! ./pseudo-selectors/index.js */ \"(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/index.js\");\nvar css_what_1 = __webpack_require__(/*! css-what */ \"(app-pages-browser)/./node_modules/css-what/lib/es/index.js\");\nfunction getElementParent(node, adapter) {\n    var parent = adapter.getParent(node);\n    if (parent && adapter.isTag(parent)) {\n        return parent;\n    }\n    return null;\n}\n/*\n * All available rules\n */ function compileGeneralSelector(next, selector, options, context, compileToken) {\n    var adapter = options.adapter, equals = options.equals;\n    switch(selector.type){\n        case css_what_1.SelectorType.PseudoElement:\n            {\n                throw new Error(\"Pseudo-elements are not supported by css-select\");\n            }\n        case css_what_1.SelectorType.ColumnCombinator:\n            {\n                throw new Error(\"Column combinators are not yet supported by css-select\");\n            }\n        case css_what_1.SelectorType.Attribute:\n            {\n                if (selector.namespace != null) {\n                    throw new Error(\"Namespaced attributes are not yet supported by css-select\");\n                }\n                if (!options.xmlMode || options.lowerCaseAttributeNames) {\n                    selector.name = selector.name.toLowerCase();\n                }\n                return attributes_js_1.attributeRules[selector.action](next, selector, options);\n            }\n        case css_what_1.SelectorType.Pseudo:\n            {\n                return (0, index_js_1.compilePseudoSelector)(next, selector, options, context, compileToken);\n            }\n        // Tags\n        case css_what_1.SelectorType.Tag:\n            {\n                if (selector.namespace != null) {\n                    throw new Error(\"Namespaced tag names are not yet supported by css-select\");\n                }\n                var name_1 = selector.name;\n                if (!options.xmlMode || options.lowerCaseTags) {\n                    name_1 = name_1.toLowerCase();\n                }\n                return function tag(elem) {\n                    return adapter.getName(elem) === name_1 && next(elem);\n                };\n            }\n        // Traversal\n        case css_what_1.SelectorType.Descendant:\n            {\n                if (options.cacheResults === false || typeof WeakSet === \"undefined\") {\n                    return function descendant(elem) {\n                        var current = elem;\n                        while(current = getElementParent(current, adapter)){\n                            if (next(current)) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    };\n                }\n                // @ts-expect-error `ElementNode` is not extending object\n                var isFalseCache_1 = new WeakSet();\n                return function cachedDescendant(elem) {\n                    var current = elem;\n                    while(current = getElementParent(current, adapter)){\n                        if (!isFalseCache_1.has(current)) {\n                            if (adapter.isTag(current) && next(current)) {\n                                return true;\n                            }\n                            isFalseCache_1.add(current);\n                        }\n                    }\n                    return false;\n                };\n            }\n        case \"_flexibleDescendant\":\n            {\n                // Include element itself, only used while querying an array\n                return function flexibleDescendant(elem) {\n                    var current = elem;\n                    do {\n                        if (next(current)) return true;\n                    }while (current = getElementParent(current, adapter));\n                    return false;\n                };\n            }\n        case css_what_1.SelectorType.Parent:\n            {\n                return function parent(elem) {\n                    return adapter.getChildren(elem).some(function(elem) {\n                        return adapter.isTag(elem) && next(elem);\n                    });\n                };\n            }\n        case css_what_1.SelectorType.Child:\n            {\n                return function child(elem) {\n                    var parent = adapter.getParent(elem);\n                    return parent != null && adapter.isTag(parent) && next(parent);\n                };\n            }\n        case css_what_1.SelectorType.Sibling:\n            {\n                return function sibling(elem) {\n                    var siblings = adapter.getSiblings(elem);\n                    for(var i = 0; i < siblings.length; i++){\n                        var currentSibling = siblings[i];\n                        if (equals(elem, currentSibling)) break;\n                        if (adapter.isTag(currentSibling) && next(currentSibling)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                };\n            }\n        case css_what_1.SelectorType.Adjacent:\n            {\n                if (adapter.prevElementSibling) {\n                    return function adjacent(elem) {\n                        var previous = adapter.prevElementSibling(elem);\n                        return previous != null && next(previous);\n                    };\n                }\n                return function adjacent(elem) {\n                    var siblings = adapter.getSiblings(elem);\n                    var lastElement;\n                    for(var i = 0; i < siblings.length; i++){\n                        var currentSibling = siblings[i];\n                        if (equals(elem, currentSibling)) break;\n                        if (adapter.isTag(currentSibling)) {\n                            lastElement = currentSibling;\n                        }\n                    }\n                    return !!lastElement && next(lastElement);\n                };\n            }\n        case css_what_1.SelectorType.Universal:\n            {\n                if (selector.namespace != null && selector.namespace !== \"*\") {\n                    throw new Error(\"Namespaced universal selectors are not yet supported by css-select\");\n                }\n                return next;\n            }\n    }\n}\nexports.compileGeneralSelector = compileGeneralSelector; //# sourceMappingURL=general.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/general.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/css-select/lib/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.aliases = exports.pseudos = exports.filters = exports.is = exports.selectOne = exports.selectAll = exports.prepareContext = exports._compileToken = exports._compileUnsafe = exports.compile = void 0;\nvar DomUtils = __importStar(__webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\"));\nvar boolbase_1 = __importDefault(__webpack_require__(/*! boolbase */ \"(app-pages-browser)/./node_modules/boolbase/index.js\"));\nvar compile_js_1 = __webpack_require__(/*! ./compile.js */ \"(app-pages-browser)/./node_modules/css-select/lib/compile.js\");\nvar subselects_js_1 = __webpack_require__(/*! ./pseudo-selectors/subselects.js */ \"(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/subselects.js\");\nvar defaultEquals = function(a, b) {\n    return a === b;\n};\nvar defaultOptions = {\n    adapter: DomUtils,\n    equals: defaultEquals\n};\nfunction convertOptionFormats(options) {\n    var _a, _b, _c, _d;\n    /*\n     * We force one format of options to the other one.\n     */ // @ts-expect-error Default options may have incompatible `Node` / `ElementNode`.\n    var opts = options !== null && options !== void 0 ? options : defaultOptions;\n    // @ts-expect-error Same as above.\n    (_a = opts.adapter) !== null && _a !== void 0 ? _a : opts.adapter = DomUtils;\n    // @ts-expect-error `equals` does not exist on `Options`\n    (_b = opts.equals) !== null && _b !== void 0 ? _b : opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals;\n    return opts;\n}\nfunction wrapCompile(func) {\n    return function addAdapter(selector, options, context) {\n        var opts = convertOptionFormats(options);\n        return func(selector, opts, context);\n    };\n}\n/**\n * Compiles the query, returns a function.\n */ exports.compile = wrapCompile(compile_js_1.compile);\nexports._compileUnsafe = wrapCompile(compile_js_1.compileUnsafe);\nexports._compileToken = wrapCompile(compile_js_1.compileToken);\nfunction getSelectorFunc(searchFunc) {\n    return function select(query, elements, options) {\n        var opts = convertOptionFormats(options);\n        if (typeof query !== \"function\") {\n            query = (0, compile_js_1.compileUnsafe)(query, opts, elements);\n        }\n        var filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);\n        return searchFunc(query, filteredElements, opts);\n    };\n}\nfunction prepareContext(elems, adapter, shouldTestNextSiblings) {\n    if (shouldTestNextSiblings === void 0) {\n        shouldTestNextSiblings = false;\n    }\n    /*\n     * Add siblings if the query requires them.\n     * See https://github.com/fb55/css-select/pull/43#issuecomment-225414692\n     */ if (shouldTestNextSiblings) {\n        elems = appendNextSiblings(elems, adapter);\n    }\n    return Array.isArray(elems) ? adapter.removeSubsets(elems) : adapter.getChildren(elems);\n}\nexports.prepareContext = prepareContext;\nfunction appendNextSiblings(elem, adapter) {\n    // Order matters because jQuery seems to check the children before the siblings\n    var elems = Array.isArray(elem) ? elem.slice(0) : [\n        elem\n    ];\n    var elemsLength = elems.length;\n    for(var i = 0; i < elemsLength; i++){\n        var nextSiblings = (0, subselects_js_1.getNextSiblings)(elems[i], adapter);\n        elems.push.apply(elems, nextSiblings);\n    }\n    return elems;\n}\n/**\n * @template Node The generic Node type for the DOM adapter being used.\n * @template ElementNode The Node type for elements for the DOM adapter being used.\n * @param elems Elements to query. If it is an element, its children will be queried..\n * @param query can be either a CSS selector string or a compiled query function.\n * @param [options] options for querying the document.\n * @see compile for supported selector queries.\n * @returns All matching elements.\n *\n */ exports.selectAll = getSelectorFunc(function(query, elems, options) {\n    return query === boolbase_1.default.falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query, elems);\n});\n/**\n * @template Node The generic Node type for the DOM adapter being used.\n * @template ElementNode The Node type for elements for the DOM adapter being used.\n * @param elems Elements to query. If it is an element, its children will be queried..\n * @param query can be either a CSS selector string or a compiled query function.\n * @param [options] options for querying the document.\n * @see compile for supported selector queries.\n * @returns the first match, or null if there was no match.\n */ exports.selectOne = getSelectorFunc(function(query, elems, options) {\n    return query === boolbase_1.default.falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query, elems);\n});\n/**\n * Tests whether or not an element is matched by query.\n *\n * @template Node The generic Node type for the DOM adapter being used.\n * @template ElementNode The Node type for elements for the DOM adapter being used.\n * @param elem The element to test if it matches the query.\n * @param query can be either a CSS selector string or a compiled query function.\n * @param [options] options for querying the document.\n * @see compile for supported selector queries.\n * @returns\n */ function is(elem, query, options) {\n    var opts = convertOptionFormats(options);\n    return (typeof query === \"function\" ? query : (0, compile_js_1.compile)(query, opts))(elem);\n}\nexports.is = is;\n/**\n * Alias for selectAll(query, elems, options).\n * @see [compile] for supported selector queries.\n */ exports[\"default\"] = exports.selectAll;\n// Export filters, pseudos and aliases to allow users to supply their own.\n/** @deprecated Use the `pseudos` option instead. */ var index_js_1 = __webpack_require__(/*! ./pseudo-selectors/index.js */ \"(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/index.js\");\nObject.defineProperty(exports, \"filters\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.filters;\n    }\n}));\nObject.defineProperty(exports, \"pseudos\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.pseudos;\n    }\n}));\nObject.defineProperty(exports, \"aliases\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_1.aliases;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/aliases.js":
/*!*****************************************************************!*\
  !*** ./node_modules/css-select/lib/pseudo-selectors/aliases.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.aliases = void 0;\n/**\n * Aliases are pseudos that are expressed as selectors.\n */ exports.aliases = {\n    // Links\n    \"any-link\": \":is(a, area, link)[href]\",\n    link: \":any-link:not(:visited)\",\n    // Forms\n    // https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements\n    disabled: \":is(\\n        :is(button, input, select, textarea, optgroup, option)[disabled],\\n        optgroup[disabled] > option,\\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\\n    )\",\n    enabled: \":not(:disabled)\",\n    checked: \":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)\",\n    required: \":is(input, select, textarea)[required]\",\n    optional: \":is(input, select, textarea):not([required])\",\n    // JQuery extensions\n    // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-selectedness\n    selected: \"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)\",\n    checkbox: \"[type=checkbox]\",\n    file: \"[type=file]\",\n    password: \"[type=password]\",\n    radio: \"[type=radio]\",\n    reset: \"[type=reset]\",\n    image: \"[type=image]\",\n    submit: \"[type=submit]\",\n    parent: \":not(:empty)\",\n    header: \":is(h1, h2, h3, h4, h5, h6)\",\n    button: \":is(button, input[type=button])\",\n    input: \":is(input, textarea, select, button)\",\n    text: \"input:is(:not([type!='']), [type=text])\"\n}; //# sourceMappingURL=aliases.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9wc2V1ZG8tc2VsZWN0b3JzL2FsaWFzZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBRyxLQUFLO0FBQ3ZCOztDQUVDLEdBQ0RBLGVBQWUsR0FBRztJQUNkLFFBQVE7SUFDUixZQUFZO0lBQ1pHLE1BQU07SUFDTixRQUFRO0lBQ1IsMEVBQTBFO0lBQzFFQyxVQUFVO0lBQ1ZDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVixvQkFBb0I7SUFDcEIsd0ZBQXdGO0lBQ3hGQyxVQUFVO0lBQ1ZDLFVBQVU7SUFDVkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDLE9BQU87SUFDUEMsT0FBTztJQUNQQyxPQUFPO0lBQ1BDLFFBQVE7SUFDUkMsUUFBUTtJQUNSQyxRQUFRO0lBQ1JDLFFBQVE7SUFDUkMsT0FBTztJQUNQQyxNQUFNO0FBQ1YsR0FDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Nzcy1zZWxlY3QvbGliL3BzZXVkby1zZWxlY3RvcnMvYWxpYXNlcy5qcz8zZGE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbGlhc2VzID0gdm9pZCAwO1xuLyoqXG4gKiBBbGlhc2VzIGFyZSBwc2V1ZG9zIHRoYXQgYXJlIGV4cHJlc3NlZCBhcyBzZWxlY3RvcnMuXG4gKi9cbmV4cG9ydHMuYWxpYXNlcyA9IHtcbiAgICAvLyBMaW5rc1xuICAgIFwiYW55LWxpbmtcIjogXCI6aXMoYSwgYXJlYSwgbGluaylbaHJlZl1cIixcbiAgICBsaW5rOiBcIjphbnktbGluazpub3QoOnZpc2l0ZWQpXCIsXG4gICAgLy8gRm9ybXNcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNkaXNhYmxlZC1lbGVtZW50c1xuICAgIGRpc2FibGVkOiBcIjppcyhcXG4gICAgICAgIDppcyhidXR0b24sIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBvcHRncm91cCwgb3B0aW9uKVtkaXNhYmxlZF0sXFxuICAgICAgICBvcHRncm91cFtkaXNhYmxlZF0gPiBvcHRpb24sXFxuICAgICAgICBmaWVsZHNldFtkaXNhYmxlZF06bm90KGZpZWxkc2V0W2Rpc2FibGVkXSBsZWdlbmQ6Zmlyc3Qtb2YtdHlwZSAqKVxcbiAgICApXCIsXG4gICAgZW5hYmxlZDogXCI6bm90KDpkaXNhYmxlZClcIixcbiAgICBjaGVja2VkOiBcIjppcyg6aXMoaW5wdXRbdHlwZT1yYWRpb10sIGlucHV0W3R5cGU9Y2hlY2tib3hdKVtjaGVja2VkXSwgb3B0aW9uOnNlbGVjdGVkKVwiLFxuICAgIHJlcXVpcmVkOiBcIjppcyhpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSlbcmVxdWlyZWRdXCIsXG4gICAgb3B0aW9uYWw6IFwiOmlzKGlucHV0LCBzZWxlY3QsIHRleHRhcmVhKTpub3QoW3JlcXVpcmVkXSlcIixcbiAgICAvLyBKUXVlcnkgZXh0ZW5zaW9uc1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tZWxlbWVudHMuaHRtbCNjb25jZXB0LW9wdGlvbi1zZWxlY3RlZG5lc3NcbiAgICBzZWxlY3RlZDogXCJvcHRpb246aXMoW3NlbGVjdGVkXSwgc2VsZWN0Om5vdChbbXVsdGlwbGVdKTpub3QoOmhhcyg+IG9wdGlvbltzZWxlY3RlZF0pKSA+IDpmaXJzdC1vZi10eXBlKVwiLFxuICAgIGNoZWNrYm94OiBcIlt0eXBlPWNoZWNrYm94XVwiLFxuICAgIGZpbGU6IFwiW3R5cGU9ZmlsZV1cIixcbiAgICBwYXNzd29yZDogXCJbdHlwZT1wYXNzd29yZF1cIixcbiAgICByYWRpbzogXCJbdHlwZT1yYWRpb11cIixcbiAgICByZXNldDogXCJbdHlwZT1yZXNldF1cIixcbiAgICBpbWFnZTogXCJbdHlwZT1pbWFnZV1cIixcbiAgICBzdWJtaXQ6IFwiW3R5cGU9c3VibWl0XVwiLFxuICAgIHBhcmVudDogXCI6bm90KDplbXB0eSlcIixcbiAgICBoZWFkZXI6IFwiOmlzKGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYpXCIsXG4gICAgYnV0dG9uOiBcIjppcyhidXR0b24sIGlucHV0W3R5cGU9YnV0dG9uXSlcIixcbiAgICBpbnB1dDogXCI6aXMoaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIGJ1dHRvbilcIixcbiAgICB0ZXh0OiBcImlucHV0OmlzKDpub3QoW3R5cGUhPScnXSksIFt0eXBlPXRleHRdKVwiLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFsaWFzZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYWxpYXNlcyIsImxpbmsiLCJkaXNhYmxlZCIsImVuYWJsZWQiLCJjaGVja2VkIiwicmVxdWlyZWQiLCJvcHRpb25hbCIsInNlbGVjdGVkIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJyYWRpbyIsInJlc2V0IiwiaW1hZ2UiLCJzdWJtaXQiLCJwYXJlbnQiLCJoZWFkZXIiLCJidXR0b24iLCJpbnB1dCIsInRleHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/aliases.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/filters.js":
/*!*****************************************************************!*\
  !*** ./node_modules/css-select/lib/pseudo-selectors/filters.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.filters = void 0;\nvar nth_check_1 = __importDefault(__webpack_require__(/*! nth-check */ \"(app-pages-browser)/./node_modules/nth-check/lib/index.js\"));\nvar boolbase_1 = __importDefault(__webpack_require__(/*! boolbase */ \"(app-pages-browser)/./node_modules/boolbase/index.js\"));\nfunction getChildFunc(next, adapter) {\n    return function(elem) {\n        var parent = adapter.getParent(elem);\n        return parent != null && adapter.isTag(parent) && next(elem);\n    };\n}\nexports.filters = {\n    contains: function(next, text, _a) {\n        var adapter = _a.adapter;\n        return function contains(elem) {\n            return next(elem) && adapter.getText(elem).includes(text);\n        };\n    },\n    icontains: function(next, text, _a) {\n        var adapter = _a.adapter;\n        var itext = text.toLowerCase();\n        return function icontains(elem) {\n            return next(elem) && adapter.getText(elem).toLowerCase().includes(itext);\n        };\n    },\n    // Location specific methods\n    \"nth-child\": function(next, rule, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var func = (0, nth_check_1.default)(rule);\n        if (func === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;\n        if (func === boolbase_1.default.trueFunc) return getChildFunc(next, adapter);\n        return function nthChild(elem) {\n            var siblings = adapter.getSiblings(elem);\n            var pos = 0;\n            for(var i = 0; i < siblings.length; i++){\n                if (equals(elem, siblings[i])) break;\n                if (adapter.isTag(siblings[i])) {\n                    pos++;\n                }\n            }\n            return func(pos) && next(elem);\n        };\n    },\n    \"nth-last-child\": function(next, rule, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var func = (0, nth_check_1.default)(rule);\n        if (func === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;\n        if (func === boolbase_1.default.trueFunc) return getChildFunc(next, adapter);\n        return function nthLastChild(elem) {\n            var siblings = adapter.getSiblings(elem);\n            var pos = 0;\n            for(var i = siblings.length - 1; i >= 0; i--){\n                if (equals(elem, siblings[i])) break;\n                if (adapter.isTag(siblings[i])) {\n                    pos++;\n                }\n            }\n            return func(pos) && next(elem);\n        };\n    },\n    \"nth-of-type\": function(next, rule, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var func = (0, nth_check_1.default)(rule);\n        if (func === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;\n        if (func === boolbase_1.default.trueFunc) return getChildFunc(next, adapter);\n        return function nthOfType(elem) {\n            var siblings = adapter.getSiblings(elem);\n            var pos = 0;\n            for(var i = 0; i < siblings.length; i++){\n                var currentSibling = siblings[i];\n                if (equals(elem, currentSibling)) break;\n                if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {\n                    pos++;\n                }\n            }\n            return func(pos) && next(elem);\n        };\n    },\n    \"nth-last-of-type\": function(next, rule, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var func = (0, nth_check_1.default)(rule);\n        if (func === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;\n        if (func === boolbase_1.default.trueFunc) return getChildFunc(next, adapter);\n        return function nthLastOfType(elem) {\n            var siblings = adapter.getSiblings(elem);\n            var pos = 0;\n            for(var i = siblings.length - 1; i >= 0; i--){\n                var currentSibling = siblings[i];\n                if (equals(elem, currentSibling)) break;\n                if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {\n                    pos++;\n                }\n            }\n            return func(pos) && next(elem);\n        };\n    },\n    // TODO determine the actual root element\n    root: function(next, _rule, _a) {\n        var adapter = _a.adapter;\n        return function(elem) {\n            var parent = adapter.getParent(elem);\n            return (parent == null || !adapter.isTag(parent)) && next(elem);\n        };\n    },\n    scope: function(next, rule, options, context) {\n        var equals = options.equals;\n        if (!context || context.length === 0) {\n            // Equivalent to :root\n            return exports.filters[\"root\"](next, rule, options);\n        }\n        if (context.length === 1) {\n            // NOTE: can't be unpacked, as :has uses this for side-effects\n            return function(elem) {\n                return equals(context[0], elem) && next(elem);\n            };\n        }\n        return function(elem) {\n            return context.includes(elem) && next(elem);\n        };\n    },\n    hover: dynamicStatePseudo(\"isHovered\"),\n    visited: dynamicStatePseudo(\"isVisited\"),\n    active: dynamicStatePseudo(\"isActive\")\n};\n/**\n * Dynamic state pseudos. These depend on optional Adapter methods.\n *\n * @param name The name of the adapter method to call.\n * @returns Pseudo for the `filters` object.\n */ function dynamicStatePseudo(name) {\n    return function dynamicPseudo(next, _rule, _a) {\n        var adapter = _a.adapter;\n        var func = adapter[name];\n        if (typeof func !== \"function\") {\n            return boolbase_1.default.falseFunc;\n        }\n        return function active(elem) {\n            return func(elem) && next(elem);\n        };\n    };\n} //# sourceMappingURL=filters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/filters.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/css-select/lib/pseudo-selectors/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.compilePseudoSelector = exports.aliases = exports.pseudos = exports.filters = void 0;\nvar css_what_1 = __webpack_require__(/*! css-what */ \"(app-pages-browser)/./node_modules/css-what/lib/es/index.js\");\nvar filters_js_1 = __webpack_require__(/*! ./filters.js */ \"(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/filters.js\");\nObject.defineProperty(exports, \"filters\", ({\n    enumerable: true,\n    get: function() {\n        return filters_js_1.filters;\n    }\n}));\nvar pseudos_js_1 = __webpack_require__(/*! ./pseudos.js */ \"(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/pseudos.js\");\nObject.defineProperty(exports, \"pseudos\", ({\n    enumerable: true,\n    get: function() {\n        return pseudos_js_1.pseudos;\n    }\n}));\nvar aliases_js_1 = __webpack_require__(/*! ./aliases.js */ \"(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/aliases.js\");\nObject.defineProperty(exports, \"aliases\", ({\n    enumerable: true,\n    get: function() {\n        return aliases_js_1.aliases;\n    }\n}));\nvar subselects_js_1 = __webpack_require__(/*! ./subselects.js */ \"(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/subselects.js\");\nfunction compilePseudoSelector(next, selector, options, context, compileToken) {\n    var _a;\n    var name = selector.name, data = selector.data;\n    if (Array.isArray(data)) {\n        if (!(name in subselects_js_1.subselects)) {\n            throw new Error(\"Unknown pseudo-class :\".concat(name, \"(\").concat(data, \")\"));\n        }\n        return subselects_js_1.subselects[name](next, data, options, context, compileToken);\n    }\n    var userPseudo = (_a = options.pseudos) === null || _a === void 0 ? void 0 : _a[name];\n    var stringPseudo = typeof userPseudo === \"string\" ? userPseudo : aliases_js_1.aliases[name];\n    if (typeof stringPseudo === \"string\") {\n        if (data != null) {\n            throw new Error(\"Pseudo \".concat(name, \" doesn't have any arguments\"));\n        }\n        // The alias has to be parsed here, to make sure options are respected.\n        var alias = (0, css_what_1.parse)(stringPseudo);\n        return subselects_js_1.subselects[\"is\"](next, alias, options, context, compileToken);\n    }\n    if (typeof userPseudo === \"function\") {\n        (0, pseudos_js_1.verifyPseudoArgs)(userPseudo, name, data, 1);\n        return function(elem) {\n            return userPseudo(elem, data) && next(elem);\n        };\n    }\n    if (name in filters_js_1.filters) {\n        return filters_js_1.filters[name](next, data, options, context);\n    }\n    if (name in pseudos_js_1.pseudos) {\n        var pseudo_1 = pseudos_js_1.pseudos[name];\n        (0, pseudos_js_1.verifyPseudoArgs)(pseudo_1, name, data, 2);\n        return function(elem) {\n            return pseudo_1(elem, options, data) && next(elem);\n        };\n    }\n    throw new Error(\"Unknown pseudo-class :\".concat(name));\n}\nexports.compilePseudoSelector = compilePseudoSelector; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9wc2V1ZG8tc2VsZWN0b3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCw2QkFBNkIsR0FBR0EsZUFBZSxHQUFHQSxlQUFlLEdBQUdBLGVBQWUsR0FBRyxLQUFLO0FBQzNGLElBQUlNLGFBQWFDLG1CQUFPQSxDQUFDLDZFQUFVO0FBQ25DLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLG1HQUFjO0FBQ3pDVCwyQ0FBMEM7SUFBRVcsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYUgsT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xILElBQUlNLGVBQWVKLG1CQUFPQSxDQUFDLG1HQUFjO0FBQ3pDVCwyQ0FBMEM7SUFBRVcsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0MsYUFBYVAsT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xILElBQUlRLGVBQWVMLG1CQUFPQSxDQUFDLG1HQUFjO0FBQ3pDVCwyQ0FBMEM7SUFBRVcsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsYUFBYVQsT0FBTztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2xILElBQUlVLGtCQUFrQk4sbUJBQU9BLENBQUMseUdBQWlCO0FBQy9DLFNBQVNMLHNCQUFzQlksSUFBSSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFQyxZQUFZO0lBQ3pFLElBQUlDO0lBQ0osSUFBSUMsT0FBT0wsU0FBU0ssSUFBSSxFQUFFQyxPQUFPTixTQUFTTSxJQUFJO0lBQzlDLElBQUlDLE1BQU1DLE9BQU8sQ0FBQ0YsT0FBTztRQUNyQixJQUFJLENBQUVELENBQUFBLFFBQVFQLGdCQUFnQlcsVUFBVSxHQUFHO1lBQ3ZDLE1BQU0sSUFBSUMsTUFBTSx5QkFBeUJDLE1BQU0sQ0FBQ04sTUFBTSxLQUFLTSxNQUFNLENBQUNMLE1BQU07UUFDNUU7UUFDQSxPQUFPUixnQkFBZ0JXLFVBQVUsQ0FBQ0osS0FBSyxDQUFDTixNQUFNTyxNQUFNTCxTQUFTQyxTQUFTQztJQUMxRTtJQUNBLElBQUlTLGFBQWEsQ0FBQ1IsS0FBS0gsUUFBUVosT0FBTyxNQUFNLFFBQVFlLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsRUFBRSxDQUFDQyxLQUFLO0lBQ3JGLElBQUlRLGVBQWUsT0FBT0QsZUFBZSxXQUFXQSxhQUFhZixhQUFhVCxPQUFPLENBQUNpQixLQUFLO0lBQzNGLElBQUksT0FBT1EsaUJBQWlCLFVBQVU7UUFDbEMsSUFBSVAsUUFBUSxNQUFNO1lBQ2QsTUFBTSxJQUFJSSxNQUFNLFVBQVVDLE1BQU0sQ0FBQ04sTUFBTTtRQUMzQztRQUNBLHVFQUF1RTtRQUN2RSxJQUFJUyxRQUFRLENBQUMsR0FBR3ZCLFdBQVd3QixLQUFLLEVBQUVGO1FBQ2xDLE9BQU9mLGdCQUFnQlcsVUFBVSxDQUFDLEtBQUssQ0FBQ1YsTUFBTWUsT0FBT2IsU0FBU0MsU0FBU0M7SUFDM0U7SUFDQSxJQUFJLE9BQU9TLGVBQWUsWUFBWTtRQUNqQyxJQUFHaEIsYUFBYW9CLGdCQUFnQixFQUFFSixZQUFZUCxNQUFNQyxNQUFNO1FBQzNELE9BQU8sU0FBVVcsSUFBSTtZQUFJLE9BQU9MLFdBQVdLLE1BQU1YLFNBQVNQLEtBQUtrQjtRQUFPO0lBQzFFO0lBQ0EsSUFBSVosUUFBUVosYUFBYUgsT0FBTyxFQUFFO1FBQzlCLE9BQU9HLGFBQWFILE9BQU8sQ0FBQ2UsS0FBSyxDQUFDTixNQUFNTyxNQUFNTCxTQUFTQztJQUMzRDtJQUNBLElBQUlHLFFBQVFULGFBQWFQLE9BQU8sRUFBRTtRQUM5QixJQUFJNkIsV0FBV3RCLGFBQWFQLE9BQU8sQ0FBQ2dCLEtBQUs7UUFDeEMsSUFBR1QsYUFBYW9CLGdCQUFnQixFQUFFRSxVQUFVYixNQUFNQyxNQUFNO1FBQ3pELE9BQU8sU0FBVVcsSUFBSTtZQUFJLE9BQU9DLFNBQVNELE1BQU1oQixTQUFTSyxTQUFTUCxLQUFLa0I7UUFBTztJQUNqRjtJQUNBLE1BQU0sSUFBSVAsTUFBTSx5QkFBeUJDLE1BQU0sQ0FBQ047QUFDcEQ7QUFDQXBCLDZCQUE2QixHQUFHRSx1QkFDaEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9wc2V1ZG8tc2VsZWN0b3JzL2luZGV4LmpzPzAyNjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXBpbGVQc2V1ZG9TZWxlY3RvciA9IGV4cG9ydHMuYWxpYXNlcyA9IGV4cG9ydHMucHNldWRvcyA9IGV4cG9ydHMuZmlsdGVycyA9IHZvaWQgMDtcbnZhciBjc3Nfd2hhdF8xID0gcmVxdWlyZShcImNzcy13aGF0XCIpO1xudmFyIGZpbHRlcnNfanNfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlcnMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaWx0ZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmaWx0ZXJzX2pzXzEuZmlsdGVyczsgfSB9KTtcbnZhciBwc2V1ZG9zX2pzXzEgPSByZXF1aXJlKFwiLi9wc2V1ZG9zLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHNldWRvc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHNldWRvc19qc18xLnBzZXVkb3M7IH0gfSk7XG52YXIgYWxpYXNlc19qc18xID0gcmVxdWlyZShcIi4vYWxpYXNlcy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFsaWFzZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFsaWFzZXNfanNfMS5hbGlhc2VzOyB9IH0pO1xudmFyIHN1YnNlbGVjdHNfanNfMSA9IHJlcXVpcmUoXCIuL3N1YnNlbGVjdHMuanNcIik7XG5mdW5jdGlvbiBjb21waWxlUHNldWRvU2VsZWN0b3IobmV4dCwgc2VsZWN0b3IsIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbikge1xuICAgIHZhciBfYTtcbiAgICB2YXIgbmFtZSA9IHNlbGVjdG9yLm5hbWUsIGRhdGEgPSBzZWxlY3Rvci5kYXRhO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGlmICghKG5hbWUgaW4gc3Vic2VsZWN0c19qc18xLnN1YnNlbGVjdHMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHBzZXVkby1jbGFzcyA6XCIuY29uY2F0KG5hbWUsIFwiKFwiKS5jb25jYXQoZGF0YSwgXCIpXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2VsZWN0c19qc18xLnN1YnNlbGVjdHNbbmFtZV0obmV4dCwgZGF0YSwgb3B0aW9ucywgY29udGV4dCwgY29tcGlsZVRva2VuKTtcbiAgICB9XG4gICAgdmFyIHVzZXJQc2V1ZG8gPSAoX2EgPSBvcHRpb25zLnBzZXVkb3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtuYW1lXTtcbiAgICB2YXIgc3RyaW5nUHNldWRvID0gdHlwZW9mIHVzZXJQc2V1ZG8gPT09IFwic3RyaW5nXCIgPyB1c2VyUHNldWRvIDogYWxpYXNlc19qc18xLmFsaWFzZXNbbmFtZV07XG4gICAgaWYgKHR5cGVvZiBzdHJpbmdQc2V1ZG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHNldWRvIFwiLmNvbmNhdChuYW1lLCBcIiBkb2Vzbid0IGhhdmUgYW55IGFyZ3VtZW50c1wiKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGFsaWFzIGhhcyB0byBiZSBwYXJzZWQgaGVyZSwgdG8gbWFrZSBzdXJlIG9wdGlvbnMgYXJlIHJlc3BlY3RlZC5cbiAgICAgICAgdmFyIGFsaWFzID0gKDAsIGNzc193aGF0XzEucGFyc2UpKHN0cmluZ1BzZXVkbyk7XG4gICAgICAgIHJldHVybiBzdWJzZWxlY3RzX2pzXzEuc3Vic2VsZWN0c1tcImlzXCJdKG5leHQsIGFsaWFzLCBvcHRpb25zLCBjb250ZXh0LCBjb21waWxlVG9rZW4pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHVzZXJQc2V1ZG8gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAoMCwgcHNldWRvc19qc18xLnZlcmlmeVBzZXVkb0FyZ3MpKHVzZXJQc2V1ZG8sIG5hbWUsIGRhdGEsIDEpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHVzZXJQc2V1ZG8oZWxlbSwgZGF0YSkgJiYgbmV4dChlbGVtKTsgfTtcbiAgICB9XG4gICAgaWYgKG5hbWUgaW4gZmlsdGVyc19qc18xLmZpbHRlcnMpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlcnNfanNfMS5maWx0ZXJzW25hbWVdKG5leHQsIGRhdGEsIG9wdGlvbnMsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAobmFtZSBpbiBwc2V1ZG9zX2pzXzEucHNldWRvcykge1xuICAgICAgICB2YXIgcHNldWRvXzEgPSBwc2V1ZG9zX2pzXzEucHNldWRvc1tuYW1lXTtcbiAgICAgICAgKDAsIHBzZXVkb3NfanNfMS52ZXJpZnlQc2V1ZG9BcmdzKShwc2V1ZG9fMSwgbmFtZSwgZGF0YSwgMik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gcHNldWRvXzEoZWxlbSwgb3B0aW9ucywgZGF0YSkgJiYgbmV4dChlbGVtKTsgfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBwc2V1ZG8tY2xhc3MgOlwiLmNvbmNhdChuYW1lKSk7XG59XG5leHBvcnRzLmNvbXBpbGVQc2V1ZG9TZWxlY3RvciA9IGNvbXBpbGVQc2V1ZG9TZWxlY3Rvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbXBpbGVQc2V1ZG9TZWxlY3RvciIsImFsaWFzZXMiLCJwc2V1ZG9zIiwiZmlsdGVycyIsImNzc193aGF0XzEiLCJyZXF1aXJlIiwiZmlsdGVyc19qc18xIiwiZW51bWVyYWJsZSIsImdldCIsInBzZXVkb3NfanNfMSIsImFsaWFzZXNfanNfMSIsInN1YnNlbGVjdHNfanNfMSIsIm5leHQiLCJzZWxlY3RvciIsIm9wdGlvbnMiLCJjb250ZXh0IiwiY29tcGlsZVRva2VuIiwiX2EiLCJuYW1lIiwiZGF0YSIsIkFycmF5IiwiaXNBcnJheSIsInN1YnNlbGVjdHMiLCJFcnJvciIsImNvbmNhdCIsInVzZXJQc2V1ZG8iLCJzdHJpbmdQc2V1ZG8iLCJhbGlhcyIsInBhcnNlIiwidmVyaWZ5UHNldWRvQXJncyIsImVsZW0iLCJwc2V1ZG9fMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/pseudos.js":
/*!*****************************************************************!*\
  !*** ./node_modules/css-select/lib/pseudo-selectors/pseudos.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.verifyPseudoArgs = exports.pseudos = void 0;\n// While filters are precompiled, pseudos get called when they are needed\nexports.pseudos = {\n    empty: function(elem, _a) {\n        var adapter = _a.adapter;\n        return !adapter.getChildren(elem).some(function(elem) {\n            // FIXME: `getText` call is potentially expensive.\n            return adapter.isTag(elem) || adapter.getText(elem) !== \"\";\n        });\n    },\n    \"first-child\": function(elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        if (adapter.prevElementSibling) {\n            return adapter.prevElementSibling(elem) == null;\n        }\n        var firstChild = adapter.getSiblings(elem).find(function(elem) {\n            return adapter.isTag(elem);\n        });\n        return firstChild != null && equals(elem, firstChild);\n    },\n    \"last-child\": function(elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var siblings = adapter.getSiblings(elem);\n        for(var i = siblings.length - 1; i >= 0; i--){\n            if (equals(elem, siblings[i])) return true;\n            if (adapter.isTag(siblings[i])) break;\n        }\n        return false;\n    },\n    \"first-of-type\": function(elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var siblings = adapter.getSiblings(elem);\n        var elemName = adapter.getName(elem);\n        for(var i = 0; i < siblings.length; i++){\n            var currentSibling = siblings[i];\n            if (equals(elem, currentSibling)) return true;\n            if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {\n                break;\n            }\n        }\n        return false;\n    },\n    \"last-of-type\": function(elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var siblings = adapter.getSiblings(elem);\n        var elemName = adapter.getName(elem);\n        for(var i = siblings.length - 1; i >= 0; i--){\n            var currentSibling = siblings[i];\n            if (equals(elem, currentSibling)) return true;\n            if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {\n                break;\n            }\n        }\n        return false;\n    },\n    \"only-of-type\": function(elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        var elemName = adapter.getName(elem);\n        return adapter.getSiblings(elem).every(function(sibling) {\n            return equals(elem, sibling) || !adapter.isTag(sibling) || adapter.getName(sibling) !== elemName;\n        });\n    },\n    \"only-child\": function(elem, _a) {\n        var adapter = _a.adapter, equals = _a.equals;\n        return adapter.getSiblings(elem).every(function(sibling) {\n            return equals(elem, sibling) || !adapter.isTag(sibling);\n        });\n    }\n};\nfunction verifyPseudoArgs(func, name, subselect, argIndex) {\n    if (subselect === null) {\n        if (func.length > argIndex) {\n            throw new Error(\"Pseudo-class :\".concat(name, \" requires an argument\"));\n        }\n    } else if (func.length === argIndex) {\n        throw new Error(\"Pseudo-class :\".concat(name, \" doesn't have any arguments\"));\n    }\n}\nexports.verifyPseudoArgs = verifyPseudoArgs; //# sourceMappingURL=pseudos.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/pseudos.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/subselects.js":
/*!********************************************************************!*\
  !*** ./node_modules/css-select/lib/pseudo-selectors/subselects.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __spreadArray = (void 0) && (void 0).__spreadArray || function(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.subselects = exports.getNextSiblings = exports.ensureIsTag = exports.PLACEHOLDER_ELEMENT = void 0;\nvar boolbase_1 = __importDefault(__webpack_require__(/*! boolbase */ \"(app-pages-browser)/./node_modules/boolbase/index.js\"));\nvar sort_js_1 = __webpack_require__(/*! ../sort.js */ \"(app-pages-browser)/./node_modules/css-select/lib/sort.js\");\n/** Used as a placeholder for :has. Will be replaced with the actual element. */ exports.PLACEHOLDER_ELEMENT = {};\nfunction ensureIsTag(next, adapter) {\n    if (next === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;\n    return function(elem) {\n        return adapter.isTag(elem) && next(elem);\n    };\n}\nexports.ensureIsTag = ensureIsTag;\nfunction getNextSiblings(elem, adapter) {\n    var siblings = adapter.getSiblings(elem);\n    if (siblings.length <= 1) return [];\n    var elemIndex = siblings.indexOf(elem);\n    if (elemIndex < 0 || elemIndex === siblings.length - 1) return [];\n    return siblings.slice(elemIndex + 1).filter(adapter.isTag);\n}\nexports.getNextSiblings = getNextSiblings;\nfunction copyOptions(options) {\n    // Not copied: context, rootFunc\n    return {\n        xmlMode: !!options.xmlMode,\n        lowerCaseAttributeNames: !!options.lowerCaseAttributeNames,\n        lowerCaseTags: !!options.lowerCaseTags,\n        quirksMode: !!options.quirksMode,\n        cacheResults: !!options.cacheResults,\n        pseudos: options.pseudos,\n        adapter: options.adapter,\n        equals: options.equals\n    };\n}\nvar is = function(next, token, options, context, compileToken) {\n    var func = compileToken(token, copyOptions(options), context);\n    return func === boolbase_1.default.trueFunc ? next : func === boolbase_1.default.falseFunc ? boolbase_1.default.falseFunc : function(elem) {\n        return func(elem) && next(elem);\n    };\n};\n/*\n * :not, :has, :is, :matches and :where have to compile selectors\n * doing this in src/pseudos.ts would lead to circular dependencies,\n * so we add them here\n */ exports.subselects = {\n    is: is,\n    /**\n     * `:matches` and `:where` are aliases for `:is`.\n     */ matches: is,\n    where: is,\n    not: function(next, token, options, context, compileToken) {\n        var func = compileToken(token, copyOptions(options), context);\n        return func === boolbase_1.default.falseFunc ? next : func === boolbase_1.default.trueFunc ? boolbase_1.default.falseFunc : function(elem) {\n            return !func(elem) && next(elem);\n        };\n    },\n    has: function(next, subselect, options, _context, compileToken) {\n        var adapter = options.adapter;\n        var opts = copyOptions(options);\n        opts.relativeSelector = true;\n        var context = subselect.some(function(s) {\n            return s.some(sort_js_1.isTraversal);\n        }) ? [\n            exports.PLACEHOLDER_ELEMENT\n        ] : undefined;\n        var compiled = compileToken(subselect, opts, context);\n        if (compiled === boolbase_1.default.falseFunc) return boolbase_1.default.falseFunc;\n        var hasElement = ensureIsTag(compiled, adapter);\n        // If `compiled` is `trueFunc`, we can skip this.\n        if (context && compiled !== boolbase_1.default.trueFunc) {\n            /*\n             * `shouldTestNextSiblings` will only be true if the query starts with\n             * a traversal (sibling or adjacent). That means we will always have a context.\n             */ var _a = compiled.shouldTestNextSiblings, shouldTestNextSiblings_1 = _a === void 0 ? false : _a;\n            return function(elem) {\n                if (!next(elem)) return false;\n                context[0] = elem;\n                var childs = adapter.getChildren(elem);\n                var nextElements = shouldTestNextSiblings_1 ? __spreadArray(__spreadArray([], childs, true), getNextSiblings(elem, adapter), true) : childs;\n                return adapter.existsOne(hasElement, nextElements);\n            };\n        }\n        return function(elem) {\n            return next(elem) && adapter.existsOne(hasElement, adapter.getChildren(elem));\n        };\n    }\n}; //# sourceMappingURL=subselects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/pseudo-selectors/subselects.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-select/lib/sort.js":
/*!*********************************************!*\
  !*** ./node_modules/css-select/lib/sort.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isTraversal = void 0;\nvar css_what_1 = __webpack_require__(/*! css-what */ \"(app-pages-browser)/./node_modules/css-what/lib/es/index.js\");\nvar procedure = new Map([\n    [\n        css_what_1.SelectorType.Universal,\n        50\n    ],\n    [\n        css_what_1.SelectorType.Tag,\n        30\n    ],\n    [\n        css_what_1.SelectorType.Attribute,\n        1\n    ],\n    [\n        css_what_1.SelectorType.Pseudo,\n        0\n    ]\n]);\nfunction isTraversal(token) {\n    return !procedure.has(token.type);\n}\nexports.isTraversal = isTraversal;\nvar attributes = new Map([\n    [\n        css_what_1.AttributeAction.Exists,\n        10\n    ],\n    [\n        css_what_1.AttributeAction.Equals,\n        8\n    ],\n    [\n        css_what_1.AttributeAction.Not,\n        7\n    ],\n    [\n        css_what_1.AttributeAction.Start,\n        6\n    ],\n    [\n        css_what_1.AttributeAction.End,\n        6\n    ],\n    [\n        css_what_1.AttributeAction.Any,\n        5\n    ]\n]);\n/**\n * Sort the parts of the passed selector,\n * as there is potential for optimization\n * (some types of selectors are faster than others)\n *\n * @param arr Selector to sort\n */ function sortByProcedure(arr) {\n    var procs = arr.map(getProcedure);\n    for(var i = 1; i < arr.length; i++){\n        var procNew = procs[i];\n        if (procNew < 0) continue;\n        for(var j = i - 1; j >= 0 && procNew < procs[j]; j--){\n            var token = arr[j + 1];\n            arr[j + 1] = arr[j];\n            arr[j] = token;\n            procs[j + 1] = procs[j];\n            procs[j] = procNew;\n        }\n    }\n}\nexports[\"default\"] = sortByProcedure;\nfunction getProcedure(token) {\n    var _a, _b;\n    var proc = (_a = procedure.get(token.type)) !== null && _a !== void 0 ? _a : -1;\n    if (token.type === css_what_1.SelectorType.Attribute) {\n        proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;\n        if (token.action === css_what_1.AttributeAction.Equals && token.name === \"id\") {\n            // Prefer ID selectors (eg. #ID)\n            proc = 9;\n        }\n        if (token.ignoreCase) {\n            /*\n             * IgnoreCase adds some overhead, prefer \"normal\" token\n             * this is a binary operation, to ensure it's still an int\n             */ proc >>= 1;\n        }\n    } else if (token.type === css_what_1.SelectorType.Pseudo) {\n        if (!token.data) {\n            proc = 3;\n        } else if (token.name === \"has\" || token.name === \"contains\") {\n            proc = 0; // Expensive in any case\n        } else if (Array.isArray(token.data)) {\n            // Eg. :matches, :not\n            proc = Math.min.apply(Math, token.data.map(function(d) {\n                return Math.min.apply(Math, d.map(getProcedure));\n            }));\n            // If we have traversals, try to avoid executing this selector\n            if (proc < 0) {\n                proc = 0;\n            }\n        } else {\n            proc = 2;\n        }\n    }\n    return proc;\n} //# sourceMappingURL=sort.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9zb3J0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLElBQUlHLGFBQWFDLG1CQUFPQSxDQUFDLDZFQUFVO0FBQ25DLElBQUlDLFlBQVksSUFBSUMsSUFBSTtJQUNwQjtRQUFDSCxXQUFXSSxZQUFZLENBQUNDLFNBQVM7UUFBRTtLQUFHO0lBQ3ZDO1FBQUNMLFdBQVdJLFlBQVksQ0FBQ0UsR0FBRztRQUFFO0tBQUc7SUFDakM7UUFBQ04sV0FBV0ksWUFBWSxDQUFDRyxTQUFTO1FBQUU7S0FBRTtJQUN0QztRQUFDUCxXQUFXSSxZQUFZLENBQUNJLE1BQU07UUFBRTtLQUFFO0NBQ3RDO0FBQ0QsU0FBU1QsWUFBWVUsS0FBSztJQUN0QixPQUFPLENBQUNQLFVBQVVRLEdBQUcsQ0FBQ0QsTUFBTUUsSUFBSTtBQUNwQztBQUNBZCxtQkFBbUIsR0FBR0U7QUFDdEIsSUFBSWEsYUFBYSxJQUFJVCxJQUFJO0lBQ3JCO1FBQUNILFdBQVdhLGVBQWUsQ0FBQ0MsTUFBTTtRQUFFO0tBQUc7SUFDdkM7UUFBQ2QsV0FBV2EsZUFBZSxDQUFDRSxNQUFNO1FBQUU7S0FBRTtJQUN0QztRQUFDZixXQUFXYSxlQUFlLENBQUNHLEdBQUc7UUFBRTtLQUFFO0lBQ25DO1FBQUNoQixXQUFXYSxlQUFlLENBQUNJLEtBQUs7UUFBRTtLQUFFO0lBQ3JDO1FBQUNqQixXQUFXYSxlQUFlLENBQUNLLEdBQUc7UUFBRTtLQUFFO0lBQ25DO1FBQUNsQixXQUFXYSxlQUFlLENBQUNNLEdBQUc7UUFBRTtLQUFFO0NBQ3RDO0FBQ0Q7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsZ0JBQWdCQyxHQUFHO0lBQ3hCLElBQUlDLFFBQVFELElBQUlFLEdBQUcsQ0FBQ0M7SUFDcEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLElBQUlLLE1BQU0sRUFBRUQsSUFBSztRQUNqQyxJQUFJRSxVQUFVTCxLQUFLLENBQUNHLEVBQUU7UUFDdEIsSUFBSUUsVUFBVSxHQUNWO1FBQ0osSUFBSyxJQUFJQyxJQUFJSCxJQUFJLEdBQUdHLEtBQUssS0FBS0QsVUFBVUwsS0FBSyxDQUFDTSxFQUFFLEVBQUVBLElBQUs7WUFDbkQsSUFBSW5CLFFBQVFZLEdBQUcsQ0FBQ08sSUFBSSxFQUFFO1lBQ3RCUCxHQUFHLENBQUNPLElBQUksRUFBRSxHQUFHUCxHQUFHLENBQUNPLEVBQUU7WUFDbkJQLEdBQUcsQ0FBQ08sRUFBRSxHQUFHbkI7WUFDVGEsS0FBSyxDQUFDTSxJQUFJLEVBQUUsR0FBR04sS0FBSyxDQUFDTSxFQUFFO1lBQ3ZCTixLQUFLLENBQUNNLEVBQUUsR0FBR0Q7UUFDZjtJQUNKO0FBQ0o7QUFDQTlCLGtCQUFlLEdBQUd1QjtBQUNsQixTQUFTSSxhQUFhZixLQUFLO0lBQ3ZCLElBQUlxQixJQUFJQztJQUNSLElBQUlDLE9BQU8sQ0FBQ0YsS0FBSzVCLFVBQVUrQixHQUFHLENBQUN4QixNQUFNRSxJQUFJLE9BQU8sUUFBUW1CLE9BQU8sS0FBSyxJQUFJQSxLQUFLLENBQUM7SUFDOUUsSUFBSXJCLE1BQU1FLElBQUksS0FBS1gsV0FBV0ksWUFBWSxDQUFDRyxTQUFTLEVBQUU7UUFDbER5QixPQUFPLENBQUNELEtBQUtuQixXQUFXcUIsR0FBRyxDQUFDeEIsTUFBTXlCLE1BQU0sT0FBTyxRQUFRSCxPQUFPLEtBQUssSUFBSUEsS0FBSztRQUM1RSxJQUFJdEIsTUFBTXlCLE1BQU0sS0FBS2xDLFdBQVdhLGVBQWUsQ0FBQ0UsTUFBTSxJQUFJTixNQUFNMEIsSUFBSSxLQUFLLE1BQU07WUFDM0UsZ0NBQWdDO1lBQ2hDSCxPQUFPO1FBQ1g7UUFDQSxJQUFJdkIsTUFBTTJCLFVBQVUsRUFBRTtZQUNsQjs7O2FBR0MsR0FDREosU0FBUztRQUNiO0lBQ0osT0FDSyxJQUFJdkIsTUFBTUUsSUFBSSxLQUFLWCxXQUFXSSxZQUFZLENBQUNJLE1BQU0sRUFBRTtRQUNwRCxJQUFJLENBQUNDLE1BQU00QixJQUFJLEVBQUU7WUFDYkwsT0FBTztRQUNYLE9BQ0ssSUFBSXZCLE1BQU0wQixJQUFJLEtBQUssU0FBUzFCLE1BQU0wQixJQUFJLEtBQUssWUFBWTtZQUN4REgsT0FBTyxHQUFHLHdCQUF3QjtRQUN0QyxPQUNLLElBQUlNLE1BQU1DLE9BQU8sQ0FBQzlCLE1BQU00QixJQUFJLEdBQUc7WUFDaEMscUJBQXFCO1lBQ3JCTCxPQUFPUSxLQUFLQyxHQUFHLENBQUNDLEtBQUssQ0FBQ0YsTUFBTS9CLE1BQU00QixJQUFJLENBQUNkLEdBQUcsQ0FBQyxTQUFVb0IsQ0FBQztnQkFBSSxPQUFPSCxLQUFLQyxHQUFHLENBQUNDLEtBQUssQ0FBQ0YsTUFBTUcsRUFBRXBCLEdBQUcsQ0FBQ0M7WUFBZ0I7WUFDNUcsOERBQThEO1lBQzlELElBQUlRLE9BQU8sR0FBRztnQkFDVkEsT0FBTztZQUNYO1FBQ0osT0FDSztZQUNEQSxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU9BO0FBQ1gsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Nzcy1zZWxlY3QvbGliL3NvcnQuanM/ODUwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNUcmF2ZXJzYWwgPSB2b2lkIDA7XG52YXIgY3NzX3doYXRfMSA9IHJlcXVpcmUoXCJjc3Mtd2hhdFwiKTtcbnZhciBwcm9jZWR1cmUgPSBuZXcgTWFwKFtcbiAgICBbY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuVW5pdmVyc2FsLCA1MF0sXG4gICAgW2Nzc193aGF0XzEuU2VsZWN0b3JUeXBlLlRhZywgMzBdLFxuICAgIFtjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5BdHRyaWJ1dGUsIDFdLFxuICAgIFtjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5Qc2V1ZG8sIDBdLFxuXSk7XG5mdW5jdGlvbiBpc1RyYXZlcnNhbCh0b2tlbikge1xuICAgIHJldHVybiAhcHJvY2VkdXJlLmhhcyh0b2tlbi50eXBlKTtcbn1cbmV4cG9ydHMuaXNUcmF2ZXJzYWwgPSBpc1RyYXZlcnNhbDtcbnZhciBhdHRyaWJ1dGVzID0gbmV3IE1hcChbXG4gICAgW2Nzc193aGF0XzEuQXR0cmlidXRlQWN0aW9uLkV4aXN0cywgMTBdLFxuICAgIFtjc3Nfd2hhdF8xLkF0dHJpYnV0ZUFjdGlvbi5FcXVhbHMsIDhdLFxuICAgIFtjc3Nfd2hhdF8xLkF0dHJpYnV0ZUFjdGlvbi5Ob3QsIDddLFxuICAgIFtjc3Nfd2hhdF8xLkF0dHJpYnV0ZUFjdGlvbi5TdGFydCwgNl0sXG4gICAgW2Nzc193aGF0XzEuQXR0cmlidXRlQWN0aW9uLkVuZCwgNl0sXG4gICAgW2Nzc193aGF0XzEuQXR0cmlidXRlQWN0aW9uLkFueSwgNV0sXG5dKTtcbi8qKlxuICogU29ydCB0aGUgcGFydHMgb2YgdGhlIHBhc3NlZCBzZWxlY3RvcixcbiAqIGFzIHRoZXJlIGlzIHBvdGVudGlhbCBmb3Igb3B0aW1pemF0aW9uXG4gKiAoc29tZSB0eXBlcyBvZiBzZWxlY3RvcnMgYXJlIGZhc3RlciB0aGFuIG90aGVycylcbiAqXG4gKiBAcGFyYW0gYXJyIFNlbGVjdG9yIHRvIHNvcnRcbiAqL1xuZnVuY3Rpb24gc29ydEJ5UHJvY2VkdXJlKGFycikge1xuICAgIHZhciBwcm9jcyA9IGFyci5tYXAoZ2V0UHJvY2VkdXJlKTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcHJvY05ldyA9IHByb2NzW2ldO1xuICAgICAgICBpZiAocHJvY05ldyA8IDApXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgZm9yICh2YXIgaiA9IGkgLSAxOyBqID49IDAgJiYgcHJvY05ldyA8IHByb2NzW2pdOyBqLS0pIHtcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IGFycltqICsgMV07XG4gICAgICAgICAgICBhcnJbaiArIDFdID0gYXJyW2pdO1xuICAgICAgICAgICAgYXJyW2pdID0gdG9rZW47XG4gICAgICAgICAgICBwcm9jc1tqICsgMV0gPSBwcm9jc1tqXTtcbiAgICAgICAgICAgIHByb2NzW2pdID0gcHJvY05ldztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHNvcnRCeVByb2NlZHVyZTtcbmZ1bmN0aW9uIGdldFByb2NlZHVyZSh0b2tlbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIHByb2MgPSAoX2EgPSBwcm9jZWR1cmUuZ2V0KHRva2VuLnR5cGUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAtMTtcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuQXR0cmlidXRlKSB7XG4gICAgICAgIHByb2MgPSAoX2IgPSBhdHRyaWJ1dGVzLmdldCh0b2tlbi5hY3Rpb24pKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiA0O1xuICAgICAgICBpZiAodG9rZW4uYWN0aW9uID09PSBjc3Nfd2hhdF8xLkF0dHJpYnV0ZUFjdGlvbi5FcXVhbHMgJiYgdG9rZW4ubmFtZSA9PT0gXCJpZFwiKSB7XG4gICAgICAgICAgICAvLyBQcmVmZXIgSUQgc2VsZWN0b3JzIChlZy4gI0lEKVxuICAgICAgICAgICAgcHJvYyA9IDk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBJZ25vcmVDYXNlIGFkZHMgc29tZSBvdmVyaGVhZCwgcHJlZmVyIFwibm9ybWFsXCIgdG9rZW5cbiAgICAgICAgICAgICAqIHRoaXMgaXMgYSBiaW5hcnkgb3BlcmF0aW9uLCB0byBlbnN1cmUgaXQncyBzdGlsbCBhbiBpbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJvYyA+Pj0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSBjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5Qc2V1ZG8pIHtcbiAgICAgICAgaWYgKCF0b2tlbi5kYXRhKSB7XG4gICAgICAgICAgICBwcm9jID0gMztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0b2tlbi5uYW1lID09PSBcImhhc1wiIHx8IHRva2VuLm5hbWUgPT09IFwiY29udGFpbnNcIikge1xuICAgICAgICAgICAgcHJvYyA9IDA7IC8vIEV4cGVuc2l2ZSBpbiBhbnkgY2FzZVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodG9rZW4uZGF0YSkpIHtcbiAgICAgICAgICAgIC8vIEVnLiA6bWF0Y2hlcywgOm5vdFxuICAgICAgICAgICAgcHJvYyA9IE1hdGgubWluLmFwcGx5KE1hdGgsIHRva2VuLmRhdGEubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCBkLm1hcChnZXRQcm9jZWR1cmUpKTsgfSkpO1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSB0cmF2ZXJzYWxzLCB0cnkgdG8gYXZvaWQgZXhlY3V0aW5nIHRoaXMgc2VsZWN0b3JcbiAgICAgICAgICAgIGlmIChwcm9jIDwgMCkge1xuICAgICAgICAgICAgICAgIHByb2MgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJvYyA9IDI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb2M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzVHJhdmVyc2FsIiwiY3NzX3doYXRfMSIsInJlcXVpcmUiLCJwcm9jZWR1cmUiLCJNYXAiLCJTZWxlY3RvclR5cGUiLCJVbml2ZXJzYWwiLCJUYWciLCJBdHRyaWJ1dGUiLCJQc2V1ZG8iLCJ0b2tlbiIsImhhcyIsInR5cGUiLCJhdHRyaWJ1dGVzIiwiQXR0cmlidXRlQWN0aW9uIiwiRXhpc3RzIiwiRXF1YWxzIiwiTm90IiwiU3RhcnQiLCJFbmQiLCJBbnkiLCJzb3J0QnlQcm9jZWR1cmUiLCJhcnIiLCJwcm9jcyIsIm1hcCIsImdldFByb2NlZHVyZSIsImkiLCJsZW5ndGgiLCJwcm9jTmV3IiwiaiIsImRlZmF1bHQiLCJfYSIsIl9iIiwicHJvYyIsImdldCIsImFjdGlvbiIsIm5hbWUiLCJpZ25vcmVDYXNlIiwiZGF0YSIsIkFycmF5IiwiaXNBcnJheSIsIk1hdGgiLCJtaW4iLCJhcHBseSIsImQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-select/lib/sort.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-what/lib/es/index.js":
/*!***********************************************!*\
  !*** ./node_modules/css-what/lib/es/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AttributeAction: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction; },\n/* harmony export */   IgnoreCaseMode: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.IgnoreCaseMode; },\n/* harmony export */   SelectorType: function() { return /* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType; },\n/* harmony export */   isTraversal: function() { return /* reexport safe */ _parse__WEBPACK_IMPORTED_MODULE_1__.isTraversal; },\n/* harmony export */   parse: function() { return /* reexport safe */ _parse__WEBPACK_IMPORTED_MODULE_1__.parse; },\n/* harmony export */   stringify: function() { return /* reexport safe */ _stringify__WEBPACK_IMPORTED_MODULE_2__.stringify; }\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/css-what/lib/es/types.js\");\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse */ \"(app-pages-browser)/./node_modules/css-what/lib/es/parse.js\");\n/* harmony import */ var _stringify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify */ \"(app-pages-browser)/./node_modules/css-what/lib/es/stringify.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jc3Mtd2hhdC9saWIvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXdCO0FBQ3FCO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2Nzcy13aGF0L2xpYi9lcy9pbmRleC5qcz9hNzc0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL3R5cGVzXCI7XG5leHBvcnQgeyBpc1RyYXZlcnNhbCwgcGFyc2UgfSBmcm9tIFwiLi9wYXJzZVwiO1xuZXhwb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSBcIi4vc3RyaW5naWZ5XCI7XG4iXSwibmFtZXMiOlsiaXNUcmF2ZXJzYWwiLCJwYXJzZSIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-what/lib/es/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-what/lib/es/parse.js":
/*!***********************************************!*\
  !*** ./node_modules/css-what/lib/es/parse.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTraversal: function() { return /* binding */ isTraversal; },\n/* harmony export */   parse: function() { return /* binding */ parse; }\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/css-what/lib/es/types.js\");\n\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([\n    [\n        126 /* Tilde */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element\n    ],\n    [\n        94 /* Circumflex */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Start\n    ],\n    [\n        36 /* Dollar */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.End\n    ],\n    [\n        42 /* Asterisk */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Any\n    ],\n    [\n        33 /* ExclamationMark */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Not\n    ],\n    [\n        124 /* Pipe */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Hyphen\n    ]\n]);\n// Pseudos, whose data property is parsed as well.\nconst unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\"\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */ function isTraversal(selector) {\n    switch(selector.type){\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Adjacent:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Child:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Parent:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Sibling:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nconst stripQuotesFromPseudos = new Set([\n    \"contains\",\n    \"icontains\"\n]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    const high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */  || c === 34 /* DoubleQuote */ ;\n}\nfunction isWhitespace(c) {\n    return c === 32 /* Space */  || c === 9 /* Tab */  || c === 10 /* NewLine */  || c === 12 /* FormFeed */  || c === 13 /* CarriageReturn */ ;\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */ function parse(selector) {\n    const subselects = [];\n    const endIndex = parseSelector(subselects, \"\".concat(selector), 0);\n    if (endIndex < selector.length) {\n        throw new Error(\"Unmatched selector: \".concat(selector.slice(endIndex)));\n    }\n    return subselects;\n}\nfunction parseSelector(subselects, selector, selectorIndex) {\n    let tokens = [];\n    function getName(offset) {\n        const match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(\"Expected name, found \".concat(selector.slice(selectorIndex)));\n        }\n        const [name] = match;\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while(selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))){\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        const start = selectorIndex;\n        let counter = 1;\n        for(; counter > 0 && selectorIndex < selector.length; selectorIndex++){\n            if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  && !isEscaped(selectorIndex)) {\n                counter++;\n            } else if (selector.charCodeAt(selectorIndex) === 41 /* RightParenthesis */  && !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        let slashCount = 0;\n        while(selector.charCodeAt(--pos) === 92 /* BackSlash */ )slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 && tokens[tokens.length - 1].type === _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({\n            type\n        });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute,\n            name,\n            action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\"\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */ function finalizeSubselector() {\n        if (tokens.length && tokens[tokens.length - 1].type === _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while(selectorIndex < selector.length){\n        const firstChar = selector.charCodeAt(selectorIndex);\n        switch(firstChar){\n            // Whitespace\n            case 32 /* Space */ :\n            case 9 /* Tab */ :\n            case 10 /* NewLine */ :\n            case 12 /* FormFeed */ :\n            case 13 /* CarriageReturn */ :\n                {\n                    if (tokens.length === 0 || tokens[0].type !== _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant) {\n                        ensureNotTraversal();\n                        tokens.push({\n                            type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant\n                        });\n                    }\n                    stripWhitespace(1);\n                    break;\n                }\n            // Traversals\n            case 62 /* GreaterThan */ :\n                {\n                    addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Child);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 60 /* LessThan */ :\n                {\n                    addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Parent);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 126 /* Tilde */ :\n                {\n                    addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Sibling);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 43 /* Plus */ :\n                {\n                    addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Adjacent);\n                    stripWhitespace(1);\n                    break;\n                }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */ :\n                {\n                    addSpecialAttribute(\"class\", _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element);\n                    break;\n                }\n            case 35 /* Hash */ :\n                {\n                    addSpecialAttribute(\"id\", _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals);\n                    break;\n                }\n            case 91 /* LeftSquareBracket */ :\n                {\n                    stripWhitespace(1);\n                    // Determine attribute name and namespace\n                    let name;\n                    let namespace = null;\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ ) {\n                        // Equivalent to no namespace\n                        name = getName(1);\n                    } else if (selector.startsWith(\"*|\", selectorIndex)) {\n                        namespace = \"*\";\n                        name = getName(2);\n                    } else {\n                        name = getName(0);\n                        if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {\n                            namespace = name;\n                            name = getName(1);\n                        }\n                    }\n                    stripWhitespace(0);\n                    // Determine comparison operation\n                    let action = _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Exists;\n                    const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                    if (possibleAction) {\n                        action = possibleAction;\n                        if (selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {\n                            throw new Error(\"Expected `=`\");\n                        }\n                        stripWhitespace(2);\n                    } else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */ ) {\n                        action = _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals;\n                        stripWhitespace(1);\n                    }\n                    // Determine value\n                    let value = \"\";\n                    let ignoreCase = null;\n                    if (action !== \"exists\") {\n                        if (isQuote(selector.charCodeAt(selectorIndex))) {\n                            const quote = selector.charCodeAt(selectorIndex);\n                            let sectionEnd = selectorIndex + 1;\n                            while(sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))){\n                                sectionEnd += 1;\n                            }\n                            if (selector.charCodeAt(sectionEnd) !== quote) {\n                                throw new Error(\"Attribute value didn't end\");\n                            }\n                            value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                            selectorIndex = sectionEnd + 1;\n                        } else {\n                            const valueStart = selectorIndex;\n                            while(selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */  || isEscaped(selectorIndex))){\n                                selectorIndex += 1;\n                            }\n                            value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                        }\n                        stripWhitespace(0);\n                        // See if we have a force ignore flag\n                        const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                        // If the forceIgnore flag is set (either `i` or `s`), use that value\n                        if (forceIgnore === 115 /* LowerS */ ) {\n                            ignoreCase = false;\n                            stripWhitespace(1);\n                        } else if (forceIgnore === 105 /* LowerI */ ) {\n                            ignoreCase = true;\n                            stripWhitespace(1);\n                        }\n                    }\n                    if (selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */ ) {\n                        throw new Error(\"Attribute selector didn't terminate\");\n                    }\n                    selectorIndex += 1;\n                    const attributeSelector = {\n                        type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute,\n                        name,\n                        action,\n                        value,\n                        namespace,\n                        ignoreCase\n                    };\n                    tokens.push(attributeSelector);\n                    break;\n                }\n            case 58 /* Colon */ :\n                {\n                    if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */ ) {\n                        tokens.push({\n                            type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.PseudoElement,\n                            name: getName(2).toLowerCase(),\n                            data: selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  ? readValueWithParenthesis() : null\n                        });\n                        continue;\n                    }\n                    const name = getName(1).toLowerCase();\n                    let data = null;\n                    if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */ ) {\n                        if (unpackPseudos.has(name)) {\n                            if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                                throw new Error(\"Pseudo-selector \".concat(name, \" cannot be quoted\"));\n                            }\n                            data = [];\n                            selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                            if (selector.charCodeAt(selectorIndex) !== 41 /* RightParenthesis */ ) {\n                                throw new Error(\"Missing closing parenthesis in :\".concat(name, \" (\").concat(selector, \")\"));\n                            }\n                            selectorIndex += 1;\n                        } else {\n                            data = readValueWithParenthesis();\n                            if (stripQuotesFromPseudos.has(name)) {\n                                const quot = data.charCodeAt(0);\n                                if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {\n                                    data = data.slice(1, -1);\n                                }\n                            }\n                            data = unescapeCSS(data);\n                        }\n                    }\n                    tokens.push({\n                        type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Pseudo,\n                        name,\n                        data\n                    });\n                    break;\n                }\n            case 44 /* Comma */ :\n                {\n                    finalizeSubselector();\n                    tokens = [];\n                    stripWhitespace(1);\n                    break;\n                }\n            default:\n                {\n                    if (selector.startsWith(\"/*\", selectorIndex)) {\n                        const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                        if (endIndex < 0) {\n                            throw new Error(\"Comment was not terminated\");\n                        }\n                        selectorIndex = endIndex + 2;\n                        // Remove leading whitespace\n                        if (tokens.length === 0) {\n                            stripWhitespace(0);\n                        }\n                        break;\n                    }\n                    let namespace = null;\n                    let name;\n                    if (firstChar === 42 /* Asterisk */ ) {\n                        selectorIndex += 1;\n                        name = \"*\";\n                    } else if (firstChar === 124 /* Pipe */ ) {\n                        name = \"\";\n                        if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */ ) {\n                            addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ColumnCombinator);\n                            stripWhitespace(2);\n                            break;\n                        }\n                    } else if (reName.test(selector.slice(selectorIndex))) {\n                        name = getName(0);\n                    } else {\n                        break loop;\n                    }\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */ ) {\n                        namespace = name;\n                        if (selector.charCodeAt(selectorIndex + 1) === 42 /* Asterisk */ ) {\n                            name = \"*\";\n                            selectorIndex += 2;\n                        } else {\n                            name = getName(1);\n                        }\n                    }\n                    tokens.push(name === \"*\" ? {\n                        type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Universal,\n                        namespace\n                    } : {\n                        type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Tag,\n                        name,\n                        namespace\n                    });\n                }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-what/lib/es/parse.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-what/lib/es/stringify.js":
/*!***************************************************!*\
  !*** ./node_modules/css-what/lib/es/stringify.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringify: function() { return /* binding */ stringify; }\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(app-pages-browser)/./node_modules/css-what/lib/es/types.js\");\n\nconst attribValChars = [\n    \"\\\\\",\n    '\"'\n];\nconst pseudoValChars = [\n    ...attribValChars,\n    \"(\",\n    \")\"\n];\nconst charsToEscapeInAttributeValue = new Set(attribValChars.map((c)=>c.charCodeAt(0)));\nconst charsToEscapeInPseudoValue = new Set(pseudoValChars.map((c)=>c.charCodeAt(0)));\nconst charsToEscapeInName = new Set([\n    ...pseudoValChars,\n    \"~\",\n    \"^\",\n    \"$\",\n    \"*\",\n    \"+\",\n    \"!\",\n    \"|\",\n    \":\",\n    \"[\",\n    \"]\",\n    \" \",\n    \".\"\n].map((c)=>c.charCodeAt(0)));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */ function stringify(selector) {\n    return selector.map((token)=>token.map(stringifyToken).join(\"\")).join(\", \");\n}\nfunction stringifyToken(token, index, arr) {\n    switch(token.type){\n        // Simple types\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Child:\n            return index === 0 ? \"> \" : \" > \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Parent:\n            return index === 0 ? \"< \" : \" < \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Sibling:\n            return index === 0 ? \"~ \" : \" ~ \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Adjacent:\n            return index === 0 ? \"+ \" : \" + \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant:\n            return \" \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ColumnCombinator:\n            return index === 0 ? \"|| \" : \" || \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Universal:\n            // Return an empty string if the selector isn't needed.\n            return token.namespace === \"*\" && index + 1 < arr.length && \"name\" in arr[index + 1] ? \"\" : \"\".concat(getNamespace(token.namespace), \"*\");\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Tag:\n            return getNamespacedName(token);\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.PseudoElement:\n            return \"::\".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? \"\" : \"(\".concat(escapeName(token.data, charsToEscapeInPseudoValue), \")\"));\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Pseudo:\n            return \":\".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? \"\" : \"(\".concat(typeof token.data === \"string\" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data), \")\"));\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute:\n            {\n                if (token.name === \"id\" && token.action === _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals && token.ignoreCase === \"quirks\" && !token.namespace) {\n                    return \"#\".concat(escapeName(token.value, charsToEscapeInName));\n                }\n                if (token.name === \"class\" && token.action === _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element && token.ignoreCase === \"quirks\" && !token.namespace) {\n                    return \".\".concat(escapeName(token.value, charsToEscapeInName));\n                }\n                const name = getNamespacedName(token);\n                if (token.action === _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Exists) {\n                    return \"[\".concat(name, \"]\");\n                }\n                return \"[\".concat(name).concat(getActionValue(token.action), '=\"').concat(escapeName(token.value, charsToEscapeInAttributeValue), '\"').concat(token.ignoreCase === null ? \"\" : token.ignoreCase ? \" i\" : \" s\", \"]\");\n            }\n    }\n}\nfunction getActionValue(action) {\n    switch(action){\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals:\n            return \"\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element:\n            return \"~\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Start:\n            return \"^\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.End:\n            return \"$\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Any:\n            return \"*\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Not:\n            return \"!\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Hyphen:\n            return \"|\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Exists:\n            throw new Error(\"Shouldn't be here\");\n    }\n}\nfunction getNamespacedName(token) {\n    return \"\".concat(getNamespace(token.namespace)).concat(escapeName(token.name, charsToEscapeInName));\n}\nfunction getNamespace(namespace) {\n    return namespace !== null ? \"\".concat(namespace === \"*\" ? \"*\" : escapeName(namespace, charsToEscapeInName), \"|\") : \"\";\n}\nfunction escapeName(str, charsToEscape) {\n    let lastIdx = 0;\n    let ret = \"\";\n    for(let i = 0; i < str.length; i++){\n        if (charsToEscape.has(str.charCodeAt(i))) {\n            ret += \"\".concat(str.slice(lastIdx, i), \"\\\\\").concat(str.charAt(i));\n            lastIdx = i + 1;\n        }\n    }\n    return ret.length > 0 ? ret + str.slice(lastIdx) : str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-what/lib/es/stringify.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/css-what/lib/es/types.js":
/*!***********************************************!*\
  !*** ./node_modules/css-what/lib/es/types.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AttributeAction: function() { return /* binding */ AttributeAction; },\n/* harmony export */   IgnoreCaseMode: function() { return /* binding */ IgnoreCaseMode; },\n/* harmony export */   SelectorType: function() { return /* binding */ SelectorType; }\n/* harmony export */ });\nvar SelectorType;\n(function(SelectorType) {\n    SelectorType[\"Attribute\"] = \"attribute\";\n    SelectorType[\"Pseudo\"] = \"pseudo\";\n    SelectorType[\"PseudoElement\"] = \"pseudo-element\";\n    SelectorType[\"Tag\"] = \"tag\";\n    SelectorType[\"Universal\"] = \"universal\";\n    // Traversals\n    SelectorType[\"Adjacent\"] = \"adjacent\";\n    SelectorType[\"Child\"] = \"child\";\n    SelectorType[\"Descendant\"] = \"descendant\";\n    SelectorType[\"Parent\"] = \"parent\";\n    SelectorType[\"Sibling\"] = \"sibling\";\n    SelectorType[\"ColumnCombinator\"] = \"column-combinator\";\n})(SelectorType || (SelectorType = {}));\n/**\n * Modes for ignore case.\n *\n * This could be updated to an enum, and the object is\n * the current stand-in that will allow code to be updated\n * without big changes.\n */ const IgnoreCaseMode = {\n    Unknown: null,\n    QuirksMode: \"quirks\",\n    IgnoreCase: true,\n    CaseSensitive: false\n};\nvar AttributeAction;\n(function(AttributeAction) {\n    AttributeAction[\"Any\"] = \"any\";\n    AttributeAction[\"Element\"] = \"element\";\n    AttributeAction[\"End\"] = \"end\";\n    AttributeAction[\"Equals\"] = \"equals\";\n    AttributeAction[\"Exists\"] = \"exists\";\n    AttributeAction[\"Hyphen\"] = \"hyphen\";\n    AttributeAction[\"Not\"] = \"not\";\n    AttributeAction[\"Start\"] = \"start\";\n})(AttributeAction || (AttributeAction = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jc3Mtd2hhdC9saWIvZXMvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sSUFBSUEsYUFBYTtBQUN2QixVQUFVQSxZQUFZO0lBQ25CQSxZQUFZLENBQUMsWUFBWSxHQUFHO0lBQzVCQSxZQUFZLENBQUMsU0FBUyxHQUFHO0lBQ3pCQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUc7SUFDaENBLFlBQVksQ0FBQyxNQUFNLEdBQUc7SUFDdEJBLFlBQVksQ0FBQyxZQUFZLEdBQUc7SUFDNUIsYUFBYTtJQUNiQSxZQUFZLENBQUMsV0FBVyxHQUFHO0lBQzNCQSxZQUFZLENBQUMsUUFBUSxHQUFHO0lBQ3hCQSxZQUFZLENBQUMsYUFBYSxHQUFHO0lBQzdCQSxZQUFZLENBQUMsU0FBUyxHQUFHO0lBQ3pCQSxZQUFZLENBQUMsVUFBVSxHQUFHO0lBQzFCQSxZQUFZLENBQUMsbUJBQW1CLEdBQUc7QUFDdkMsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUM7QUFDcEM7Ozs7OztDQU1DLEdBQ00sTUFBTUMsaUJBQWlCO0lBQzFCQyxTQUFTO0lBQ1RDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxlQUFlO0FBQ25CLEVBQUU7QUFDSyxJQUFJQyxnQkFBZ0I7QUFDMUIsVUFBVUEsZUFBZTtJQUN0QkEsZUFBZSxDQUFDLE1BQU0sR0FBRztJQUN6QkEsZUFBZSxDQUFDLFVBQVUsR0FBRztJQUM3QkEsZUFBZSxDQUFDLE1BQU0sR0FBRztJQUN6QkEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1QkEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1QkEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1QkEsZUFBZSxDQUFDLE1BQU0sR0FBRztJQUN6QkEsZUFBZSxDQUFDLFFBQVEsR0FBRztBQUMvQixHQUFHQSxtQkFBb0JBLENBQUFBLGtCQUFrQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jc3Mtd2hhdC9saWIvZXMvdHlwZXMuanM/MmFmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIFNlbGVjdG9yVHlwZTtcbihmdW5jdGlvbiAoU2VsZWN0b3JUeXBlKSB7XG4gICAgU2VsZWN0b3JUeXBlW1wiQXR0cmlidXRlXCJdID0gXCJhdHRyaWJ1dGVcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJQc2V1ZG9cIl0gPSBcInBzZXVkb1wiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlBzZXVkb0VsZW1lbnRcIl0gPSBcInBzZXVkby1lbGVtZW50XCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiVGFnXCJdID0gXCJ0YWdcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJVbml2ZXJzYWxcIl0gPSBcInVuaXZlcnNhbFwiO1xuICAgIC8vIFRyYXZlcnNhbHNcbiAgICBTZWxlY3RvclR5cGVbXCJBZGphY2VudFwiXSA9IFwiYWRqYWNlbnRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJDaGlsZFwiXSA9IFwiY2hpbGRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJEZXNjZW5kYW50XCJdID0gXCJkZXNjZW5kYW50XCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiUGFyZW50XCJdID0gXCJwYXJlbnRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJTaWJsaW5nXCJdID0gXCJzaWJsaW5nXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiQ29sdW1uQ29tYmluYXRvclwiXSA9IFwiY29sdW1uLWNvbWJpbmF0b3JcIjtcbn0pKFNlbGVjdG9yVHlwZSB8fCAoU2VsZWN0b3JUeXBlID0ge30pKTtcbi8qKlxuICogTW9kZXMgZm9yIGlnbm9yZSBjYXNlLlxuICpcbiAqIFRoaXMgY291bGQgYmUgdXBkYXRlZCB0byBhbiBlbnVtLCBhbmQgdGhlIG9iamVjdCBpc1xuICogdGhlIGN1cnJlbnQgc3RhbmQtaW4gdGhhdCB3aWxsIGFsbG93IGNvZGUgdG8gYmUgdXBkYXRlZFxuICogd2l0aG91dCBiaWcgY2hhbmdlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IElnbm9yZUNhc2VNb2RlID0ge1xuICAgIFVua25vd246IG51bGwsXG4gICAgUXVpcmtzTW9kZTogXCJxdWlya3NcIixcbiAgICBJZ25vcmVDYXNlOiB0cnVlLFxuICAgIENhc2VTZW5zaXRpdmU6IGZhbHNlLFxufTtcbmV4cG9ydCB2YXIgQXR0cmlidXRlQWN0aW9uO1xuKGZ1bmN0aW9uIChBdHRyaWJ1dGVBY3Rpb24pIHtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJBbnlcIl0gPSBcImFueVwiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkVsZW1lbnRcIl0gPSBcImVsZW1lbnRcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJFbmRcIl0gPSBcImVuZFwiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkVxdWFsc1wiXSA9IFwiZXF1YWxzXCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiRXhpc3RzXCJdID0gXCJleGlzdHNcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJIeXBoZW5cIl0gPSBcImh5cGhlblwiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIk5vdFwiXSA9IFwibm90XCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiU3RhcnRcIl0gPSBcInN0YXJ0XCI7XG59KShBdHRyaWJ1dGVBY3Rpb24gfHwgKEF0dHJpYnV0ZUFjdGlvbiA9IHt9KSk7XG4iXSwibmFtZXMiOlsiU2VsZWN0b3JUeXBlIiwiSWdub3JlQ2FzZU1vZGUiLCJVbmtub3duIiwiUXVpcmtzTW9kZSIsIklnbm9yZUNhc2UiLCJDYXNlU2Vuc2l0aXZlIiwiQXR0cmlidXRlQWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/css-what/lib/es/types.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/dom-serializer/lib/foreignNames.js":
/*!*********************************************************!*\
  !*** ./node_modules/dom-serializer/lib/foreignNames.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.attributeNames = exports.elementNames = void 0;\nexports.elementNames = new Map([\n    \"altGlyph\",\n    \"altGlyphDef\",\n    \"altGlyphItem\",\n    \"animateColor\",\n    \"animateMotion\",\n    \"animateTransform\",\n    \"clipPath\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feDistantLight\",\n    \"feDropShadow\",\n    \"feFlood\",\n    \"feFuncA\",\n    \"feFuncB\",\n    \"feFuncG\",\n    \"feFuncR\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMergeNode\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"fePointLight\",\n    \"feSpecularLighting\",\n    \"feSpotLight\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"foreignObject\",\n    \"glyphRef\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"textPath\"\n].map(function(val) {\n    return [\n        val.toLowerCase(),\n        val\n    ];\n}));\nexports.attributeNames = new Map([\n    \"definitionURL\",\n    \"attributeName\",\n    \"attributeType\",\n    \"baseFrequency\",\n    \"baseProfile\",\n    \"calcMode\",\n    \"clipPathUnits\",\n    \"diffuseConstant\",\n    \"edgeMode\",\n    \"filterUnits\",\n    \"glyphRef\",\n    \"gradientTransform\",\n    \"gradientUnits\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keyPoints\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"lengthAdjust\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerUnits\",\n    \"markerWidth\",\n    \"maskContentUnits\",\n    \"maskUnits\",\n    \"numOctaves\",\n    \"pathLength\",\n    \"patternContentUnits\",\n    \"patternTransform\",\n    \"patternUnits\",\n    \"pointsAtX\",\n    \"pointsAtY\",\n    \"pointsAtZ\",\n    \"preserveAlpha\",\n    \"preserveAspectRatio\",\n    \"primitiveUnits\",\n    \"refX\",\n    \"refY\",\n    \"repeatCount\",\n    \"repeatDur\",\n    \"requiredExtensions\",\n    \"requiredFeatures\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"spreadMethod\",\n    \"startOffset\",\n    \"stdDeviation\",\n    \"stitchTiles\",\n    \"surfaceScale\",\n    \"systemLanguage\",\n    \"tableValues\",\n    \"targetX\",\n    \"targetY\",\n    \"textLength\",\n    \"viewBox\",\n    \"viewTarget\",\n    \"xChannelSelector\",\n    \"yChannelSelector\",\n    \"zoomAndPan\"\n].map(function(val) {\n    return [\n        val.toLowerCase(),\n        val\n    ];\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9saWIvZm9yZWlnbk5hbWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxzQkFBc0IsR0FBR0Esb0JBQW9CLEdBQUcsS0FBSztBQUNyREEsb0JBQW9CLEdBQUcsSUFBSUksSUFBSTtJQUMzQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtDQUNILENBQUNDLEdBQUcsQ0FBQyxTQUFVQyxHQUFHO0lBQUksT0FBTztRQUFDQSxJQUFJQyxXQUFXO1FBQUlEO0tBQUk7QUFBRTtBQUN4RE4sc0JBQXNCLEdBQUcsSUFBSUksSUFBSTtJQUM3QjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0gsQ0FBQ0MsR0FBRyxDQUFDLFNBQVVDLEdBQUc7SUFBSSxPQUFPO1FBQUNBLElBQUlDLFdBQVc7UUFBSUQ7S0FBSTtBQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9saWIvZm9yZWlnbk5hbWVzLmpzPzQyN2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5lbGVtZW50TmFtZXMgPSB2b2lkIDA7XG5leHBvcnRzLmVsZW1lbnROYW1lcyA9IG5ldyBNYXAoW1xuICAgIFwiYWx0R2x5cGhcIixcbiAgICBcImFsdEdseXBoRGVmXCIsXG4gICAgXCJhbHRHbHlwaEl0ZW1cIixcbiAgICBcImFuaW1hdGVDb2xvclwiLFxuICAgIFwiYW5pbWF0ZU1vdGlvblwiLFxuICAgIFwiYW5pbWF0ZVRyYW5zZm9ybVwiLFxuICAgIFwiY2xpcFBhdGhcIixcbiAgICBcImZlQmxlbmRcIixcbiAgICBcImZlQ29sb3JNYXRyaXhcIixcbiAgICBcImZlQ29tcG9uZW50VHJhbnNmZXJcIixcbiAgICBcImZlQ29tcG9zaXRlXCIsXG4gICAgXCJmZUNvbnZvbHZlTWF0cml4XCIsXG4gICAgXCJmZURpZmZ1c2VMaWdodGluZ1wiLFxuICAgIFwiZmVEaXNwbGFjZW1lbnRNYXBcIixcbiAgICBcImZlRGlzdGFudExpZ2h0XCIsXG4gICAgXCJmZURyb3BTaGFkb3dcIixcbiAgICBcImZlRmxvb2RcIixcbiAgICBcImZlRnVuY0FcIixcbiAgICBcImZlRnVuY0JcIixcbiAgICBcImZlRnVuY0dcIixcbiAgICBcImZlRnVuY1JcIixcbiAgICBcImZlR2F1c3NpYW5CbHVyXCIsXG4gICAgXCJmZUltYWdlXCIsXG4gICAgXCJmZU1lcmdlXCIsXG4gICAgXCJmZU1lcmdlTm9kZVwiLFxuICAgIFwiZmVNb3JwaG9sb2d5XCIsXG4gICAgXCJmZU9mZnNldFwiLFxuICAgIFwiZmVQb2ludExpZ2h0XCIsXG4gICAgXCJmZVNwZWN1bGFyTGlnaHRpbmdcIixcbiAgICBcImZlU3BvdExpZ2h0XCIsXG4gICAgXCJmZVRpbGVcIixcbiAgICBcImZlVHVyYnVsZW5jZVwiLFxuICAgIFwiZm9yZWlnbk9iamVjdFwiLFxuICAgIFwiZ2x5cGhSZWZcIixcbiAgICBcImxpbmVhckdyYWRpZW50XCIsXG4gICAgXCJyYWRpYWxHcmFkaWVudFwiLFxuICAgIFwidGV4dFBhdGhcIixcbl0ubWFwKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIFt2YWwudG9Mb3dlckNhc2UoKSwgdmFsXTsgfSkpO1xuZXhwb3J0cy5hdHRyaWJ1dGVOYW1lcyA9IG5ldyBNYXAoW1xuICAgIFwiZGVmaW5pdGlvblVSTFwiLFxuICAgIFwiYXR0cmlidXRlTmFtZVwiLFxuICAgIFwiYXR0cmlidXRlVHlwZVwiLFxuICAgIFwiYmFzZUZyZXF1ZW5jeVwiLFxuICAgIFwiYmFzZVByb2ZpbGVcIixcbiAgICBcImNhbGNNb2RlXCIsXG4gICAgXCJjbGlwUGF0aFVuaXRzXCIsXG4gICAgXCJkaWZmdXNlQ29uc3RhbnRcIixcbiAgICBcImVkZ2VNb2RlXCIsXG4gICAgXCJmaWx0ZXJVbml0c1wiLFxuICAgIFwiZ2x5cGhSZWZcIixcbiAgICBcImdyYWRpZW50VHJhbnNmb3JtXCIsXG4gICAgXCJncmFkaWVudFVuaXRzXCIsXG4gICAgXCJrZXJuZWxNYXRyaXhcIixcbiAgICBcImtlcm5lbFVuaXRMZW5ndGhcIixcbiAgICBcImtleVBvaW50c1wiLFxuICAgIFwia2V5U3BsaW5lc1wiLFxuICAgIFwia2V5VGltZXNcIixcbiAgICBcImxlbmd0aEFkanVzdFwiLFxuICAgIFwibGltaXRpbmdDb25lQW5nbGVcIixcbiAgICBcIm1hcmtlckhlaWdodFwiLFxuICAgIFwibWFya2VyVW5pdHNcIixcbiAgICBcIm1hcmtlcldpZHRoXCIsXG4gICAgXCJtYXNrQ29udGVudFVuaXRzXCIsXG4gICAgXCJtYXNrVW5pdHNcIixcbiAgICBcIm51bU9jdGF2ZXNcIixcbiAgICBcInBhdGhMZW5ndGhcIixcbiAgICBcInBhdHRlcm5Db250ZW50VW5pdHNcIixcbiAgICBcInBhdHRlcm5UcmFuc2Zvcm1cIixcbiAgICBcInBhdHRlcm5Vbml0c1wiLFxuICAgIFwicG9pbnRzQXRYXCIsXG4gICAgXCJwb2ludHNBdFlcIixcbiAgICBcInBvaW50c0F0WlwiLFxuICAgIFwicHJlc2VydmVBbHBoYVwiLFxuICAgIFwicHJlc2VydmVBc3BlY3RSYXRpb1wiLFxuICAgIFwicHJpbWl0aXZlVW5pdHNcIixcbiAgICBcInJlZlhcIixcbiAgICBcInJlZllcIixcbiAgICBcInJlcGVhdENvdW50XCIsXG4gICAgXCJyZXBlYXREdXJcIixcbiAgICBcInJlcXVpcmVkRXh0ZW5zaW9uc1wiLFxuICAgIFwicmVxdWlyZWRGZWF0dXJlc1wiLFxuICAgIFwic3BlY3VsYXJDb25zdGFudFwiLFxuICAgIFwic3BlY3VsYXJFeHBvbmVudFwiLFxuICAgIFwic3ByZWFkTWV0aG9kXCIsXG4gICAgXCJzdGFydE9mZnNldFwiLFxuICAgIFwic3RkRGV2aWF0aW9uXCIsXG4gICAgXCJzdGl0Y2hUaWxlc1wiLFxuICAgIFwic3VyZmFjZVNjYWxlXCIsXG4gICAgXCJzeXN0ZW1MYW5ndWFnZVwiLFxuICAgIFwidGFibGVWYWx1ZXNcIixcbiAgICBcInRhcmdldFhcIixcbiAgICBcInRhcmdldFlcIixcbiAgICBcInRleHRMZW5ndGhcIixcbiAgICBcInZpZXdCb3hcIixcbiAgICBcInZpZXdUYXJnZXRcIixcbiAgICBcInhDaGFubmVsU2VsZWN0b3JcIixcbiAgICBcInlDaGFubmVsU2VsZWN0b3JcIixcbiAgICBcInpvb21BbmRQYW5cIixcbl0ubWFwKGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIFt2YWwudG9Mb3dlckNhc2UoKSwgdmFsXTsgfSkpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXR0cmlidXRlTmFtZXMiLCJlbGVtZW50TmFtZXMiLCJNYXAiLCJtYXAiLCJ2YWwiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/dom-serializer/lib/foreignNames.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/dom-serializer/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/dom-serializer/lib/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.render = void 0;\n/*\n * Module dependencies\n */ var ElementType = __importStar(__webpack_require__(/*! domelementtype */ \"(app-pages-browser)/./node_modules/domelementtype/lib/index.js\"));\nvar entities_1 = __webpack_require__(/*! entities */ \"(app-pages-browser)/./node_modules/entities/lib/index.js\");\n/**\n * Mixed-case SVG and MathML tags & attributes\n * recognized by the HTML parser.\n *\n * @see https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\n */ var foreignNames_js_1 = __webpack_require__(/*! ./foreignNames.js */ \"(app-pages-browser)/./node_modules/dom-serializer/lib/foreignNames.js\");\nvar unencodedElements = new Set([\n    \"style\",\n    \"script\",\n    \"xmp\",\n    \"iframe\",\n    \"noembed\",\n    \"noframes\",\n    \"plaintext\",\n    \"noscript\"\n]);\nfunction replaceQuotes(value) {\n    return value.replace(/\"/g, \"&quot;\");\n}\n/**\n * Format attributes\n */ function formatAttributes(attributes, opts) {\n    var _a;\n    if (!attributes) return;\n    var encode = ((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) === false ? replaceQuotes : opts.xmlMode || opts.encodeEntities !== \"utf8\" ? entities_1.encodeXML : entities_1.escapeAttribute;\n    return Object.keys(attributes).map(function(key) {\n        var _a, _b;\n        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : \"\";\n        if (opts.xmlMode === \"foreign\") {\n            /* Fix up mixed-case attribute names */ key = (_b = foreignNames_js_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;\n        }\n        if (!opts.emptyAttrs && !opts.xmlMode && value === \"\") {\n            return key;\n        }\n        return \"\".concat(key, '=\"').concat(encode(value), '\"');\n    }).join(\" \");\n}\n/**\n * Self-enclosing tags\n */ var singleTag = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\n/**\n * Renders a DOM node or an array of DOM nodes to a string.\n *\n * Can be thought of as the equivalent of the `outerHTML` of the passed node(s).\n *\n * @param node Node to be rendered.\n * @param options Changes serialization behavior\n */ function render(node, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var nodes = \"length\" in node ? node : [\n        node\n    ];\n    var output = \"\";\n    for(var i = 0; i < nodes.length; i++){\n        output += renderNode(nodes[i], options);\n    }\n    return output;\n}\nexports.render = render;\nexports[\"default\"] = render;\nfunction renderNode(node, options) {\n    switch(node.type){\n        case ElementType.Root:\n            return render(node.children, options);\n        // @ts-expect-error We don't use `Doctype` yet\n        case ElementType.Doctype:\n        case ElementType.Directive:\n            return renderDirective(node);\n        case ElementType.Comment:\n            return renderComment(node);\n        case ElementType.CDATA:\n            return renderCdata(node);\n        case ElementType.Script:\n        case ElementType.Style:\n        case ElementType.Tag:\n            return renderTag(node, options);\n        case ElementType.Text:\n            return renderText(node, options);\n    }\n}\nvar foreignModeIntegrationPoints = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignObject\",\n    \"desc\",\n    \"title\"\n]);\nvar foreignElements = new Set([\n    \"svg\",\n    \"math\"\n]);\nfunction renderTag(elem, opts) {\n    var _a;\n    // Handle SVG / MathML in HTML\n    if (opts.xmlMode === \"foreign\") {\n        /* Fix up mixed-case element names */ elem.name = (_a = foreignNames_js_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;\n        /* Exit foreign mode at integration points */ if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {\n            opts = __assign(__assign({}, opts), {\n                xmlMode: false\n            });\n        }\n    }\n    if (!opts.xmlMode && foreignElements.has(elem.name)) {\n        opts = __assign(__assign({}, opts), {\n            xmlMode: \"foreign\"\n        });\n    }\n    var tag = \"<\".concat(elem.name);\n    var attribs = formatAttributes(elem.attribs, opts);\n    if (attribs) {\n        tag += \" \".concat(attribs);\n    }\n    if (elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== false : opts.selfClosingTags && singleTag.has(elem.name))) {\n        if (!opts.xmlMode) tag += \" \";\n        tag += \"/>\";\n    } else {\n        tag += \">\";\n        if (elem.children.length > 0) {\n            tag += render(elem.children, opts);\n        }\n        if (opts.xmlMode || !singleTag.has(elem.name)) {\n            tag += \"</\".concat(elem.name, \">\");\n        }\n    }\n    return tag;\n}\nfunction renderDirective(elem) {\n    return \"<\".concat(elem.data, \">\");\n}\nfunction renderText(elem, opts) {\n    var _a;\n    var data = elem.data || \"\";\n    // If entities weren't decoded, no need to encode them back\n    if (((_a = opts.encodeEntities) !== null && _a !== void 0 ? _a : opts.decodeEntities) !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {\n        data = opts.xmlMode || opts.encodeEntities !== \"utf8\" ? (0, entities_1.encodeXML)(data) : (0, entities_1.escapeText)(data);\n    }\n    return data;\n}\nfunction renderCdata(elem) {\n    return \"<![CDATA[\".concat(elem.children[0].data, \"]]>\");\n}\nfunction renderComment(elem) {\n    return \"<!--\".concat(elem.data, \"-->\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/dom-serializer/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domelementtype/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/domelementtype/lib/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;\n/** Types of elements found in htmlparser2's DOM */ var ElementType;\n(function(ElementType) {\n    /** Type for the root element of a document */ ElementType[\"Root\"] = \"root\";\n    /** Type for Text */ ElementType[\"Text\"] = \"text\";\n    /** Type for <? ... ?> */ ElementType[\"Directive\"] = \"directive\";\n    /** Type for <!-- ... --> */ ElementType[\"Comment\"] = \"comment\";\n    /** Type for <script> tags */ ElementType[\"Script\"] = \"script\";\n    /** Type for <style> tags */ ElementType[\"Style\"] = \"style\";\n    /** Type for Any tag */ ElementType[\"Tag\"] = \"tag\";\n    /** Type for <![CDATA[ ... ]]> */ ElementType[\"CDATA\"] = \"cdata\";\n    /** Type for <!doctype ...> */ ElementType[\"Doctype\"] = \"doctype\";\n})(ElementType = exports.ElementType || (exports.ElementType = {}));\n/**\n * Tests whether an element is a tag or not.\n *\n * @param elem Element to test\n */ function isTag(elem) {\n    return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;\n}\nexports.isTag = isTag;\n// Exports for backwards compatibility\n/** Type for the root element of a document */ exports.Root = ElementType.Root;\n/** Type for Text */ exports.Text = ElementType.Text;\n/** Type for <? ... ?> */ exports.Directive = ElementType.Directive;\n/** Type for <!-- ... --> */ exports.Comment = ElementType.Comment;\n/** Type for <script> tags */ exports.Script = ElementType.Script;\n/** Type for <style> tags */ exports.Style = ElementType.Style;\n/** Type for Any tag */ exports.Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]> */ exports.CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */ exports.Doctype = ElementType.Doctype;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kb21lbGVtZW50dHlwZS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0EsYUFBYSxHQUFHQSxXQUFXLEdBQUdBLGFBQWEsR0FBR0EsY0FBYyxHQUFHQSxlQUFlLEdBQUdBLGlCQUFpQixHQUFHQSxZQUFZLEdBQUdBLFlBQVksR0FBR0EsYUFBYSxHQUFHQSxtQkFBbUIsR0FBRyxLQUFLO0FBQ2hNLGlEQUFpRCxHQUNqRCxJQUFJWTtBQUNILFVBQVVBLFdBQVc7SUFDbEIsNENBQTRDLEdBQzVDQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCLGtCQUFrQixHQUNsQkEsV0FBVyxDQUFDLE9BQU8sR0FBRztJQUN0Qix1QkFBdUIsR0FDdkJBLFdBQVcsQ0FBQyxZQUFZLEdBQUc7SUFDM0IsMEJBQTBCLEdBQzFCQSxXQUFXLENBQUMsVUFBVSxHQUFHO0lBQ3pCLDJCQUEyQixHQUMzQkEsV0FBVyxDQUFDLFNBQVMsR0FBRztJQUN4QiwwQkFBMEIsR0FDMUJBLFdBQVcsQ0FBQyxRQUFRLEdBQUc7SUFDdkIscUJBQXFCLEdBQ3JCQSxXQUFXLENBQUMsTUFBTSxHQUFHO0lBQ3JCLCtCQUErQixHQUMvQkEsV0FBVyxDQUFDLFFBQVEsR0FBRztJQUN2Qiw0QkFBNEIsR0FDNUJBLFdBQVcsQ0FBQyxVQUFVLEdBQUc7QUFDN0IsR0FBR0EsY0FBY1osUUFBUVksV0FBVyxJQUFLWixDQUFBQSxtQkFBbUIsR0FBRyxDQUFDO0FBQ2hFOzs7O0NBSUMsR0FDRCxTQUFTVyxNQUFNRSxJQUFJO0lBQ2YsT0FBUUEsS0FBS0MsSUFBSSxLQUFLRixZQUFZUixHQUFHLElBQ2pDUyxLQUFLQyxJQUFJLEtBQUtGLFlBQVlOLE1BQU0sSUFDaENPLEtBQUtDLElBQUksS0FBS0YsWUFBWVAsS0FBSztBQUN2QztBQUNBTCxhQUFhLEdBQUdXO0FBQ2hCLHNDQUFzQztBQUN0Qyw0Q0FBNEMsR0FDNUNYLFlBQVksR0FBR1ksWUFBWUYsSUFBSTtBQUMvQixrQkFBa0IsR0FDbEJWLFlBQVksR0FBR1ksWUFBWUgsSUFBSTtBQUMvQix1QkFBdUIsR0FDdkJULGlCQUFpQixHQUFHWSxZQUFZSixTQUFTO0FBQ3pDLDBCQUEwQixHQUMxQlIsZUFBZSxHQUFHWSxZQUFZTCxPQUFPO0FBQ3JDLDJCQUEyQixHQUMzQlAsY0FBYyxHQUFHWSxZQUFZTixNQUFNO0FBQ25DLDBCQUEwQixHQUMxQk4sYUFBYSxHQUFHWSxZQUFZUCxLQUFLO0FBQ2pDLHFCQUFxQixHQUNyQkwsV0FBVyxHQUFHWSxZQUFZUixHQUFHO0FBQzdCLCtCQUErQixHQUMvQkosYUFBYSxHQUFHWSxZQUFZVCxLQUFLO0FBQ2pDLDRCQUE0QixHQUM1QkgsZUFBZSxHQUFHWSxZQUFZVixPQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9kb21lbGVtZW50dHlwZS9saWIvaW5kZXguanM/Y2JjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRG9jdHlwZSA9IGV4cG9ydHMuQ0RBVEEgPSBleHBvcnRzLlRhZyA9IGV4cG9ydHMuU3R5bGUgPSBleHBvcnRzLlNjcmlwdCA9IGV4cG9ydHMuQ29tbWVudCA9IGV4cG9ydHMuRGlyZWN0aXZlID0gZXhwb3J0cy5UZXh0ID0gZXhwb3J0cy5Sb290ID0gZXhwb3J0cy5pc1RhZyA9IGV4cG9ydHMuRWxlbWVudFR5cGUgPSB2b2lkIDA7XG4vKiogVHlwZXMgb2YgZWxlbWVudHMgZm91bmQgaW4gaHRtbHBhcnNlcjIncyBET00gKi9cbnZhciBFbGVtZW50VHlwZTtcbihmdW5jdGlvbiAoRWxlbWVudFR5cGUpIHtcbiAgICAvKiogVHlwZSBmb3IgdGhlIHJvb3QgZWxlbWVudCBvZiBhIGRvY3VtZW50ICovXG4gICAgRWxlbWVudFR5cGVbXCJSb290XCJdID0gXCJyb290XCI7XG4gICAgLyoqIFR5cGUgZm9yIFRleHQgKi9cbiAgICBFbGVtZW50VHlwZVtcIlRleHRcIl0gPSBcInRleHRcIjtcbiAgICAvKiogVHlwZSBmb3IgPD8gLi4uID8+ICovXG4gICAgRWxlbWVudFR5cGVbXCJEaXJlY3RpdmVcIl0gPSBcImRpcmVjdGl2ZVwiO1xuICAgIC8qKiBUeXBlIGZvciA8IS0tIC4uLiAtLT4gKi9cbiAgICBFbGVtZW50VHlwZVtcIkNvbW1lbnRcIl0gPSBcImNvbW1lbnRcIjtcbiAgICAvKiogVHlwZSBmb3IgPHNjcmlwdD4gdGFncyAqL1xuICAgIEVsZW1lbnRUeXBlW1wiU2NyaXB0XCJdID0gXCJzY3JpcHRcIjtcbiAgICAvKiogVHlwZSBmb3IgPHN0eWxlPiB0YWdzICovXG4gICAgRWxlbWVudFR5cGVbXCJTdHlsZVwiXSA9IFwic3R5bGVcIjtcbiAgICAvKiogVHlwZSBmb3IgQW55IHRhZyAqL1xuICAgIEVsZW1lbnRUeXBlW1wiVGFnXCJdID0gXCJ0YWdcIjtcbiAgICAvKiogVHlwZSBmb3IgPCFbQ0RBVEFbIC4uLiBdXT4gKi9cbiAgICBFbGVtZW50VHlwZVtcIkNEQVRBXCJdID0gXCJjZGF0YVwiO1xuICAgIC8qKiBUeXBlIGZvciA8IWRvY3R5cGUgLi4uPiAqL1xuICAgIEVsZW1lbnRUeXBlW1wiRG9jdHlwZVwiXSA9IFwiZG9jdHlwZVwiO1xufSkoRWxlbWVudFR5cGUgPSBleHBvcnRzLkVsZW1lbnRUeXBlIHx8IChleHBvcnRzLkVsZW1lbnRUeXBlID0ge30pKTtcbi8qKlxuICogVGVzdHMgd2hldGhlciBhbiBlbGVtZW50IGlzIGEgdGFnIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIHRlc3RcbiAqL1xuZnVuY3Rpb24gaXNUYWcoZWxlbSkge1xuICAgIHJldHVybiAoZWxlbS50eXBlID09PSBFbGVtZW50VHlwZS5UYWcgfHxcbiAgICAgICAgZWxlbS50eXBlID09PSBFbGVtZW50VHlwZS5TY3JpcHQgfHxcbiAgICAgICAgZWxlbS50eXBlID09PSBFbGVtZW50VHlwZS5TdHlsZSk7XG59XG5leHBvcnRzLmlzVGFnID0gaXNUYWc7XG4vLyBFeHBvcnRzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuLyoqIFR5cGUgZm9yIHRoZSByb290IGVsZW1lbnQgb2YgYSBkb2N1bWVudCAqL1xuZXhwb3J0cy5Sb290ID0gRWxlbWVudFR5cGUuUm9vdDtcbi8qKiBUeXBlIGZvciBUZXh0ICovXG5leHBvcnRzLlRleHQgPSBFbGVtZW50VHlwZS5UZXh0O1xuLyoqIFR5cGUgZm9yIDw/IC4uLiA/PiAqL1xuZXhwb3J0cy5EaXJlY3RpdmUgPSBFbGVtZW50VHlwZS5EaXJlY3RpdmU7XG4vKiogVHlwZSBmb3IgPCEtLSAuLi4gLS0+ICovXG5leHBvcnRzLkNvbW1lbnQgPSBFbGVtZW50VHlwZS5Db21tZW50O1xuLyoqIFR5cGUgZm9yIDxzY3JpcHQ+IHRhZ3MgKi9cbmV4cG9ydHMuU2NyaXB0ID0gRWxlbWVudFR5cGUuU2NyaXB0O1xuLyoqIFR5cGUgZm9yIDxzdHlsZT4gdGFncyAqL1xuZXhwb3J0cy5TdHlsZSA9IEVsZW1lbnRUeXBlLlN0eWxlO1xuLyoqIFR5cGUgZm9yIEFueSB0YWcgKi9cbmV4cG9ydHMuVGFnID0gRWxlbWVudFR5cGUuVGFnO1xuLyoqIFR5cGUgZm9yIDwhW0NEQVRBWyAuLi4gXV0+ICovXG5leHBvcnRzLkNEQVRBID0gRWxlbWVudFR5cGUuQ0RBVEE7XG4vKiogVHlwZSBmb3IgPCFkb2N0eXBlIC4uLj4gKi9cbmV4cG9ydHMuRG9jdHlwZSA9IEVsZW1lbnRUeXBlLkRvY3R5cGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJEb2N0eXBlIiwiQ0RBVEEiLCJUYWciLCJTdHlsZSIsIlNjcmlwdCIsIkNvbW1lbnQiLCJEaXJlY3RpdmUiLCJUZXh0IiwiUm9vdCIsImlzVGFnIiwiRWxlbWVudFR5cGUiLCJlbGVtIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domelementtype/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domhandler/lib/index.js":
/*!**********************************************!*\
  !*** ./node_modules/domhandler/lib/index.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DomHandler = void 0;\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"(app-pages-browser)/./node_modules/domelementtype/lib/index.js\");\nvar node_js_1 = __webpack_require__(/*! ./node.js */ \"(app-pages-browser)/./node_modules/domhandler/lib/node.js\");\n__exportStar(__webpack_require__(/*! ./node.js */ \"(app-pages-browser)/./node_modules/domhandler/lib/node.js\"), exports);\n// Default options\nvar defaultOpts = {\n    withStartIndices: false,\n    withEndIndices: false,\n    xmlMode: false\n};\nvar DomHandler = /** @class */ function() {\n    /**\n     * @param callback Called once parsing has completed.\n     * @param options Settings for the handler.\n     * @param elementCB Callback whenever a tag is closed.\n     */ function DomHandler(callback, options, elementCB) {\n        /** The elements of the DOM */ this.dom = [];\n        /** The root element for the DOM */ this.root = new node_js_1.Document(this.dom);\n        /** Indicated whether parsing has been completed. */ this.done = false;\n        /** Stack of open tags. */ this.tagStack = [\n            this.root\n        ];\n        /** A data node that is still being written to. */ this.lastNode = null;\n        /** Reference to the parser instance. Used for location information. */ this.parser = null;\n        // Make it possible to skip arguments, for backwards-compatibility\n        if (typeof options === \"function\") {\n            elementCB = options;\n            options = defaultOpts;\n        }\n        if (typeof callback === \"object\") {\n            options = callback;\n            callback = undefined;\n        }\n        this.callback = callback !== null && callback !== void 0 ? callback : null;\n        this.options = options !== null && options !== void 0 ? options : defaultOpts;\n        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;\n    }\n    DomHandler.prototype.onparserinit = function(parser) {\n        this.parser = parser;\n    };\n    // Resets the handler back to starting state\n    DomHandler.prototype.onreset = function() {\n        this.dom = [];\n        this.root = new node_js_1.Document(this.dom);\n        this.done = false;\n        this.tagStack = [\n            this.root\n        ];\n        this.lastNode = null;\n        this.parser = null;\n    };\n    // Signals the handler that parsing is done\n    DomHandler.prototype.onend = function() {\n        if (this.done) return;\n        this.done = true;\n        this.parser = null;\n        this.handleCallback(null);\n    };\n    DomHandler.prototype.onerror = function(error) {\n        this.handleCallback(error);\n    };\n    DomHandler.prototype.onclosetag = function() {\n        this.lastNode = null;\n        var elem = this.tagStack.pop();\n        if (this.options.withEndIndices) {\n            elem.endIndex = this.parser.endIndex;\n        }\n        if (this.elementCB) this.elementCB(elem);\n    };\n    DomHandler.prototype.onopentag = function(name, attribs) {\n        var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : undefined;\n        var element = new node_js_1.Element(name, attribs, undefined, type);\n        this.addNode(element);\n        this.tagStack.push(element);\n    };\n    DomHandler.prototype.ontext = function(data) {\n        var lastNode = this.lastNode;\n        if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {\n            lastNode.data += data;\n            if (this.options.withEndIndices) {\n                lastNode.endIndex = this.parser.endIndex;\n            }\n        } else {\n            var node = new node_js_1.Text(data);\n            this.addNode(node);\n            this.lastNode = node;\n        }\n    };\n    DomHandler.prototype.oncomment = function(data) {\n        if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {\n            this.lastNode.data += data;\n            return;\n        }\n        var node = new node_js_1.Comment(data);\n        this.addNode(node);\n        this.lastNode = node;\n    };\n    DomHandler.prototype.oncommentend = function() {\n        this.lastNode = null;\n    };\n    DomHandler.prototype.oncdatastart = function() {\n        var text = new node_js_1.Text(\"\");\n        var node = new node_js_1.CDATA([\n            text\n        ]);\n        this.addNode(node);\n        text.parent = node;\n        this.lastNode = text;\n    };\n    DomHandler.prototype.oncdataend = function() {\n        this.lastNode = null;\n    };\n    DomHandler.prototype.onprocessinginstruction = function(name, data) {\n        var node = new node_js_1.ProcessingInstruction(name, data);\n        this.addNode(node);\n    };\n    DomHandler.prototype.handleCallback = function(error) {\n        if (typeof this.callback === \"function\") {\n            this.callback(error, this.dom);\n        } else if (error) {\n            throw error;\n        }\n    };\n    DomHandler.prototype.addNode = function(node) {\n        var parent = this.tagStack[this.tagStack.length - 1];\n        var previousSibling = parent.children[parent.children.length - 1];\n        if (this.options.withStartIndices) {\n            node.startIndex = this.parser.startIndex;\n        }\n        if (this.options.withEndIndices) {\n            node.endIndex = this.parser.endIndex;\n        }\n        parent.children.push(node);\n        if (previousSibling) {\n            node.prev = previousSibling;\n            previousSibling.next = node;\n        }\n        node.parent = parent;\n        this.lastNode = null;\n    };\n    return DomHandler;\n}();\nexports.DomHandler = DomHandler;\nexports[\"default\"] = DomHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domhandler/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domhandler/lib/node.js":
/*!*********************************************!*\
  !*** ./node_modules/domhandler/lib/node.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __extends = (void 0) && (void 0).__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.cloneNode = exports.hasChildren = exports.isDocument = exports.isDirective = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = exports.Element = exports.Document = exports.CDATA = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"(app-pages-browser)/./node_modules/domelementtype/lib/index.js\");\n/**\n * This object will be used as the prototype for Nodes when creating a\n * DOM-Level-1-compliant structure.\n */ var Node = /** @class */ function() {\n    function Node() {\n        /** Parent of the node */ this.parent = null;\n        /** Previous sibling */ this.prev = null;\n        /** Next sibling */ this.next = null;\n        /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */ this.startIndex = null;\n        /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */ this.endIndex = null;\n    }\n    Object.defineProperty(Node.prototype, \"parentNode\", {\n        // Read-write aliases for properties\n        /**\n         * Same as {@link parent}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.parent;\n        },\n        set: function(parent) {\n            this.parent = parent;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"previousSibling\", {\n        /**\n         * Same as {@link prev}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.prev;\n        },\n        set: function(prev) {\n            this.prev = prev;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Node.prototype, \"nextSibling\", {\n        /**\n         * Same as {@link next}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.next;\n        },\n        set: function(next) {\n            this.next = next;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Clone this node, and optionally its children.\n     *\n     * @param recursive Clone child nodes as well.\n     * @returns A clone of the node.\n     */ Node.prototype.cloneNode = function(recursive) {\n        if (recursive === void 0) {\n            recursive = false;\n        }\n        return cloneNode(this, recursive);\n    };\n    return Node;\n}();\nexports.Node = Node;\n/**\n * A node that contains some data.\n */ var DataNode = /** @class */ function(_super) {\n    __extends(DataNode, _super);\n    /**\n     * @param data The content of the data node\n     */ function DataNode(data) {\n        var _this = _super.call(this) || this;\n        _this.data = data;\n        return _this;\n    }\n    Object.defineProperty(DataNode.prototype, \"nodeValue\", {\n        /**\n         * Same as {@link data}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.data;\n        },\n        set: function(data) {\n            this.data = data;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return DataNode;\n}(Node);\nexports.DataNode = DataNode;\n/**\n * Text within the document.\n */ var Text = /** @class */ function(_super) {\n    __extends(Text, _super);\n    function Text() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = domelementtype_1.ElementType.Text;\n        return _this;\n    }\n    Object.defineProperty(Text.prototype, \"nodeType\", {\n        get: function() {\n            return 3;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Text;\n}(DataNode);\nexports.Text = Text;\n/**\n * Comments within the document.\n */ var Comment = /** @class */ function(_super) {\n    __extends(Comment, _super);\n    function Comment() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = domelementtype_1.ElementType.Comment;\n        return _this;\n    }\n    Object.defineProperty(Comment.prototype, \"nodeType\", {\n        get: function() {\n            return 8;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Comment;\n}(DataNode);\nexports.Comment = Comment;\n/**\n * Processing instructions, including doc types.\n */ var ProcessingInstruction = /** @class */ function(_super) {\n    __extends(ProcessingInstruction, _super);\n    function ProcessingInstruction(name, data) {\n        var _this = _super.call(this, data) || this;\n        _this.name = name;\n        _this.type = domelementtype_1.ElementType.Directive;\n        return _this;\n    }\n    Object.defineProperty(ProcessingInstruction.prototype, \"nodeType\", {\n        get: function() {\n            return 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ProcessingInstruction;\n}(DataNode);\nexports.ProcessingInstruction = ProcessingInstruction;\n/**\n * A `Node` that can have children.\n */ var NodeWithChildren = /** @class */ function(_super) {\n    __extends(NodeWithChildren, _super);\n    /**\n     * @param children Children of the node. Only certain node types can have children.\n     */ function NodeWithChildren(children) {\n        var _this = _super.call(this) || this;\n        _this.children = children;\n        return _this;\n    }\n    Object.defineProperty(NodeWithChildren.prototype, \"firstChild\", {\n        // Aliases\n        /** First child of the node. */ get: function() {\n            var _a;\n            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, \"lastChild\", {\n        /** Last child of the node. */ get: function() {\n            return this.children.length > 0 ? this.children[this.children.length - 1] : null;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(NodeWithChildren.prototype, \"childNodes\", {\n        /**\n         * Same as {@link children}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.children;\n        },\n        set: function(children) {\n            this.children = children;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return NodeWithChildren;\n}(Node);\nexports.NodeWithChildren = NodeWithChildren;\nvar CDATA = /** @class */ function(_super) {\n    __extends(CDATA, _super);\n    function CDATA() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = domelementtype_1.ElementType.CDATA;\n        return _this;\n    }\n    Object.defineProperty(CDATA.prototype, \"nodeType\", {\n        get: function() {\n            return 4;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return CDATA;\n}(NodeWithChildren);\nexports.CDATA = CDATA;\n/**\n * The root node of the document.\n */ var Document = /** @class */ function(_super) {\n    __extends(Document, _super);\n    function Document() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = domelementtype_1.ElementType.Root;\n        return _this;\n    }\n    Object.defineProperty(Document.prototype, \"nodeType\", {\n        get: function() {\n            return 9;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Document;\n}(NodeWithChildren);\nexports.Document = Document;\n/**\n * An element within the DOM.\n */ var Element = /** @class */ function(_super) {\n    __extends(Element, _super);\n    /**\n     * @param name Name of the tag, eg. `div`, `span`.\n     * @param attribs Object mapping attribute names to attribute values.\n     * @param children Children of the node.\n     */ function Element(name, attribs, children, type) {\n        if (children === void 0) {\n            children = [];\n        }\n        if (type === void 0) {\n            type = name === \"script\" ? domelementtype_1.ElementType.Script : name === \"style\" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;\n        }\n        var _this = _super.call(this, children) || this;\n        _this.name = name;\n        _this.attribs = attribs;\n        _this.type = type;\n        return _this;\n    }\n    Object.defineProperty(Element.prototype, \"nodeType\", {\n        get: function() {\n            return 1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Element.prototype, \"tagName\", {\n        // DOM Level 1 aliases\n        /**\n         * Same as {@link name}.\n         * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.\n         */ get: function() {\n            return this.name;\n        },\n        set: function(name) {\n            this.name = name;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Element.prototype, \"attributes\", {\n        get: function() {\n            var _this = this;\n            return Object.keys(this.attribs).map(function(name) {\n                var _a, _b;\n                return {\n                    name: name,\n                    value: _this.attribs[name],\n                    namespace: (_a = _this[\"x-attribsNamespace\"]) === null || _a === void 0 ? void 0 : _a[name],\n                    prefix: (_b = _this[\"x-attribsPrefix\"]) === null || _b === void 0 ? void 0 : _b[name]\n                };\n            });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Element;\n}(NodeWithChildren);\nexports.Element = Element;\n/**\n * @param node Node to check.\n * @returns `true` if the node is a `Element`, `false` otherwise.\n */ function isTag(node) {\n    return (0, domelementtype_1.isTag)(node);\n}\nexports.isTag = isTag;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `CDATA`, `false` otherwise.\n */ function isCDATA(node) {\n    return node.type === domelementtype_1.ElementType.CDATA;\n}\nexports.isCDATA = isCDATA;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Text`, `false` otherwise.\n */ function isText(node) {\n    return node.type === domelementtype_1.ElementType.Text;\n}\nexports.isText = isText;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `Comment`, `false` otherwise.\n */ function isComment(node) {\n    return node.type === domelementtype_1.ElementType.Comment;\n}\nexports.isComment = isComment;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */ function isDirective(node) {\n    return node.type === domelementtype_1.ElementType.Directive;\n}\nexports.isDirective = isDirective;\n/**\n * @param node Node to check.\n * @returns `true` if the node has the type `ProcessingInstruction`, `false` otherwise.\n */ function isDocument(node) {\n    return node.type === domelementtype_1.ElementType.Root;\n}\nexports.isDocument = isDocument;\n/**\n * @param node Node to check.\n * @returns `true` if the node has children, `false` otherwise.\n */ function hasChildren(node) {\n    return Object.prototype.hasOwnProperty.call(node, \"children\");\n}\nexports.hasChildren = hasChildren;\n/**\n * Clone a node, and optionally its children.\n *\n * @param recursive Clone child nodes as well.\n * @returns A clone of the node.\n */ function cloneNode(node, recursive) {\n    if (recursive === void 0) {\n        recursive = false;\n    }\n    var result;\n    if (isText(node)) {\n        result = new Text(node.data);\n    } else if (isComment(node)) {\n        result = new Comment(node.data);\n    } else if (isTag(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_1 = new Element(node.name, __assign({}, node.attribs), children);\n        children.forEach(function(child) {\n            return child.parent = clone_1;\n        });\n        if (node.namespace != null) {\n            clone_1.namespace = node.namespace;\n        }\n        if (node[\"x-attribsNamespace\"]) {\n            clone_1[\"x-attribsNamespace\"] = __assign({}, node[\"x-attribsNamespace\"]);\n        }\n        if (node[\"x-attribsPrefix\"]) {\n            clone_1[\"x-attribsPrefix\"] = __assign({}, node[\"x-attribsPrefix\"]);\n        }\n        result = clone_1;\n    } else if (isCDATA(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_2 = new CDATA(children);\n        children.forEach(function(child) {\n            return child.parent = clone_2;\n        });\n        result = clone_2;\n    } else if (isDocument(node)) {\n        var children = recursive ? cloneChildren(node.children) : [];\n        var clone_3 = new Document(children);\n        children.forEach(function(child) {\n            return child.parent = clone_3;\n        });\n        if (node[\"x-mode\"]) {\n            clone_3[\"x-mode\"] = node[\"x-mode\"];\n        }\n        result = clone_3;\n    } else if (isDirective(node)) {\n        var instruction = new ProcessingInstruction(node.name, node.data);\n        if (node[\"x-name\"] != null) {\n            instruction[\"x-name\"] = node[\"x-name\"];\n            instruction[\"x-publicId\"] = node[\"x-publicId\"];\n            instruction[\"x-systemId\"] = node[\"x-systemId\"];\n        }\n        result = instruction;\n    } else {\n        throw new Error(\"Not implemented yet: \".concat(node.type));\n    }\n    result.startIndex = node.startIndex;\n    result.endIndex = node.endIndex;\n    if (node.sourceCodeLocation != null) {\n        result.sourceCodeLocation = node.sourceCodeLocation;\n    }\n    return result;\n}\nexports.cloneNode = cloneNode;\nfunction cloneChildren(childs) {\n    var children = childs.map(function(child) {\n        return cloneNode(child, true);\n    });\n    for(var i = 1; i < children.length; i++){\n        children[i].prev = children[i - 1];\n        children[i - 1].next = children[i];\n    }\n    return children;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domhandler/lib/node.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domutils/lib/feeds.js":
/*!********************************************!*\
  !*** ./node_modules/domutils/lib/feeds.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getFeed = void 0;\nvar stringify_js_1 = __webpack_require__(/*! ./stringify.js */ \"(app-pages-browser)/./node_modules/domutils/lib/stringify.js\");\nvar legacy_js_1 = __webpack_require__(/*! ./legacy.js */ \"(app-pages-browser)/./node_modules/domutils/lib/legacy.js\");\n/**\n * Get the feed object from the root of a DOM tree.\n *\n * @category Feeds\n * @param doc - The DOM to to extract the feed from.\n * @returns The feed.\n */ function getFeed(doc) {\n    var feedRoot = getOneElement(isValidFeed, doc);\n    return !feedRoot ? null : feedRoot.name === \"feed\" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);\n}\nexports.getFeed = getFeed;\n/**\n * Parse an Atom feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */ function getAtomFeed(feedRoot) {\n    var _a;\n    var childs = feedRoot.children;\n    var feed = {\n        type: \"atom\",\n        items: (0, legacy_js_1.getElementsByTagName)(\"entry\", childs).map(function(item) {\n            var _a;\n            var children = item.children;\n            var entry = {\n                media: getMediaElements(children)\n            };\n            addConditionally(entry, \"id\", \"id\", children);\n            addConditionally(entry, \"title\", \"title\", children);\n            var href = (_a = getOneElement(\"link\", children)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n            if (href) {\n                entry.link = href;\n            }\n            var description = fetch(\"summary\", children) || fetch(\"content\", children);\n            if (description) {\n                entry.description = description;\n            }\n            var pubDate = fetch(\"updated\", children);\n            if (pubDate) {\n                entry.pubDate = new Date(pubDate);\n            }\n            return entry;\n        })\n    };\n    addConditionally(feed, \"id\", \"id\", childs);\n    addConditionally(feed, \"title\", \"title\", childs);\n    var href = (_a = getOneElement(\"link\", childs)) === null || _a === void 0 ? void 0 : _a.attribs[\"href\"];\n    if (href) {\n        feed.link = href;\n    }\n    addConditionally(feed, \"description\", \"subtitle\", childs);\n    var updated = fetch(\"updated\", childs);\n    if (updated) {\n        feed.updated = new Date(updated);\n    }\n    addConditionally(feed, \"author\", \"email\", childs, true);\n    return feed;\n}\n/**\n * Parse a RSS feed.\n *\n * @param feedRoot The root of the feed.\n * @returns The parsed feed.\n */ function getRssFeed(feedRoot) {\n    var _a, _b;\n    var childs = (_b = (_a = getOneElement(\"channel\", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];\n    var feed = {\n        type: feedRoot.name.substr(0, 3),\n        id: \"\",\n        items: (0, legacy_js_1.getElementsByTagName)(\"item\", feedRoot.children).map(function(item) {\n            var children = item.children;\n            var entry = {\n                media: getMediaElements(children)\n            };\n            addConditionally(entry, \"id\", \"guid\", children);\n            addConditionally(entry, \"title\", \"title\", children);\n            addConditionally(entry, \"link\", \"link\", children);\n            addConditionally(entry, \"description\", \"description\", children);\n            var pubDate = fetch(\"pubDate\", children) || fetch(\"dc:date\", children);\n            if (pubDate) entry.pubDate = new Date(pubDate);\n            return entry;\n        })\n    };\n    addConditionally(feed, \"title\", \"title\", childs);\n    addConditionally(feed, \"link\", \"link\", childs);\n    addConditionally(feed, \"description\", \"description\", childs);\n    var updated = fetch(\"lastBuildDate\", childs);\n    if (updated) {\n        feed.updated = new Date(updated);\n    }\n    addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n    return feed;\n}\nvar MEDIA_KEYS_STRING = [\n    \"url\",\n    \"type\",\n    \"lang\"\n];\nvar MEDIA_KEYS_INT = [\n    \"fileSize\",\n    \"bitrate\",\n    \"framerate\",\n    \"samplingrate\",\n    \"channels\",\n    \"duration\",\n    \"height\",\n    \"width\"\n];\n/**\n * Get all media elements of a feed item.\n *\n * @param where Nodes to search in.\n * @returns Media elements.\n */ function getMediaElements(where) {\n    return (0, legacy_js_1.getElementsByTagName)(\"media:content\", where).map(function(elem) {\n        var attribs = elem.attribs;\n        var media = {\n            medium: attribs[\"medium\"],\n            isDefault: !!attribs[\"isDefault\"]\n        };\n        for(var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++){\n            var attrib = MEDIA_KEYS_STRING_1[_i];\n            if (attribs[attrib]) {\n                media[attrib] = attribs[attrib];\n            }\n        }\n        for(var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++){\n            var attrib = MEDIA_KEYS_INT_1[_a];\n            if (attribs[attrib]) {\n                media[attrib] = parseInt(attribs[attrib], 10);\n            }\n        }\n        if (attribs[\"expression\"]) {\n            media.expression = attribs[\"expression\"];\n        }\n        return media;\n    });\n}\n/**\n * Get one element by tag name.\n *\n * @param tagName Tag name to look for\n * @param node Node to search in\n * @returns The element or null\n */ function getOneElement(tagName, node) {\n    return (0, legacy_js_1.getElementsByTagName)(tagName, node, true, 1)[0];\n}\n/**\n * Get the text content of an element with a certain tag name.\n *\n * @param tagName Tag name to look for.\n * @param where Node to search in.\n * @param recurse Whether to recurse into child nodes.\n * @returns The text content of the element.\n */ function fetch(tagName, where, recurse) {\n    if (recurse === void 0) {\n        recurse = false;\n    }\n    return (0, stringify_js_1.textContent)((0, legacy_js_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();\n}\n/**\n * Adds a property to an object if it has a value.\n *\n * @param obj Object to be extended\n * @param prop Property name\n * @param tagName Tag name that contains the conditionally added property\n * @param where Element to search for the property\n * @param recurse Whether to recurse into child nodes.\n */ function addConditionally(obj, prop, tagName, where, recurse) {\n    if (recurse === void 0) {\n        recurse = false;\n    }\n    var val = fetch(tagName, where, recurse);\n    if (val) obj[prop] = val;\n}\n/**\n * Checks if an element is a feed root node.\n *\n * @param value The name of the element to check.\n * @returns Whether an element is a feed root node.\n */ function isValidFeed(value) {\n    return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n} //# sourceMappingURL=feeds.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domutils/lib/feeds.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domutils/lib/helpers.js":
/*!**********************************************!*\
  !*** ./node_modules/domutils/lib/helpers.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.uniqueSort = exports.compareDocumentPosition = exports.DocumentPosition = exports.removeSubsets = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\n/**\n * Given an array of nodes, remove any member that is contained by another\n * member.\n *\n * @category Helpers\n * @param nodes Nodes to filter.\n * @returns Remaining nodes that aren't contained by other nodes.\n */ function removeSubsets(nodes) {\n    var idx = nodes.length;\n    /*\n     * Check if each node (or one of its ancestors) is already contained in the\n     * array.\n     */ while(--idx >= 0){\n        var node = nodes[idx];\n        /*\n         * Remove the node if it is not unique.\n         * We are going through the array from the end, so we only\n         * have to check nodes that preceed the node under consideration in the array.\n         */ if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {\n            nodes.splice(idx, 1);\n            continue;\n        }\n        for(var ancestor = node.parent; ancestor; ancestor = ancestor.parent){\n            if (nodes.includes(ancestor)) {\n                nodes.splice(idx, 1);\n                break;\n            }\n        }\n    }\n    return nodes;\n}\nexports.removeSubsets = removeSubsets;\n/**\n * @category Helpers\n * @see {@link http://dom.spec.whatwg.org/#dom-node-comparedocumentposition}\n */ var DocumentPosition;\n(function(DocumentPosition) {\n    DocumentPosition[DocumentPosition[\"DISCONNECTED\"] = 1] = \"DISCONNECTED\";\n    DocumentPosition[DocumentPosition[\"PRECEDING\"] = 2] = \"PRECEDING\";\n    DocumentPosition[DocumentPosition[\"FOLLOWING\"] = 4] = \"FOLLOWING\";\n    DocumentPosition[DocumentPosition[\"CONTAINS\"] = 8] = \"CONTAINS\";\n    DocumentPosition[DocumentPosition[\"CONTAINED_BY\"] = 16] = \"CONTAINED_BY\";\n})(DocumentPosition = exports.DocumentPosition || (exports.DocumentPosition = {}));\n/**\n * Compare the position of one node against another node in any other document,\n * returning a bitmask with the values from {@link DocumentPosition}.\n *\n * Document order:\n * > There is an ordering, document order, defined on all the nodes in the\n * > document corresponding to the order in which the first character of the\n * > XML representation of each node occurs in the XML representation of the\n * > document after expansion of general entities. Thus, the document element\n * > node will be the first node. Element nodes occur before their children.\n * > Thus, document order orders element nodes in order of the occurrence of\n * > their start-tag in the XML (after expansion of entities). The attribute\n * > nodes of an element occur after the element and before its children. The\n * > relative order of attribute nodes is implementation-dependent.\n *\n * Source:\n * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order\n *\n * @category Helpers\n * @param nodeA The first node to use in the comparison\n * @param nodeB The second node to use in the comparison\n * @returns A bitmask describing the input nodes' relative position.\n *\n * See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for\n * a description of these values.\n */ function compareDocumentPosition(nodeA, nodeB) {\n    var aParents = [];\n    var bParents = [];\n    if (nodeA === nodeB) {\n        return 0;\n    }\n    var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;\n    while(current){\n        aParents.unshift(current);\n        current = current.parent;\n    }\n    current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;\n    while(current){\n        bParents.unshift(current);\n        current = current.parent;\n    }\n    var maxIdx = Math.min(aParents.length, bParents.length);\n    var idx = 0;\n    while(idx < maxIdx && aParents[idx] === bParents[idx]){\n        idx++;\n    }\n    if (idx === 0) {\n        return DocumentPosition.DISCONNECTED;\n    }\n    var sharedParent = aParents[idx - 1];\n    var siblings = sharedParent.children;\n    var aSibling = aParents[idx];\n    var bSibling = bParents[idx];\n    if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {\n        if (sharedParent === nodeB) {\n            return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;\n        }\n        return DocumentPosition.FOLLOWING;\n    }\n    if (sharedParent === nodeA) {\n        return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;\n    }\n    return DocumentPosition.PRECEDING;\n}\nexports.compareDocumentPosition = compareDocumentPosition;\n/**\n * Sort an array of nodes based on their relative position in the document,\n * removing any duplicate nodes. If the array contains nodes that do not belong\n * to the same document, sort order is unspecified.\n *\n * @category Helpers\n * @param nodes Array of DOM nodes.\n * @returns Collection of unique nodes, sorted in document order.\n */ function uniqueSort(nodes) {\n    nodes = nodes.filter(function(node, i, arr) {\n        return !arr.includes(node, i + 1);\n    });\n    nodes.sort(function(a, b) {\n        var relative = compareDocumentPosition(a, b);\n        if (relative & DocumentPosition.PRECEDING) {\n            return -1;\n        } else if (relative & DocumentPosition.FOLLOWING) {\n            return 1;\n        }\n        return 0;\n    });\n    return nodes;\n}\nexports.uniqueSort = uniqueSort; //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domutils/lib/helpers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domutils/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/domutils/lib/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = (void 0) && (void 0).__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hasChildren = exports.isDocument = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;\n__exportStar(__webpack_require__(/*! ./stringify.js */ \"(app-pages-browser)/./node_modules/domutils/lib/stringify.js\"), exports);\n__exportStar(__webpack_require__(/*! ./traversal.js */ \"(app-pages-browser)/./node_modules/domutils/lib/traversal.js\"), exports);\n__exportStar(__webpack_require__(/*! ./manipulation.js */ \"(app-pages-browser)/./node_modules/domutils/lib/manipulation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./querying.js */ \"(app-pages-browser)/./node_modules/domutils/lib/querying.js\"), exports);\n__exportStar(__webpack_require__(/*! ./legacy.js */ \"(app-pages-browser)/./node_modules/domutils/lib/legacy.js\"), exports);\n__exportStar(__webpack_require__(/*! ./helpers.js */ \"(app-pages-browser)/./node_modules/domutils/lib/helpers.js\"), exports);\n__exportStar(__webpack_require__(/*! ./feeds.js */ \"(app-pages-browser)/./node_modules/domutils/lib/feeds.js\"), exports);\n/** @deprecated Use these methods from `domhandler` directly. */ var domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nObject.defineProperty(exports, \"isTag\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_1.isTag;\n    }\n}));\nObject.defineProperty(exports, \"isCDATA\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_1.isCDATA;\n    }\n}));\nObject.defineProperty(exports, \"isText\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_1.isText;\n    }\n}));\nObject.defineProperty(exports, \"isComment\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_1.isComment;\n    }\n}));\nObject.defineProperty(exports, \"isDocument\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_1.isDocument;\n    }\n}));\nObject.defineProperty(exports, \"hasChildren\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_1.hasChildren;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVNaLENBQUMsRUFBRWEsUUFBTztJQUNqRSxJQUFLLElBQUlDLEtBQUtkLEVBQUcsSUFBSWMsTUFBTSxhQUFhLENBQUNqQixPQUFPa0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ0osVUFBU0MsSUFBSWxCLGdCQUFnQmlCLFVBQVNiLEdBQUdjO0FBQzNIO0FBQ0FqQiw4Q0FBNkM7SUFBRXFCLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RMLG1CQUFtQixHQUFHQSxrQkFBa0IsR0FBR0EsaUJBQWlCLEdBQUdBLGNBQWMsR0FBR0EsZUFBZSxHQUFHQSxhQUFhLEdBQUcsS0FBSztBQUN2SEQsYUFBYWEsbUJBQU9BLENBQUMsb0ZBQWdCLEdBQUdaO0FBQ3hDRCxhQUFhYSxtQkFBT0EsQ0FBQyxvRkFBZ0IsR0FBR1o7QUFDeENELGFBQWFhLG1CQUFPQSxDQUFDLDBGQUFtQixHQUFHWjtBQUMzQ0QsYUFBYWEsbUJBQU9BLENBQUMsa0ZBQWUsR0FBR1o7QUFDdkNELGFBQWFhLG1CQUFPQSxDQUFDLDhFQUFhLEdBQUdaO0FBQ3JDRCxhQUFhYSxtQkFBT0EsQ0FBQyxnRkFBYyxHQUFHWjtBQUN0Q0QsYUFBYWEsbUJBQU9BLENBQUMsNEVBQVksR0FBR1o7QUFDcEMsOERBQThELEdBQzlELElBQUlhLGVBQWVELG1CQUFPQSxDQUFDLDhFQUFZO0FBQ3ZDNUIseUNBQXdDO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9nQixhQUFhRixLQUFLO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDOUczQiwyQ0FBMEM7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT2dCLGFBQWFILE9BQU87SUFBRTtBQUFFLENBQUMsRUFBQztBQUNsSDFCLDBDQUF5QztJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPZ0IsYUFBYUosTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2hIekIsNkNBQTRDO0lBQUVZLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9nQixhQUFhTCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdEh4Qiw4Q0FBNkM7SUFBRVksWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT2dCLGFBQWFOLFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN4SHZCLCtDQUE4QztJQUFFWSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPZ0IsYUFBYVAsV0FBVztJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQzFILGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2luZGV4LmpzP2JmMjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzQ2hpbGRyZW4gPSBleHBvcnRzLmlzRG9jdW1lbnQgPSBleHBvcnRzLmlzQ29tbWVudCA9IGV4cG9ydHMuaXNUZXh0ID0gZXhwb3J0cy5pc0NEQVRBID0gZXhwb3J0cy5pc1RhZyA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RyYXZlcnNhbC5qc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWFuaXB1bGF0aW9uLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9xdWVyeWluZy5qc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbGVnYWN5LmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9mZWVkcy5qc1wiKSwgZXhwb3J0cyk7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIHRoZXNlIG1ldGhvZHMgZnJvbSBgZG9taGFuZGxlcmAgZGlyZWN0bHkuICovXG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1RhZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9taGFuZGxlcl8xLmlzVGFnOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNDREFUQVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9taGFuZGxlcl8xLmlzQ0RBVEE7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1RleHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5pc1RleHQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0NvbW1lbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5pc0NvbW1lbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0RvY3VtZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuaXNEb2N1bWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImhhc0NoaWxkcmVuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW47IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19leHBvcnRTdGFyIiwiZXhwb3J0cyIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJ2YWx1ZSIsImhhc0NoaWxkcmVuIiwiaXNEb2N1bWVudCIsImlzQ29tbWVudCIsImlzVGV4dCIsImlzQ0RBVEEiLCJpc1RhZyIsInJlcXVpcmUiLCJkb21oYW5kbGVyXzEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domutils/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domutils/lib/legacy.js":
/*!*********************************************!*\
  !*** ./node_modules/domutils/lib/legacy.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nvar querying_js_1 = __webpack_require__(/*! ./querying.js */ \"(app-pages-browser)/./node_modules/domutils/lib/querying.js\");\n/**\n * A map of functions to check nodes against.\n */ var Checks = {\n    tag_name: function(name) {\n        if (typeof name === \"function\") {\n            return function(elem) {\n                return (0, domhandler_1.isTag)(elem) && name(elem.name);\n            };\n        } else if (name === \"*\") {\n            return domhandler_1.isTag;\n        }\n        return function(elem) {\n            return (0, domhandler_1.isTag)(elem) && elem.name === name;\n        };\n    },\n    tag_type: function(type) {\n        if (typeof type === \"function\") {\n            return function(elem) {\n                return type(elem.type);\n            };\n        }\n        return function(elem) {\n            return elem.type === type;\n        };\n    },\n    tag_contains: function(data) {\n        if (typeof data === \"function\") {\n            return function(elem) {\n                return (0, domhandler_1.isText)(elem) && data(elem.data);\n            };\n        }\n        return function(elem) {\n            return (0, domhandler_1.isText)(elem) && elem.data === data;\n        };\n    }\n};\n/**\n * Returns a function to check whether a node has an attribute with a particular\n * value.\n *\n * @param attrib Attribute to check.\n * @param value Attribute value to look for.\n * @returns A function to check whether the a node has an attribute with a\n *   particular value.\n */ function getAttribCheck(attrib, value) {\n    if (typeof value === \"function\") {\n        return function(elem) {\n            return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);\n        };\n    }\n    return function(elem) {\n        return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;\n    };\n}\n/**\n * Returns a function that returns `true` if either of the input functions\n * returns `true` for a node.\n *\n * @param a First function to combine.\n * @param b Second function to combine.\n * @returns A function taking a node and returning `true` if either of the input\n *   functions returns `true` for the node.\n */ function combineFuncs(a, b) {\n    return function(elem) {\n        return a(elem) || b(elem);\n    };\n}\n/**\n * Returns a function that executes all checks in `options` and returns `true`\n * if any of them match a node.\n *\n * @param options An object describing nodes to look for.\n * @returns A function that executes all checks in `options` and returns `true`\n *   if any of them match a node.\n */ function compileTest(options) {\n    var funcs = Object.keys(options).map(function(key) {\n        var value = options[key];\n        return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);\n    });\n    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);\n}\n/**\n * Checks whether a node matches the description in `options`.\n *\n * @category Legacy Query Functions\n * @param options An object describing nodes to look for.\n * @param node The element to test.\n * @returns Whether the element matches the description in `options`.\n */ function testElement(options, node) {\n    var test = compileTest(options);\n    return test ? test(node) : true;\n}\nexports.testElement = testElement;\n/**\n * Returns all nodes that match `options`.\n *\n * @category Legacy Query Functions\n * @param options An object describing nodes to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes that match `options`.\n */ function getElements(options, nodes, recurse, limit) {\n    if (limit === void 0) {\n        limit = Infinity;\n    }\n    var test = compileTest(options);\n    return test ? (0, querying_js_1.filter)(test, nodes, recurse, limit) : [];\n}\nexports.getElements = getElements;\n/**\n * Returns the node with the supplied ID.\n *\n * @category Legacy Query Functions\n * @param id The unique ID attribute value to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @returns The node with the supplied ID.\n */ function getElementById(id, nodes, recurse) {\n    if (recurse === void 0) {\n        recurse = true;\n    }\n    if (!Array.isArray(nodes)) nodes = [\n        nodes\n    ];\n    return (0, querying_js_1.findOne)(getAttribCheck(\"id\", id), nodes, recurse);\n}\nexports.getElementById = getElementById;\n/**\n * Returns all nodes with the supplied `tagName`.\n *\n * @category Legacy Query Functions\n * @param tagName Tag name to search for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `tagName`.\n */ function getElementsByTagName(tagName, nodes, recurse, limit) {\n    if (recurse === void 0) {\n        recurse = true;\n    }\n    if (limit === void 0) {\n        limit = Infinity;\n    }\n    return (0, querying_js_1.filter)(Checks[\"tag_name\"](tagName), nodes, recurse, limit);\n}\nexports.getElementsByTagName = getElementsByTagName;\n/**\n * Returns all nodes with the supplied `type`.\n *\n * @category Legacy Query Functions\n * @param type Element type to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `type`.\n */ function getElementsByTagType(type, nodes, recurse, limit) {\n    if (recurse === void 0) {\n        recurse = true;\n    }\n    if (limit === void 0) {\n        limit = Infinity;\n    }\n    return (0, querying_js_1.filter)(Checks[\"tag_type\"](type), nodes, recurse, limit);\n}\nexports.getElementsByTagType = getElementsByTagType; //# sourceMappingURL=legacy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domutils/lib/legacy.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domutils/lib/manipulation.js":
/*!***************************************************!*\
  !*** ./node_modules/domutils/lib/manipulation.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;\n/**\n * Remove an element from the dom\n *\n * @category Manipulation\n * @param elem The element to be removed\n */ function removeElement(elem) {\n    if (elem.prev) elem.prev.next = elem.next;\n    if (elem.next) elem.next.prev = elem.prev;\n    if (elem.parent) {\n        var childs = elem.parent.children;\n        var childsIndex = childs.lastIndexOf(elem);\n        if (childsIndex >= 0) {\n            childs.splice(childsIndex, 1);\n        }\n    }\n    elem.next = null;\n    elem.prev = null;\n    elem.parent = null;\n}\nexports.removeElement = removeElement;\n/**\n * Replace an element in the dom\n *\n * @category Manipulation\n * @param elem The element to be replaced\n * @param replacement The element to be added\n */ function replaceElement(elem, replacement) {\n    var prev = replacement.prev = elem.prev;\n    if (prev) {\n        prev.next = replacement;\n    }\n    var next = replacement.next = elem.next;\n    if (next) {\n        next.prev = replacement;\n    }\n    var parent = replacement.parent = elem.parent;\n    if (parent) {\n        var childs = parent.children;\n        childs[childs.lastIndexOf(elem)] = replacement;\n        elem.parent = null;\n    }\n}\nexports.replaceElement = replaceElement;\n/**\n * Append a child to an element.\n *\n * @category Manipulation\n * @param parent The element to append to.\n * @param child The element to be added as a child.\n */ function appendChild(parent, child) {\n    removeElement(child);\n    child.next = null;\n    child.parent = parent;\n    if (parent.children.push(child) > 1) {\n        var sibling = parent.children[parent.children.length - 2];\n        sibling.next = child;\n        child.prev = sibling;\n    } else {\n        child.prev = null;\n    }\n}\nexports.appendChild = appendChild;\n/**\n * Append an element after another.\n *\n * @category Manipulation\n * @param elem The element to append after.\n * @param next The element be added.\n */ function append(elem, next) {\n    removeElement(next);\n    var parent = elem.parent;\n    var currNext = elem.next;\n    next.next = currNext;\n    next.prev = elem;\n    elem.next = next;\n    next.parent = parent;\n    if (currNext) {\n        currNext.prev = next;\n        if (parent) {\n            var childs = parent.children;\n            childs.splice(childs.lastIndexOf(currNext), 0, next);\n        }\n    } else if (parent) {\n        parent.children.push(next);\n    }\n}\nexports.append = append;\n/**\n * Prepend a child to an element.\n *\n * @category Manipulation\n * @param parent The element to prepend before.\n * @param child The element to be added as a child.\n */ function prependChild(parent, child) {\n    removeElement(child);\n    child.parent = parent;\n    child.prev = null;\n    if (parent.children.unshift(child) !== 1) {\n        var sibling = parent.children[1];\n        sibling.prev = child;\n        child.next = sibling;\n    } else {\n        child.next = null;\n    }\n}\nexports.prependChild = prependChild;\n/**\n * Prepend an element before another.\n *\n * @category Manipulation\n * @param elem The element to prepend before.\n * @param prev The element be added.\n */ function prepend(elem, prev) {\n    removeElement(prev);\n    var parent = elem.parent;\n    if (parent) {\n        var childs = parent.children;\n        childs.splice(childs.indexOf(elem), 0, prev);\n    }\n    if (elem.prev) {\n        elem.prev.next = prev;\n    }\n    prev.parent = parent;\n    prev.prev = elem.prev;\n    prev.next = elem;\n    elem.prev = prev;\n}\nexports.prepend = prepend; //# sourceMappingURL=manipulation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvbWFuaXB1bGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUdBLG9CQUFvQixHQUFHQSxjQUFjLEdBQUdBLG1CQUFtQixHQUFHQSxzQkFBc0IsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUN0STs7Ozs7Q0FLQyxHQUNELFNBQVNPLGNBQWNDLElBQUk7SUFDdkIsSUFBSUEsS0FBS0MsSUFBSSxFQUNURCxLQUFLQyxJQUFJLENBQUNDLElBQUksR0FBR0YsS0FBS0UsSUFBSTtJQUM5QixJQUFJRixLQUFLRSxJQUFJLEVBQ1RGLEtBQUtFLElBQUksQ0FBQ0QsSUFBSSxHQUFHRCxLQUFLQyxJQUFJO0lBQzlCLElBQUlELEtBQUtHLE1BQU0sRUFBRTtRQUNiLElBQUlDLFNBQVNKLEtBQUtHLE1BQU0sQ0FBQ0UsUUFBUTtRQUNqQyxJQUFJQyxjQUFjRixPQUFPRyxXQUFXLENBQUNQO1FBQ3JDLElBQUlNLGVBQWUsR0FBRztZQUNsQkYsT0FBT0ksTUFBTSxDQUFDRixhQUFhO1FBQy9CO0lBQ0o7SUFDQU4sS0FBS0UsSUFBSSxHQUFHO0lBQ1pGLEtBQUtDLElBQUksR0FBRztJQUNaRCxLQUFLRyxNQUFNLEdBQUc7QUFDbEI7QUFDQVgscUJBQXFCLEdBQUdPO0FBQ3hCOzs7Ozs7Q0FNQyxHQUNELFNBQVNELGVBQWVFLElBQUksRUFBRVMsV0FBVztJQUNyQyxJQUFJUixPQUFRUSxZQUFZUixJQUFJLEdBQUdELEtBQUtDLElBQUk7SUFDeEMsSUFBSUEsTUFBTTtRQUNOQSxLQUFLQyxJQUFJLEdBQUdPO0lBQ2hCO0lBQ0EsSUFBSVAsT0FBUU8sWUFBWVAsSUFBSSxHQUFHRixLQUFLRSxJQUFJO0lBQ3hDLElBQUlBLE1BQU07UUFDTkEsS0FBS0QsSUFBSSxHQUFHUTtJQUNoQjtJQUNBLElBQUlOLFNBQVVNLFlBQVlOLE1BQU0sR0FBR0gsS0FBS0csTUFBTTtJQUM5QyxJQUFJQSxRQUFRO1FBQ1IsSUFBSUMsU0FBU0QsT0FBT0UsUUFBUTtRQUM1QkQsTUFBTSxDQUFDQSxPQUFPRyxXQUFXLENBQUNQLE1BQU0sR0FBR1M7UUFDbkNULEtBQUtHLE1BQU0sR0FBRztJQUNsQjtBQUNKO0FBQ0FYLHNCQUFzQixHQUFHTTtBQUN6Qjs7Ozs7O0NBTUMsR0FDRCxTQUFTRCxZQUFZTSxNQUFNLEVBQUVPLEtBQUs7SUFDOUJYLGNBQWNXO0lBQ2RBLE1BQU1SLElBQUksR0FBRztJQUNiUSxNQUFNUCxNQUFNLEdBQUdBO0lBQ2YsSUFBSUEsT0FBT0UsUUFBUSxDQUFDTSxJQUFJLENBQUNELFNBQVMsR0FBRztRQUNqQyxJQUFJRSxVQUFVVCxPQUFPRSxRQUFRLENBQUNGLE9BQU9FLFFBQVEsQ0FBQ1EsTUFBTSxHQUFHLEVBQUU7UUFDekRELFFBQVFWLElBQUksR0FBR1E7UUFDZkEsTUFBTVQsSUFBSSxHQUFHVztJQUNqQixPQUNLO1FBQ0RGLE1BQU1ULElBQUksR0FBRztJQUNqQjtBQUNKO0FBQ0FULG1CQUFtQixHQUFHSztBQUN0Qjs7Ozs7O0NBTUMsR0FDRCxTQUFTRCxPQUFPSSxJQUFJLEVBQUVFLElBQUk7SUFDdEJILGNBQWNHO0lBQ2QsSUFBSUMsU0FBU0gsS0FBS0csTUFBTTtJQUN4QixJQUFJVyxXQUFXZCxLQUFLRSxJQUFJO0lBQ3hCQSxLQUFLQSxJQUFJLEdBQUdZO0lBQ1paLEtBQUtELElBQUksR0FBR0Q7SUFDWkEsS0FBS0UsSUFBSSxHQUFHQTtJQUNaQSxLQUFLQyxNQUFNLEdBQUdBO0lBQ2QsSUFBSVcsVUFBVTtRQUNWQSxTQUFTYixJQUFJLEdBQUdDO1FBQ2hCLElBQUlDLFFBQVE7WUFDUixJQUFJQyxTQUFTRCxPQUFPRSxRQUFRO1lBQzVCRCxPQUFPSSxNQUFNLENBQUNKLE9BQU9HLFdBQVcsQ0FBQ08sV0FBVyxHQUFHWjtRQUNuRDtJQUNKLE9BQ0ssSUFBSUMsUUFBUTtRQUNiQSxPQUFPRSxRQUFRLENBQUNNLElBQUksQ0FBQ1Q7SUFDekI7QUFDSjtBQUNBVixjQUFjLEdBQUdJO0FBQ2pCOzs7Ozs7Q0FNQyxHQUNELFNBQVNELGFBQWFRLE1BQU0sRUFBRU8sS0FBSztJQUMvQlgsY0FBY1c7SUFDZEEsTUFBTVAsTUFBTSxHQUFHQTtJQUNmTyxNQUFNVCxJQUFJLEdBQUc7SUFDYixJQUFJRSxPQUFPRSxRQUFRLENBQUNVLE9BQU8sQ0FBQ0wsV0FBVyxHQUFHO1FBQ3RDLElBQUlFLFVBQVVULE9BQU9FLFFBQVEsQ0FBQyxFQUFFO1FBQ2hDTyxRQUFRWCxJQUFJLEdBQUdTO1FBQ2ZBLE1BQU1SLElBQUksR0FBR1U7SUFDakIsT0FDSztRQUNERixNQUFNUixJQUFJLEdBQUc7SUFDakI7QUFDSjtBQUNBVixvQkFBb0IsR0FBR0c7QUFDdkI7Ozs7OztDQU1DLEdBQ0QsU0FBU0QsUUFBUU0sSUFBSSxFQUFFQyxJQUFJO0lBQ3ZCRixjQUFjRTtJQUNkLElBQUlFLFNBQVNILEtBQUtHLE1BQU07SUFDeEIsSUFBSUEsUUFBUTtRQUNSLElBQUlDLFNBQVNELE9BQU9FLFFBQVE7UUFDNUJELE9BQU9JLE1BQU0sQ0FBQ0osT0FBT1ksT0FBTyxDQUFDaEIsT0FBTyxHQUFHQztJQUMzQztJQUNBLElBQUlELEtBQUtDLElBQUksRUFBRTtRQUNYRCxLQUFLQyxJQUFJLENBQUNDLElBQUksR0FBR0Q7SUFDckI7SUFDQUEsS0FBS0UsTUFBTSxHQUFHQTtJQUNkRixLQUFLQSxJQUFJLEdBQUdELEtBQUtDLElBQUk7SUFDckJBLEtBQUtDLElBQUksR0FBR0Y7SUFDWkEsS0FBS0MsSUFBSSxHQUFHQTtBQUNoQjtBQUNBVCxlQUFlLEdBQUdFLFNBQ2xCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL21hbmlwdWxhdGlvbi5qcz85M2RjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmVwZW5kID0gZXhwb3J0cy5wcmVwZW5kQ2hpbGQgPSBleHBvcnRzLmFwcGVuZCA9IGV4cG9ydHMuYXBwZW5kQ2hpbGQgPSBleHBvcnRzLnJlcGxhY2VFbGVtZW50ID0gZXhwb3J0cy5yZW1vdmVFbGVtZW50ID0gdm9pZCAwO1xuLyoqXG4gKiBSZW1vdmUgYW4gZWxlbWVudCBmcm9tIHRoZSBkb21cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBiZSByZW1vdmVkXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWxlbSkge1xuICAgIGlmIChlbGVtLnByZXYpXG4gICAgICAgIGVsZW0ucHJldi5uZXh0ID0gZWxlbS5uZXh0O1xuICAgIGlmIChlbGVtLm5leHQpXG4gICAgICAgIGVsZW0ubmV4dC5wcmV2ID0gZWxlbS5wcmV2O1xuICAgIGlmIChlbGVtLnBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGRzID0gZWxlbS5wYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIHZhciBjaGlsZHNJbmRleCA9IGNoaWxkcy5sYXN0SW5kZXhPZihlbGVtKTtcbiAgICAgICAgaWYgKGNoaWxkc0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNoaWxkcy5zcGxpY2UoY2hpbGRzSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsZW0ubmV4dCA9IG51bGw7XG4gICAgZWxlbS5wcmV2ID0gbnVsbDtcbiAgICBlbGVtLnBhcmVudCA9IG51bGw7XG59XG5leHBvcnRzLnJlbW92ZUVsZW1lbnQgPSByZW1vdmVFbGVtZW50O1xuLyoqXG4gKiBSZXBsYWNlIGFuIGVsZW1lbnQgaW4gdGhlIGRvbVxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGJlIHJlcGxhY2VkXG4gKiBAcGFyYW0gcmVwbGFjZW1lbnQgVGhlIGVsZW1lbnQgdG8gYmUgYWRkZWRcbiAqL1xuZnVuY3Rpb24gcmVwbGFjZUVsZW1lbnQoZWxlbSwgcmVwbGFjZW1lbnQpIHtcbiAgICB2YXIgcHJldiA9IChyZXBsYWNlbWVudC5wcmV2ID0gZWxlbS5wcmV2KTtcbiAgICBpZiAocHJldikge1xuICAgICAgICBwcmV2Lm5leHQgPSByZXBsYWNlbWVudDtcbiAgICB9XG4gICAgdmFyIG5leHQgPSAocmVwbGFjZW1lbnQubmV4dCA9IGVsZW0ubmV4dCk7XG4gICAgaWYgKG5leHQpIHtcbiAgICAgICAgbmV4dC5wcmV2ID0gcmVwbGFjZW1lbnQ7XG4gICAgfVxuICAgIHZhciBwYXJlbnQgPSAocmVwbGFjZW1lbnQucGFyZW50ID0gZWxlbS5wYXJlbnQpO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgY2hpbGRzW2NoaWxkcy5sYXN0SW5kZXhPZihlbGVtKV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgZWxlbS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMucmVwbGFjZUVsZW1lbnQgPSByZXBsYWNlRWxlbWVudDtcbi8qKlxuICogQXBwZW5kIGEgY2hpbGQgdG8gYW4gZWxlbWVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAcGFyYW0gcGFyZW50IFRoZSBlbGVtZW50IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSBjaGlsZCBUaGUgZWxlbWVudCB0byBiZSBhZGRlZCBhcyBhIGNoaWxkLlxuICovXG5mdW5jdGlvbiBhcHBlbmRDaGlsZChwYXJlbnQsIGNoaWxkKSB7XG4gICAgcmVtb3ZlRWxlbWVudChjaGlsZCk7XG4gICAgY2hpbGQubmV4dCA9IG51bGw7XG4gICAgY2hpbGQucGFyZW50ID0gcGFyZW50O1xuICAgIGlmIChwYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCkgPiAxKSB7XG4gICAgICAgIHZhciBzaWJsaW5nID0gcGFyZW50LmNoaWxkcmVuW3BhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAyXTtcbiAgICAgICAgc2libGluZy5uZXh0ID0gY2hpbGQ7XG4gICAgICAgIGNoaWxkLnByZXYgPSBzaWJsaW5nO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hpbGQucHJldiA9IG51bGw7XG4gICAgfVxufVxuZXhwb3J0cy5hcHBlbmRDaGlsZCA9IGFwcGVuZENoaWxkO1xuLyoqXG4gKiBBcHBlbmQgYW4gZWxlbWVudCBhZnRlciBhbm90aGVyLlxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGFwcGVuZCBhZnRlci5cbiAqIEBwYXJhbSBuZXh0IFRoZSBlbGVtZW50IGJlIGFkZGVkLlxuICovXG5mdW5jdGlvbiBhcHBlbmQoZWxlbSwgbmV4dCkge1xuICAgIHJlbW92ZUVsZW1lbnQobmV4dCk7XG4gICAgdmFyIHBhcmVudCA9IGVsZW0ucGFyZW50O1xuICAgIHZhciBjdXJyTmV4dCA9IGVsZW0ubmV4dDtcbiAgICBuZXh0Lm5leHQgPSBjdXJyTmV4dDtcbiAgICBuZXh0LnByZXYgPSBlbGVtO1xuICAgIGVsZW0ubmV4dCA9IG5leHQ7XG4gICAgbmV4dC5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgaWYgKGN1cnJOZXh0KSB7XG4gICAgICAgIGN1cnJOZXh0LnByZXYgPSBuZXh0O1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRzID0gcGFyZW50LmNoaWxkcmVuO1xuICAgICAgICAgICAgY2hpbGRzLnNwbGljZShjaGlsZHMubGFzdEluZGV4T2YoY3Vyck5leHQpLCAwLCBuZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobmV4dCk7XG4gICAgfVxufVxuZXhwb3J0cy5hcHBlbmQgPSBhcHBlbmQ7XG4vKipcbiAqIFByZXBlbmQgYSBjaGlsZCB0byBhbiBlbGVtZW50LlxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBwYXJhbSBwYXJlbnQgVGhlIGVsZW1lbnQgdG8gcHJlcGVuZCBiZWZvcmUuXG4gKiBAcGFyYW0gY2hpbGQgVGhlIGVsZW1lbnQgdG8gYmUgYWRkZWQgYXMgYSBjaGlsZC5cbiAqL1xuZnVuY3Rpb24gcHJlcGVuZENoaWxkKHBhcmVudCwgY2hpbGQpIHtcbiAgICByZW1vdmVFbGVtZW50KGNoaWxkKTtcbiAgICBjaGlsZC5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgY2hpbGQucHJldiA9IG51bGw7XG4gICAgaWYgKHBhcmVudC5jaGlsZHJlbi51bnNoaWZ0KGNoaWxkKSAhPT0gMSkge1xuICAgICAgICB2YXIgc2libGluZyA9IHBhcmVudC5jaGlsZHJlblsxXTtcbiAgICAgICAgc2libGluZy5wcmV2ID0gY2hpbGQ7XG4gICAgICAgIGNoaWxkLm5leHQgPSBzaWJsaW5nO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2hpbGQubmV4dCA9IG51bGw7XG4gICAgfVxufVxuZXhwb3J0cy5wcmVwZW5kQ2hpbGQgPSBwcmVwZW5kQ2hpbGQ7XG4vKipcbiAqIFByZXBlbmQgYW4gZWxlbWVudCBiZWZvcmUgYW5vdGhlci5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBwcmVwZW5kIGJlZm9yZS5cbiAqIEBwYXJhbSBwcmV2IFRoZSBlbGVtZW50IGJlIGFkZGVkLlxuICovXG5mdW5jdGlvbiBwcmVwZW5kKGVsZW0sIHByZXYpIHtcbiAgICByZW1vdmVFbGVtZW50KHByZXYpO1xuICAgIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudDtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZHMgPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIGNoaWxkcy5zcGxpY2UoY2hpbGRzLmluZGV4T2YoZWxlbSksIDAsIHByZXYpO1xuICAgIH1cbiAgICBpZiAoZWxlbS5wcmV2KSB7XG4gICAgICAgIGVsZW0ucHJldi5uZXh0ID0gcHJldjtcbiAgICB9XG4gICAgcHJldi5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgcHJldi5wcmV2ID0gZWxlbS5wcmV2O1xuICAgIHByZXYubmV4dCA9IGVsZW07XG4gICAgZWxlbS5wcmV2ID0gcHJldjtcbn1cbmV4cG9ydHMucHJlcGVuZCA9IHByZXBlbmQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYW5pcHVsYXRpb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicHJlcGVuZCIsInByZXBlbmRDaGlsZCIsImFwcGVuZCIsImFwcGVuZENoaWxkIiwicmVwbGFjZUVsZW1lbnQiLCJyZW1vdmVFbGVtZW50IiwiZWxlbSIsInByZXYiLCJuZXh0IiwicGFyZW50IiwiY2hpbGRzIiwiY2hpbGRyZW4iLCJjaGlsZHNJbmRleCIsImxhc3RJbmRleE9mIiwic3BsaWNlIiwicmVwbGFjZW1lbnQiLCJjaGlsZCIsInB1c2giLCJzaWJsaW5nIiwibGVuZ3RoIiwiY3Vyck5leHQiLCJ1bnNoaWZ0IiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domutils/lib/manipulation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domutils/lib/querying.js":
/*!***********************************************!*\
  !*** ./node_modules/domutils/lib/querying.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\n/**\n * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */ function filter(test, node, recurse, limit) {\n    if (recurse === void 0) {\n        recurse = true;\n    }\n    if (limit === void 0) {\n        limit = Infinity;\n    }\n    return find(test, Array.isArray(node) ? node : [\n        node\n    ], recurse, limit);\n}\nexports.filter = filter;\n/**\n * Search an array of nodes and their children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */ function find(test, nodes, recurse, limit) {\n    var result = [];\n    /** Stack of the arrays we are looking at. */ var nodeStack = [\n        nodes\n    ];\n    /** Stack of the indices within the arrays. */ var indexStack = [\n        0\n    ];\n    for(;;){\n        // First, check if the current array has any more elements to look at.\n        if (indexStack[0] >= nodeStack[0].length) {\n            // If we have no more arrays to look at, we are done.\n            if (indexStack.length === 1) {\n                return result;\n            }\n            // Otherwise, remove the current array from the stack.\n            nodeStack.shift();\n            indexStack.shift();\n            continue;\n        }\n        var elem = nodeStack[0][indexStack[0]++];\n        if (test(elem)) {\n            result.push(elem);\n            if (--limit <= 0) return result;\n        }\n        if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n            /*\n             * Add the children to the stack. We are depth-first, so this is\n             * the next array we look at.\n             */ indexStack.unshift(0);\n            nodeStack.unshift(elem.children);\n        }\n    }\n}\nexports.find = find;\n/**\n * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */ function findOneChild(test, nodes) {\n    return nodes.find(test);\n}\nexports.findOneChild = findOneChild;\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Node or array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first node that passes `test`.\n */ function findOne(test, nodes, recurse) {\n    if (recurse === void 0) {\n        recurse = true;\n    }\n    var elem = null;\n    for(var i = 0; i < nodes.length && !elem; i++){\n        var node = nodes[i];\n        if (!(0, domhandler_1.isTag)(node)) {\n            continue;\n        } else if (test(node)) {\n            elem = node;\n        } else if (recurse && node.children.length > 0) {\n            elem = findOne(test, node.children, true);\n        }\n    }\n    return elem;\n}\nexports.findOne = findOne;\n/**\n * Checks if a tree of nodes contains at least one node passing a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */ function existsOne(test, nodes) {\n    return nodes.some(function(checked) {\n        return (0, domhandler_1.isTag)(checked) && (test(checked) || existsOne(test, checked.children));\n    });\n}\nexports.existsOne = existsOne;\n/**\n * Search an array of nodes and their children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */ function findAll(test, nodes) {\n    var result = [];\n    var nodeStack = [\n        nodes\n    ];\n    var indexStack = [\n        0\n    ];\n    for(;;){\n        if (indexStack[0] >= nodeStack[0].length) {\n            if (nodeStack.length === 1) {\n                return result;\n            }\n            // Otherwise, remove the current array from the stack.\n            nodeStack.shift();\n            indexStack.shift();\n            continue;\n        }\n        var elem = nodeStack[0][indexStack[0]++];\n        if (!(0, domhandler_1.isTag)(elem)) continue;\n        if (test(elem)) result.push(elem);\n        if (elem.children.length > 0) {\n            indexStack.unshift(0);\n            nodeStack.unshift(elem.children);\n        }\n    }\n}\nexports.findAll = findAll; //# sourceMappingURL=querying.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domutils/lib/querying.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domutils/lib/stringify.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/stringify.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.innerText = exports.textContent = exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nvar dom_serializer_1 = __importDefault(__webpack_require__(/*! dom-serializer */ \"(app-pages-browser)/./node_modules/dom-serializer/lib/index.js\"));\nvar domelementtype_1 = __webpack_require__(/*! domelementtype */ \"(app-pages-browser)/./node_modules/domelementtype/lib/index.js\");\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the outer HTML of.\n * @param options Options for serialization.\n * @returns `node`'s outer HTML.\n */ function getOuterHTML(node, options) {\n    return (0, dom_serializer_1.default)(node, options);\n}\nexports.getOuterHTML = getOuterHTML;\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the inner HTML of.\n * @param options Options for serialization.\n * @returns `node`'s inner HTML.\n */ function getInnerHTML(node, options) {\n    return (0, domhandler_1.hasChildren)(node) ? node.children.map(function(node) {\n        return getOuterHTML(node, options);\n    }).join(\"\") : \"\";\n}\nexports.getInnerHTML = getInnerHTML;\n/**\n * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags. Ignores comments.\n *\n * @category Stringify\n * @deprecated Use `textContent` instead.\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n */ function getText(node) {\n    if (Array.isArray(node)) return node.map(getText).join(\"\");\n    if ((0, domhandler_1.isTag)(node)) return node.name === \"br\" ? \"\\n\" : getText(node.children);\n    if ((0, domhandler_1.isCDATA)(node)) return getText(node.children);\n    if ((0, domhandler_1.isText)(node)) return node.data;\n    return \"\";\n}\nexports.getText = getText;\n/**\n * Get a node's text content. Ignores comments.\n *\n * @category Stringify\n * @param node Node to get the text content of.\n * @returns `node`'s text content.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}\n */ function textContent(node) {\n    if (Array.isArray(node)) return node.map(textContent).join(\"\");\n    if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {\n        return textContent(node.children);\n    }\n    if ((0, domhandler_1.isText)(node)) return node.data;\n    return \"\";\n}\nexports.textContent = textContent;\n/**\n * Get a node's inner text, ignoring `<script>` and `<style>` tags. Ignores comments.\n *\n * @category Stringify\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}\n */ function innerText(node) {\n    if (Array.isArray(node)) return node.map(innerText).join(\"\");\n    if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {\n        return innerText(node.children);\n    }\n    if ((0, domhandler_1.isText)(node)) return node.data;\n    return \"\";\n}\nexports.innerText = innerText; //# sourceMappingURL=stringify.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvc3RyaW5naWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0EsbUJBQW1CLEdBQUdBLGVBQWUsR0FBR0Esb0JBQW9CLEdBQUdBLG9CQUFvQixHQUFHLEtBQUs7QUFDL0csSUFBSU8sZUFBZUMsbUJBQU9BLENBQUMsOEVBQVk7QUFDdkMsSUFBSUMsbUJBQW1CZCxnQkFBZ0JhLG1CQUFPQSxDQUFDLHNGQUFnQjtBQUMvRCxJQUFJRSxtQkFBbUJGLG1CQUFPQSxDQUFDLHNGQUFnQjtBQUMvQzs7Ozs7O0NBTUMsR0FDRCxTQUFTRixhQUFhSyxJQUFJLEVBQUVDLE9BQU87SUFDL0IsT0FBTyxDQUFDLEdBQUdILGlCQUFpQkksT0FBTyxFQUFFRixNQUFNQztBQUMvQztBQUNBWixvQkFBb0IsR0FBR007QUFDdkI7Ozs7OztDQU1DLEdBQ0QsU0FBU0QsYUFBYU0sSUFBSSxFQUFFQyxPQUFPO0lBQy9CLE9BQU8sQ0FBQyxHQUFHTCxhQUFhTyxXQUFXLEVBQUVILFFBQy9CQSxLQUFLSSxRQUFRLENBQUNDLEdBQUcsQ0FBQyxTQUFVTCxJQUFJO1FBQUksT0FBT0wsYUFBYUssTUFBTUM7SUFBVSxHQUFHSyxJQUFJLENBQUMsTUFDaEY7QUFDVjtBQUNBakIsb0JBQW9CLEdBQUdLO0FBQ3ZCOzs7Ozs7O0NBT0MsR0FDRCxTQUFTRCxRQUFRTyxJQUFJO0lBQ2pCLElBQUlPLE1BQU1DLE9BQU8sQ0FBQ1IsT0FDZCxPQUFPQSxLQUFLSyxHQUFHLENBQUNaLFNBQVNhLElBQUksQ0FBQztJQUNsQyxJQUFJLENBQUMsR0FBR1YsYUFBYWEsS0FBSyxFQUFFVCxPQUN4QixPQUFPQSxLQUFLVSxJQUFJLEtBQUssT0FBTyxPQUFPakIsUUFBUU8sS0FBS0ksUUFBUTtJQUM1RCxJQUFJLENBQUMsR0FBR1IsYUFBYWUsT0FBTyxFQUFFWCxPQUMxQixPQUFPUCxRQUFRTyxLQUFLSSxRQUFRO0lBQ2hDLElBQUksQ0FBQyxHQUFHUixhQUFhZ0IsTUFBTSxFQUFFWixPQUN6QixPQUFPQSxLQUFLYSxJQUFJO0lBQ3BCLE9BQU87QUFDWDtBQUNBeEIsZUFBZSxHQUFHSTtBQUNsQjs7Ozs7OztDQU9DLEdBQ0QsU0FBU0QsWUFBWVEsSUFBSTtJQUNyQixJQUFJTyxNQUFNQyxPQUFPLENBQUNSLE9BQ2QsT0FBT0EsS0FBS0ssR0FBRyxDQUFDYixhQUFhYyxJQUFJLENBQUM7SUFDdEMsSUFBSSxDQUFDLEdBQUdWLGFBQWFPLFdBQVcsRUFBRUgsU0FBUyxDQUFDLENBQUMsR0FBR0osYUFBYWtCLFNBQVMsRUFBRWQsT0FBTztRQUMzRSxPQUFPUixZQUFZUSxLQUFLSSxRQUFRO0lBQ3BDO0lBQ0EsSUFBSSxDQUFDLEdBQUdSLGFBQWFnQixNQUFNLEVBQUVaLE9BQ3pCLE9BQU9BLEtBQUthLElBQUk7SUFDcEIsT0FBTztBQUNYO0FBQ0F4QixtQkFBbUIsR0FBR0c7QUFDdEI7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNELFVBQVVTLElBQUk7SUFDbkIsSUFBSU8sTUFBTUMsT0FBTyxDQUFDUixPQUNkLE9BQU9BLEtBQUtLLEdBQUcsQ0FBQ2QsV0FBV2UsSUFBSSxDQUFDO0lBQ3BDLElBQUksQ0FBQyxHQUFHVixhQUFhTyxXQUFXLEVBQUVILFNBQVVBLENBQUFBLEtBQUtlLElBQUksS0FBS2hCLGlCQUFpQmlCLFdBQVcsQ0FBQ0MsR0FBRyxJQUFJLENBQUMsR0FBR3JCLGFBQWFlLE9BQU8sRUFBRVgsS0FBSSxHQUFJO1FBQzVILE9BQU9ULFVBQVVTLEtBQUtJLFFBQVE7SUFDbEM7SUFDQSxJQUFJLENBQUMsR0FBR1IsYUFBYWdCLE1BQU0sRUFBRVosT0FDekIsT0FBT0EsS0FBS2EsSUFBSTtJQUNwQixPQUFPO0FBQ1g7QUFDQXhCLGlCQUFpQixHQUFHRSxXQUNwQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9zdHJpbmdpZnkuanM/Yjg0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5uZXJUZXh0ID0gZXhwb3J0cy50ZXh0Q29udGVudCA9IGV4cG9ydHMuZ2V0VGV4dCA9IGV4cG9ydHMuZ2V0SW5uZXJIVE1MID0gZXhwb3J0cy5nZXRPdXRlckhUTUwgPSB2b2lkIDA7XG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG52YXIgZG9tX3NlcmlhbGl6ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZG9tLXNlcmlhbGl6ZXJcIikpO1xudmFyIGRvbWVsZW1lbnR0eXBlXzEgPSByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIik7XG4vKipcbiAqIEBjYXRlZ29yeSBTdHJpbmdpZnlcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYGRvbS1zZXJpYWxpemVyYCBtb2R1bGUgZGlyZWN0bHkuXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgb3V0ZXIgSFRNTCBvZi5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHNlcmlhbGl6YXRpb24uXG4gKiBAcmV0dXJucyBgbm9kZWAncyBvdXRlciBIVE1MLlxuICovXG5mdW5jdGlvbiBnZXRPdXRlckhUTUwobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiAoMCwgZG9tX3NlcmlhbGl6ZXJfMS5kZWZhdWx0KShub2RlLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZ2V0T3V0ZXJIVE1MID0gZ2V0T3V0ZXJIVE1MO1xuLyoqXG4gKiBAY2F0ZWdvcnkgU3RyaW5naWZ5XG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBkb20tc2VyaWFsaXplcmAgbW9kdWxlIGRpcmVjdGx5LlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBnZXQgdGhlIGlubmVyIEhUTUwgb2YuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBzZXJpYWxpemF0aW9uLlxuICogQHJldHVybnMgYG5vZGVgJ3MgaW5uZXIgSFRNTC5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5uZXJIVE1MKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKDAsIGRvbWhhbmRsZXJfMS5oYXNDaGlsZHJlbikobm9kZSlcbiAgICAgICAgPyBub2RlLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gZ2V0T3V0ZXJIVE1MKG5vZGUsIG9wdGlvbnMpOyB9KS5qb2luKFwiXCIpXG4gICAgICAgIDogXCJcIjtcbn1cbmV4cG9ydHMuZ2V0SW5uZXJIVE1MID0gZ2V0SW5uZXJIVE1MO1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgaW5uZXIgdGV4dC4gU2FtZSBhcyBgdGV4dENvbnRlbnRgLCBidXQgaW5zZXJ0cyBuZXdsaW5lcyBmb3IgYDxicj5gIHRhZ3MuIElnbm9yZXMgY29tbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IFN0cmluZ2lmeVxuICogQGRlcHJlY2F0ZWQgVXNlIGB0ZXh0Q29udGVudGAgaW5zdGVhZC5cbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSBpbm5lciB0ZXh0IG9mLlxuICogQHJldHVybnMgYG5vZGVgJ3MgaW5uZXIgdGV4dC5cbiAqL1xuZnVuY3Rpb24gZ2V0VGV4dChub2RlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlLm1hcChnZXRUZXh0KS5qb2luKFwiXCIpO1xuICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmlzVGFnKShub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUubmFtZSA9PT0gXCJiclwiID8gXCJcXG5cIiA6IGdldFRleHQobm9kZS5jaGlsZHJlbik7XG4gICAgaWYgKCgwLCBkb21oYW5kbGVyXzEuaXNDREFUQSkobm9kZSkpXG4gICAgICAgIHJldHVybiBnZXRUZXh0KG5vZGUuY2hpbGRyZW4pO1xuICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmlzVGV4dCkobm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlLmRhdGE7XG4gICAgcmV0dXJuIFwiXCI7XG59XG5leHBvcnRzLmdldFRleHQgPSBnZXRUZXh0O1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgdGV4dCBjb250ZW50LiBJZ25vcmVzIGNvbW1lbnRzLlxuICpcbiAqIEBjYXRlZ29yeSBTdHJpbmdpZnlcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YuXG4gKiBAcmV0dXJucyBgbm9kZWAncyB0ZXh0IGNvbnRlbnQuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS90ZXh0Q29udGVudH1cbiAqL1xuZnVuY3Rpb24gdGV4dENvbnRlbnQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAodGV4dENvbnRlbnQpLmpvaW4oXCJcIik7XG4gICAgaWYgKCgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKG5vZGUpICYmICEoMCwgZG9taGFuZGxlcl8xLmlzQ29tbWVudCkobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHRleHRDb250ZW50KG5vZGUuY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoKDAsIGRvbWhhbmRsZXJfMS5pc1RleHQpKG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy50ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgaW5uZXIgdGV4dCwgaWdub3JpbmcgYDxzY3JpcHQ+YCBhbmQgYDxzdHlsZT5gIHRhZ3MuIElnbm9yZXMgY29tbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IFN0cmluZ2lmeVxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBnZXQgdGhlIGlubmVyIHRleHQgb2YuXG4gKiBAcmV0dXJucyBgbm9kZWAncyBpbm5lciB0ZXh0LlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvaW5uZXJUZXh0fVxuICovXG5mdW5jdGlvbiBpbm5lclRleHQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAoaW5uZXJUZXh0KS5qb2luKFwiXCIpO1xuICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuKShub2RlKSAmJiAobm9kZS50eXBlID09PSBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLlRhZyB8fCAoMCwgZG9taGFuZGxlcl8xLmlzQ0RBVEEpKG5vZGUpKSkge1xuICAgICAgICByZXR1cm4gaW5uZXJUZXh0KG5vZGUuY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoKDAsIGRvbWhhbmRsZXJfMS5pc1RleHQpKG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy5pbm5lclRleHQgPSBpbm5lclRleHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmdpZnkuanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlubmVyVGV4dCIsInRleHRDb250ZW50IiwiZ2V0VGV4dCIsImdldElubmVySFRNTCIsImdldE91dGVySFRNTCIsImRvbWhhbmRsZXJfMSIsInJlcXVpcmUiLCJkb21fc2VyaWFsaXplcl8xIiwiZG9tZWxlbWVudHR5cGVfMSIsIm5vZGUiLCJvcHRpb25zIiwiZGVmYXVsdCIsImhhc0NoaWxkcmVuIiwiY2hpbGRyZW4iLCJtYXAiLCJqb2luIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNUYWciLCJuYW1lIiwiaXNDREFUQSIsImlzVGV4dCIsImRhdGEiLCJpc0NvbW1lbnQiLCJ0eXBlIiwiRWxlbWVudFR5cGUiLCJUYWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domutils/lib/stringify.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/domutils/lib/traversal.js":
/*!************************************************!*\
  !*** ./node_modules/domutils/lib/traversal.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\n/**\n * Get a node's children.\n *\n * @category Traversal\n * @param elem Node to get the children of.\n * @returns `elem`'s children, or an empty array.\n */ function getChildren(elem) {\n    return (0, domhandler_1.hasChildren)(elem) ? elem.children : [];\n}\nexports.getChildren = getChildren;\n/**\n * Get a node's parent.\n *\n * @category Traversal\n * @param elem Node to get the parent of.\n * @returns `elem`'s parent node, or `null` if `elem` is a root node.\n */ function getParent(elem) {\n    return elem.parent || null;\n}\nexports.getParent = getParent;\n/**\n * Gets an elements siblings, including the element itself.\n *\n * Attempts to get the children through the element's parent first. If we don't\n * have a parent (the element is a root node), we walk the element's `prev` &\n * `next` to get all remaining nodes.\n *\n * @category Traversal\n * @param elem Element to get the siblings of.\n * @returns `elem`'s siblings, including `elem`.\n */ function getSiblings(elem) {\n    var _a, _b;\n    var parent = getParent(elem);\n    if (parent != null) return getChildren(parent);\n    var siblings = [\n        elem\n    ];\n    var prev = elem.prev, next = elem.next;\n    while(prev != null){\n        siblings.unshift(prev);\n        _a = prev, prev = _a.prev;\n    }\n    while(next != null){\n        siblings.push(next);\n        _b = next, next = _b.next;\n    }\n    return siblings;\n}\nexports.getSiblings = getSiblings;\n/**\n * Gets an attribute from an element.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to retrieve.\n * @returns The element's attribute value, or `undefined`.\n */ function getAttributeValue(elem, name) {\n    var _a;\n    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];\n}\nexports.getAttributeValue = getAttributeValue;\n/**\n * Checks whether an element has an attribute.\n *\n * @category Traversal\n * @param elem Element to check.\n * @param name Attribute name to look for.\n * @returns Returns whether `elem` has the attribute `name`.\n */ function hasAttrib(elem, name) {\n    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;\n}\nexports.hasAttrib = hasAttrib;\n/**\n * Get the tag name of an element.\n *\n * @category Traversal\n * @param elem The element to get the name for.\n * @returns The tag name of `elem`.\n */ function getName(elem) {\n    return elem.name;\n}\nexports.getName = getName;\n/**\n * Returns the next element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the next sibling of.\n * @returns `elem`'s next sibling that is a tag, or `null` if there is no next\n * sibling.\n */ function nextElementSibling(elem) {\n    var _a;\n    var next = elem.next;\n    while(next !== null && !(0, domhandler_1.isTag)(next))_a = next, next = _a.next;\n    return next;\n}\nexports.nextElementSibling = nextElementSibling;\n/**\n * Returns the previous element sibling of a node.\n *\n * @category Traversal\n * @param elem The element to get the previous sibling of.\n * @returns `elem`'s previous sibling that is a tag, or `null` if there is no\n * previous sibling.\n */ function prevElementSibling(elem) {\n    var _a;\n    var prev = elem.prev;\n    while(prev !== null && !(0, domhandler_1.isTag)(prev))_a = prev, prev = _a.prev;\n    return prev;\n}\nexports.prevElementSibling = prevElementSibling; //# sourceMappingURL=traversal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/domutils/lib/traversal.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/entities/lib/decode.js":
/*!*********************************************!*\
  !*** ./node_modules/entities/lib/decode.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_js_1 = __importDefault(__webpack_require__(/*! ./generated/decode-data-html.js */ \"(app-pages-browser)/./node_modules/entities/lib/generated/decode-data-html.js\"));\nexports.htmlDecodeTree = decode_data_html_js_1.default;\nvar decode_data_xml_js_1 = __importDefault(__webpack_require__(/*! ./generated/decode-data-xml.js */ \"(app-pages-browser)/./node_modules/entities/lib/generated/decode-data-xml.js\"));\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\nvar decode_codepoint_js_1 = __importStar(__webpack_require__(/*! ./decode_codepoint.js */ \"(app-pages-browser)/./node_modules/entities/lib/decode_codepoint.js\"));\nexports.decodeCodePoint = decode_codepoint_js_1.default;\nvar decode_codepoint_js_2 = __webpack_require__(/*! ./decode_codepoint.js */ \"(app-pages-browser)/./node_modules/entities/lib/decode_codepoint.js\");\nObject.defineProperty(exports, \"replaceCodePoint\", ({\n    enumerable: true,\n    get: function() {\n        return decode_codepoint_js_2.replaceCodePoint;\n    }\n}));\nObject.defineProperty(exports, \"fromCodePoint\", ({\n    enumerable: true,\n    get: function() {\n        return decode_codepoint_js_2.fromCodePoint;\n    }\n}));\nvar CharCodes;\n(function(CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */ var TO_LOWER_BIT = 32;\nvar BinTrieFlags;\n(function(BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n}\nfunction isAsciiAlphaNumeric(code) {\n    return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */ function isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function(EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nvar DecodingMode;\n(function(DecodingMode) {\n    /** Entities in text nodes that can end with any character. */ DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */ DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */ DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */ var EntityDecoder = /** @class */ function() {\n    function EntityDecoder(/** The tree used to decode entities. */ decodeTree, /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */ emitCodePoint, /** An object that is used to produce errors. */ errors) {\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */ this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */ this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */ this.result = 0;\n        /** The current index in the decode tree. */ this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */ this.excess = 1;\n        /** The mode in which the decoder is operating. */ this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */ EntityDecoder.prototype.startEntity = function(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    };\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ EntityDecoder.prototype.write = function(str, offset) {\n        switch(this.state){\n            case EntityDecoderState.EntityStart:\n                {\n                    if (str.charCodeAt(offset) === CharCodes.NUM) {\n                        this.state = EntityDecoderState.NumericStart;\n                        this.consumed += 1;\n                        return this.stateNumericStart(str, offset + 1);\n                    }\n                    this.state = EntityDecoderState.NamedEntity;\n                    return this.stateNamedEntity(str, offset);\n                }\n            case EntityDecoderState.NumericStart:\n                {\n                    return this.stateNumericStart(str, offset);\n                }\n            case EntityDecoderState.NumericDecimal:\n                {\n                    return this.stateNumericDecimal(str, offset);\n                }\n            case EntityDecoderState.NumericHex:\n                {\n                    return this.stateNumericHex(str, offset);\n                }\n            case EntityDecoderState.NamedEntity:\n                {\n                    return this.stateNamedEntity(str, offset);\n                }\n        }\n    };\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ EntityDecoder.prototype.stateNumericStart = function(str, offset) {\n        if (offset >= str.length) {\n            return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    };\n    EntityDecoder.prototype.addToNumericResult = function(str, start, end, base) {\n        if (start !== end) {\n            var digitCount = end - start;\n            this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    };\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ EntityDecoder.prototype.stateNumericHex = function(str, offset) {\n        var startIdx = offset;\n        while(offset < str.length){\n            var char = str.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            } else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    };\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ EntityDecoder.prototype.stateNumericDecimal = function(str, offset) {\n        var startIdx = offset;\n        while(offset < str.length){\n            var char = str.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            } else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    };\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */ EntityDecoder.prototype.emitNumericEntity = function(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        } else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    };\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */ EntityDecoder.prototype.stateNamedEntity = function(str, offset) {\n        var decodeTree = this.decodeTree;\n        var current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for(; offset < str.length; offset++, this.excess++){\n            var char = str.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 || // If we are parsing an attribute\n                this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,\n                (valueLength === 0 || // And there should be no invalid characters.\n                isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    };\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */ EntityDecoder.prototype.emitNotTerminatedNamedEntity = function() {\n        var _a;\n        var _b = this, result = _b.result, decodeTree = _b.decodeTree;\n        var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    };\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */ EntityDecoder.prototype.emitNamedEntityData = function(result, valueLength, consumed) {\n        var decodeTree = this.decodeTree;\n        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    };\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */ EntityDecoder.prototype.end = function() {\n        var _a;\n        switch(this.state){\n            case EntityDecoderState.NamedEntity:\n                {\n                    // Emit a named entity if we have one.\n                    return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n                }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal:\n                {\n                    return this.emitNumericEntity(0, 2);\n                }\n            case EntityDecoderState.NumericHex:\n                {\n                    return this.emitNumericEntity(0, 3);\n                }\n            case EntityDecoderState.NumericStart:\n                {\n                    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                    return 0;\n                }\n            case EntityDecoderState.EntityStart:\n                {\n                    // Return 0 if we have no entity.\n                    return 0;\n                }\n        }\n    };\n    return EntityDecoder;\n}();\nexports.EntityDecoder = EntityDecoder;\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */ function getDecoder(decodeTree) {\n    var ret = \"\";\n    var decoder = new EntityDecoder(decodeTree, function(str) {\n        return ret += (0, decode_codepoint_js_1.fromCodePoint)(str);\n    });\n    return function decodeWithTrie(str, decodeMode) {\n        var lastIndex = 0;\n        var offset = 0;\n        while((offset = str.indexOf(\"&\", offset)) >= 0){\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            var len = decoder.write(str, // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        var result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */ function determineBranch(decodeTree, current, nodeIdx, char) {\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        var value = char - jumpOffset;\n        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while(lo <= hi){\n        var mid = lo + hi >>> 1;\n        var midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        } else if (midVal > char) {\n            hi = mid - 1;\n        } else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */ function decodeHTML(str, mode) {\n    if (mode === void 0) {\n        mode = DecodingMode.Legacy;\n    }\n    return htmlDecoder(str, mode);\n}\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */ function decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n}\nexports.decodeHTMLAttribute = decodeHTMLAttribute;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */ function decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */ function decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeXML = decodeXML; //# sourceMappingURL=decode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/entities/lib/decode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/entities/lib/decode_codepoint.js":
/*!*******************************************************!*\
  !*** ./node_modules/entities/lib/decode_codepoint.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.replaceCodePoint = exports.fromCodePoint = void 0;\nvar decodeMap = new Map([\n    [\n        0,\n        65533\n    ],\n    // C1 Unicode control character reference replacements\n    [\n        128,\n        8364\n    ],\n    [\n        130,\n        8218\n    ],\n    [\n        131,\n        402\n    ],\n    [\n        132,\n        8222\n    ],\n    [\n        133,\n        8230\n    ],\n    [\n        134,\n        8224\n    ],\n    [\n        135,\n        8225\n    ],\n    [\n        136,\n        710\n    ],\n    [\n        137,\n        8240\n    ],\n    [\n        138,\n        352\n    ],\n    [\n        139,\n        8249\n    ],\n    [\n        140,\n        338\n    ],\n    [\n        142,\n        381\n    ],\n    [\n        145,\n        8216\n    ],\n    [\n        146,\n        8217\n    ],\n    [\n        147,\n        8220\n    ],\n    [\n        148,\n        8221\n    ],\n    [\n        149,\n        8226\n    ],\n    [\n        150,\n        8211\n    ],\n    [\n        151,\n        8212\n    ],\n    [\n        152,\n        732\n    ],\n    [\n        153,\n        8482\n    ],\n    [\n        154,\n        353\n    ],\n    [\n        155,\n        8250\n    ],\n    [\n        156,\n        339\n    ],\n    [\n        158,\n        382\n    ],\n    [\n        159,\n        376\n    ]\n]);\n/**\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n */ exports.fromCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function(codePoint) {\n    var output = \"\";\n    if (codePoint > 0xffff) {\n        codePoint -= 0x10000;\n        output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);\n        codePoint = 0xdc00 | codePoint & 0x3ff;\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n};\n/**\n * Replace the given code point with a replacement character if it is a\n * surrogate or is outside the valid range. Otherwise return the code\n * point unchanged.\n */ function replaceCodePoint(codePoint) {\n    var _a;\n    if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {\n        return 0xfffd;\n    }\n    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\nexports.replaceCodePoint = replaceCodePoint;\n/**\n * Replace the code point if relevant, then convert it to a string.\n *\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\n * @param codePoint The code point to decode.\n * @returns The decoded code point.\n */ function decodeCodePoint(codePoint) {\n    return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));\n}\nexports[\"default\"] = decodeCodePoint; //# sourceMappingURL=decode_codepoint.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZGVjb2RlX2NvZGVwb2ludC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHFIQUFxSDtBQUNySCxJQUFJQTtBQUNKQyw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsd0JBQXdCLEdBQUdBLHFCQUFxQixHQUFHLEtBQUs7QUFDeEQsSUFBSUksWUFBWSxJQUFJQyxJQUFJO0lBQ3BCO1FBQUM7UUFBRztLQUFNO0lBQ1Ysc0RBQXNEO0lBQ3REO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSTtJQUNWO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUk7SUFDVjtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFJO0lBQ1Y7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSTtJQUNWO1FBQUM7UUFBSztLQUFJO0lBQ1Y7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUs7SUFDWDtRQUFDO1FBQUs7S0FBSTtJQUNWO1FBQUM7UUFBSztLQUFLO0lBQ1g7UUFBQztRQUFLO0tBQUk7SUFDVjtRQUFDO1FBQUs7S0FBSztJQUNYO1FBQUM7UUFBSztLQUFJO0lBQ1Y7UUFBQztRQUFLO0tBQUk7SUFDVjtRQUFDO1FBQUs7S0FBSTtDQUNiO0FBQ0Q7O0NBRUMsR0FDREwscUJBQXFCLEdBRXJCLGlIQURpSDtBQUNoSEgsQ0FBQUEsS0FBS1MsT0FBT0gsYUFBYSxNQUFNLFFBQVFOLE9BQU8sS0FBSyxJQUFJQSxLQUFLLFNBQVVVLFNBQVM7SUFDNUUsSUFBSUMsU0FBUztJQUNiLElBQUlELFlBQVksUUFBUTtRQUNwQkEsYUFBYTtRQUNiQyxVQUFVRixPQUFPRyxZQUFZLENBQUMsY0FBZ0IsS0FBTSxRQUFTO1FBQzdERixZQUFZLFNBQVVBLFlBQVk7SUFDdEM7SUFDQUMsVUFBVUYsT0FBT0csWUFBWSxDQUFDRjtJQUM5QixPQUFPQztBQUNYO0FBQ0E7Ozs7Q0FJQyxHQUNELFNBQVNOLGlCQUFpQkssU0FBUztJQUMvQixJQUFJVjtJQUNKLElBQUksYUFBYyxVQUFVVSxhQUFhLFVBQVdBLFlBQVksVUFBVTtRQUN0RSxPQUFPO0lBQ1g7SUFDQSxPQUFPLENBQUNWLEtBQUtPLFVBQVVNLEdBQUcsQ0FBQ0gsVUFBUyxNQUFPLFFBQVFWLE9BQU8sS0FBSyxJQUFJQSxLQUFLVTtBQUM1RTtBQUNBUCx3QkFBd0IsR0FBR0U7QUFDM0I7Ozs7OztDQU1DLEdBQ0QsU0FBU1MsZ0JBQWdCSixTQUFTO0lBQzlCLE9BQU8sQ0FBQyxHQUFHUCxRQUFRRyxhQUFhLEVBQUVELGlCQUFpQks7QUFDdkQ7QUFDQVAsa0JBQWUsR0FBR1csaUJBQ2xCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2RlY29kZV9jb2RlcG9pbnQuanM/YzdhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9oZS9ibG9iLzM2YWZlMTc5MzkyMjI2Y2YxYjZjY2RiMTZlYmJiN2E1YTg0NGQ5M2Evc3JjL2hlLmpzI0wxMDYtTDEzNFxudmFyIF9hO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXBsYWNlQ29kZVBvaW50ID0gZXhwb3J0cy5mcm9tQ29kZVBvaW50ID0gdm9pZCAwO1xudmFyIGRlY29kZU1hcCA9IG5ldyBNYXAoW1xuICAgIFswLCA2NTUzM10sXG4gICAgLy8gQzEgVW5pY29kZSBjb250cm9sIGNoYXJhY3RlciByZWZlcmVuY2UgcmVwbGFjZW1lbnRzXG4gICAgWzEyOCwgODM2NF0sXG4gICAgWzEzMCwgODIxOF0sXG4gICAgWzEzMSwgNDAyXSxcbiAgICBbMTMyLCA4MjIyXSxcbiAgICBbMTMzLCA4MjMwXSxcbiAgICBbMTM0LCA4MjI0XSxcbiAgICBbMTM1LCA4MjI1XSxcbiAgICBbMTM2LCA3MTBdLFxuICAgIFsxMzcsIDgyNDBdLFxuICAgIFsxMzgsIDM1Ml0sXG4gICAgWzEzOSwgODI0OV0sXG4gICAgWzE0MCwgMzM4XSxcbiAgICBbMTQyLCAzODFdLFxuICAgIFsxNDUsIDgyMTZdLFxuICAgIFsxNDYsIDgyMTddLFxuICAgIFsxNDcsIDgyMjBdLFxuICAgIFsxNDgsIDgyMjFdLFxuICAgIFsxNDksIDgyMjZdLFxuICAgIFsxNTAsIDgyMTFdLFxuICAgIFsxNTEsIDgyMTJdLFxuICAgIFsxNTIsIDczMl0sXG4gICAgWzE1MywgODQ4Ml0sXG4gICAgWzE1NCwgMzUzXSxcbiAgICBbMTU1LCA4MjUwXSxcbiAgICBbMTU2LCAzMzldLFxuICAgIFsxNTgsIDM4Ml0sXG4gICAgWzE1OSwgMzc2XSxcbl0pO1xuLyoqXG4gKiBQb2x5ZmlsbCBmb3IgYFN0cmluZy5mcm9tQ29kZVBvaW50YC4gSXQgaXMgdXNlZCB0byBjcmVhdGUgYSBzdHJpbmcgZnJvbSBhIFVuaWNvZGUgY29kZSBwb2ludC5cbiAqL1xuZXhwb3J0cy5mcm9tQ29kZVBvaW50ID0gXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvbiwgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9lcy1idWlsdGluc1xuKF9hID0gU3RyaW5nLmZyb21Db2RlUG9pbnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZ1bmN0aW9uIChjb2RlUG9pbnQpIHtcbiAgICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgICBpZiAoY29kZVBvaW50ID4gMHhmZmZmKSB7XG4gICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+Pj4gMTApICYgMHgzZmYpIHwgMHhkODAwKTtcbiAgICAgICAgY29kZVBvaW50ID0gMHhkYzAwIHwgKGNvZGVQb2ludCAmIDB4M2ZmKTtcbiAgICB9XG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICByZXR1cm4gb3V0cHV0O1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgZ2l2ZW4gY29kZSBwb2ludCB3aXRoIGEgcmVwbGFjZW1lbnQgY2hhcmFjdGVyIGlmIGl0IGlzIGFcbiAqIHN1cnJvZ2F0ZSBvciBpcyBvdXRzaWRlIHRoZSB2YWxpZCByYW5nZS4gT3RoZXJ3aXNlIHJldHVybiB0aGUgY29kZVxuICogcG9pbnQgdW5jaGFuZ2VkLlxuICovXG5mdW5jdGlvbiByZXBsYWNlQ29kZVBvaW50KGNvZGVQb2ludCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoKGNvZGVQb2ludCA+PSAweGQ4MDAgJiYgY29kZVBvaW50IDw9IDB4ZGZmZikgfHwgY29kZVBvaW50ID4gMHgxMGZmZmYpIHtcbiAgICAgICAgcmV0dXJuIDB4ZmZmZDtcbiAgICB9XG4gICAgcmV0dXJuIChfYSA9IGRlY29kZU1hcC5nZXQoY29kZVBvaW50KSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY29kZVBvaW50O1xufVxuZXhwb3J0cy5yZXBsYWNlQ29kZVBvaW50ID0gcmVwbGFjZUNvZGVQb2ludDtcbi8qKlxuICogUmVwbGFjZSB0aGUgY29kZSBwb2ludCBpZiByZWxldmFudCwgdGhlbiBjb252ZXJ0IGl0IHRvIGEgc3RyaW5nLlxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgZnJvbUNvZGVQb2ludChyZXBsYWNlQ29kZVBvaW50KGNvZGVQb2ludCkpYCBpbnN0ZWFkLlxuICogQHBhcmFtIGNvZGVQb2ludCBUaGUgY29kZSBwb2ludCB0byBkZWNvZGUuXG4gKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBjb2RlIHBvaW50LlxuICovXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnQoY29kZVBvaW50KSB7XG4gICAgcmV0dXJuICgwLCBleHBvcnRzLmZyb21Db2RlUG9pbnQpKHJlcGxhY2VDb2RlUG9pbnQoY29kZVBvaW50KSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWNvZGVDb2RlUG9pbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGVfY29kZXBvaW50LmpzLm1hcCJdLCJuYW1lcyI6WyJfYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVwbGFjZUNvZGVQb2ludCIsImZyb21Db2RlUG9pbnQiLCJkZWNvZGVNYXAiLCJNYXAiLCJTdHJpbmciLCJjb2RlUG9pbnQiLCJvdXRwdXQiLCJmcm9tQ2hhckNvZGUiLCJnZXQiLCJkZWNvZGVDb2RlUG9pbnQiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/entities/lib/decode_codepoint.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/entities/lib/encode.js":
/*!*********************************************!*\
  !*** ./node_modules/entities/lib/encode.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.encodeNonAsciiHTML = exports.encodeHTML = void 0;\nvar encode_html_js_1 = __importDefault(__webpack_require__(/*! ./generated/encode-html.js */ \"(app-pages-browser)/./node_modules/entities/lib/generated/encode-html.js\"));\nvar escape_js_1 = __webpack_require__(/*! ./escape.js */ \"(app-pages-browser)/./node_modules/entities/lib/escape.js\");\nvar htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n/**\n * Encodes all characters in the input using HTML entities. This includes\n * characters that are valid ASCII characters in HTML documents, such as `#`.\n *\n * To get a more compact output, consider using the `encodeNonAsciiHTML`\n * function, which will only encode characters that are not valid in HTML\n * documents, as well as non-ASCII characters.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */ function encodeHTML(data) {\n    return encodeHTMLTrieRe(htmlReplacer, data);\n}\nexports.encodeHTML = encodeHTML;\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities. This function will not encode characters that\n * are valid in HTML documents, such as `#`.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */ function encodeNonAsciiHTML(data) {\n    return encodeHTMLTrieRe(escape_js_1.xmlReplacer, data);\n}\nexports.encodeNonAsciiHTML = encodeNonAsciiHTML;\nfunction encodeHTMLTrieRe(regExp, str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while((match = regExp.exec(str)) !== null){\n        var i = match.index;\n        ret += str.substring(lastIdx, i);\n        var char = str.charCodeAt(i);\n        var next = encode_html_js_1.default.get(char);\n        if (typeof next === \"object\") {\n            // We are in a branch. Try to match the next char.\n            if (i + 1 < str.length) {\n                var nextChar = str.charCodeAt(i + 1);\n                var value = typeof next.n === \"number\" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);\n                if (value !== undefined) {\n                    ret += value;\n                    lastIdx = regExp.lastIndex += 1;\n                    continue;\n                }\n            }\n            next = next.v;\n        }\n        // We might have a tree node without a value; skip and use a numeric entity.\n        if (next !== undefined) {\n            ret += next;\n            lastIdx = i + 1;\n        } else {\n            var cp = (0, escape_js_1.getCodePoint)(str, i);\n            ret += \"&#x\".concat(cp.toString(16), \";\");\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = regExp.lastIndex += Number(cp !== char);\n        }\n    }\n    return ret + str.substr(lastIdx);\n} //# sourceMappingURL=encode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZW5jb2RlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0Esa0JBQWtCLEdBQUcsS0FBSztBQUN2RCxJQUFJSSxtQkFBbUJULGdCQUFnQlUsbUJBQU9BLENBQUMsNEdBQTRCO0FBQzNFLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLDhFQUFhO0FBQ3ZDLElBQUlFLGVBQWU7QUFDbkI7Ozs7Ozs7Ozs7Q0FVQyxHQUNELFNBQVNKLFdBQVdLLElBQUk7SUFDcEIsT0FBT0MsaUJBQWlCRixjQUFjQztBQUMxQztBQUNBUixrQkFBa0IsR0FBR0c7QUFDckI7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNELG1CQUFtQk0sSUFBSTtJQUM1QixPQUFPQyxpQkFBaUJILFlBQVlJLFdBQVcsRUFBRUY7QUFDckQ7QUFDQVIsMEJBQTBCLEdBQUdFO0FBQzdCLFNBQVNPLGlCQUFpQkUsTUFBTSxFQUFFQyxHQUFHO0lBQ2pDLElBQUlDLE1BQU07SUFDVixJQUFJQyxVQUFVO0lBQ2QsSUFBSUM7SUFDSixNQUFPLENBQUNBLFFBQVFKLE9BQU9LLElBQUksQ0FBQ0osSUFBRyxNQUFPLEtBQU07UUFDeEMsSUFBSUssSUFBSUYsTUFBTUcsS0FBSztRQUNuQkwsT0FBT0QsSUFBSU8sU0FBUyxDQUFDTCxTQUFTRztRQUM5QixJQUFJRyxPQUFPUixJQUFJUyxVQUFVLENBQUNKO1FBQzFCLElBQUlLLE9BQU9sQixpQkFBaUJtQixPQUFPLENBQUNDLEdBQUcsQ0FBQ0o7UUFDeEMsSUFBSSxPQUFPRSxTQUFTLFVBQVU7WUFDMUIsa0RBQWtEO1lBQ2xELElBQUlMLElBQUksSUFBSUwsSUFBSWEsTUFBTSxFQUFFO2dCQUNwQixJQUFJQyxXQUFXZCxJQUFJUyxVQUFVLENBQUNKLElBQUk7Z0JBQ2xDLElBQUloQixRQUFRLE9BQU9xQixLQUFLSyxDQUFDLEtBQUssV0FDeEJMLEtBQUtLLENBQUMsS0FBS0QsV0FDUEosS0FBS00sQ0FBQyxHQUNOQyxZQUNKUCxLQUFLSyxDQUFDLENBQUNILEdBQUcsQ0FBQ0U7Z0JBQ2pCLElBQUl6QixVQUFVNEIsV0FBVztvQkFDckJoQixPQUFPWjtvQkFDUGEsVUFBVUgsT0FBT21CLFNBQVMsSUFBSTtvQkFDOUI7Z0JBQ0o7WUFDSjtZQUNBUixPQUFPQSxLQUFLUyxDQUFDO1FBQ2pCO1FBQ0EsNEVBQTRFO1FBQzVFLElBQUlULFNBQVNPLFdBQVc7WUFDcEJoQixPQUFPUztZQUNQUixVQUFVRyxJQUFJO1FBQ2xCLE9BQ0s7WUFDRCxJQUFJZSxLQUFLLENBQUMsR0FBRzFCLFlBQVkyQixZQUFZLEVBQUVyQixLQUFLSztZQUM1Q0osT0FBTyxNQUFNcUIsTUFBTSxDQUFDRixHQUFHRyxRQUFRLENBQUMsS0FBSztZQUNyQyw0Q0FBNEM7WUFDNUNyQixVQUFVSCxPQUFPbUIsU0FBUyxJQUFJTSxPQUFPSixPQUFPWjtRQUNoRDtJQUNKO0lBQ0EsT0FBT1AsTUFBTUQsSUFBSXlCLE1BQU0sQ0FBQ3ZCO0FBQzVCLEVBQ0Esa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZW5jb2RlLmpzPzAyMmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuY29kZU5vbkFzY2lpSFRNTCA9IGV4cG9ydHMuZW5jb2RlSFRNTCA9IHZvaWQgMDtcbnZhciBlbmNvZGVfaHRtbF9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2dlbmVyYXRlZC9lbmNvZGUtaHRtbC5qc1wiKSk7XG52YXIgZXNjYXBlX2pzXzEgPSByZXF1aXJlKFwiLi9lc2NhcGUuanNcIik7XG52YXIgaHRtbFJlcGxhY2VyID0gL1tcXHRcXG4hLSwuLzotQFstYFxcZnstfSRcXHg4MC1cXHVGRkZGXS9nO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBjaGFyYWN0ZXJzIGluIHRoZSBpbnB1dCB1c2luZyBIVE1MIGVudGl0aWVzLiBUaGlzIGluY2x1ZGVzXG4gKiBjaGFyYWN0ZXJzIHRoYXQgYXJlIHZhbGlkIEFTQ0lJIGNoYXJhY3RlcnMgaW4gSFRNTCBkb2N1bWVudHMsIHN1Y2ggYXMgYCNgLlxuICpcbiAqIFRvIGdldCBhIG1vcmUgY29tcGFjdCBvdXRwdXQsIGNvbnNpZGVyIHVzaW5nIHRoZSBgZW5jb2RlTm9uQXNjaWlIVE1MYFxuICogZnVuY3Rpb24sIHdoaWNoIHdpbGwgb25seSBlbmNvZGUgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgdmFsaWQgaW4gSFRNTFxuICogZG9jdW1lbnRzLCBhcyB3ZWxsIGFzIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLlxuICpcbiAqIElmIGEgY2hhcmFjdGVyIGhhcyBubyBlcXVpdmFsZW50IGVudGl0eSwgYSBudW1lcmljIGhleGFkZWNpbWFsIHJlZmVyZW5jZVxuICogKGVnLiBgJiN4ZmM7YCkgd2lsbCBiZSB1c2VkLlxuICovXG5mdW5jdGlvbiBlbmNvZGVIVE1MKGRhdGEpIHtcbiAgICByZXR1cm4gZW5jb2RlSFRNTFRyaWVSZShodG1sUmVwbGFjZXIsIGRhdGEpO1xufVxuZXhwb3J0cy5lbmNvZGVIVE1MID0gZW5jb2RlSFRNTDtcbi8qKlxuICogRW5jb2RlcyBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGFzIHdlbGwgYXMgY2hhcmFjdGVycyBub3QgdmFsaWQgaW4gSFRNTFxuICogZG9jdW1lbnRzIHVzaW5nIEhUTUwgZW50aXRpZXMuIFRoaXMgZnVuY3Rpb24gd2lsbCBub3QgZW5jb2RlIGNoYXJhY3RlcnMgdGhhdFxuICogYXJlIHZhbGlkIGluIEhUTUwgZG9jdW1lbnRzLCBzdWNoIGFzIGAjYC5cbiAqXG4gKiBJZiBhIGNoYXJhY3RlciBoYXMgbm8gZXF1aXZhbGVudCBlbnRpdHksIGEgbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2VcbiAqIChlZy4gYCYjeGZjO2ApIHdpbGwgYmUgdXNlZC5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlTm9uQXNjaWlIVE1MKGRhdGEpIHtcbiAgICByZXR1cm4gZW5jb2RlSFRNTFRyaWVSZShlc2NhcGVfanNfMS54bWxSZXBsYWNlciwgZGF0YSk7XG59XG5leHBvcnRzLmVuY29kZU5vbkFzY2lpSFRNTCA9IGVuY29kZU5vbkFzY2lpSFRNTDtcbmZ1bmN0aW9uIGVuY29kZUhUTUxUcmllUmUocmVnRXhwLCBzdHIpIHtcbiAgICB2YXIgcmV0ID0gXCJcIjtcbiAgICB2YXIgbGFzdElkeCA9IDA7XG4gICAgdmFyIG1hdGNoO1xuICAgIHdoaWxlICgobWF0Y2ggPSByZWdFeHAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgaSA9IG1hdGNoLmluZGV4O1xuICAgICAgICByZXQgKz0gc3RyLnN1YnN0cmluZyhsYXN0SWR4LCBpKTtcbiAgICAgICAgdmFyIGNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgdmFyIG5leHQgPSBlbmNvZGVfaHRtbF9qc18xLmRlZmF1bHQuZ2V0KGNoYXIpO1xuICAgICAgICBpZiAodHlwZW9mIG5leHQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIC8vIFdlIGFyZSBpbiBhIGJyYW5jaC4gVHJ5IHRvIG1hdGNoIHRoZSBuZXh0IGNoYXIuXG4gICAgICAgICAgICBpZiAoaSArIDEgPCBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRDaGFyID0gc3RyLmNoYXJDb2RlQXQoaSArIDEpO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHR5cGVvZiBuZXh0Lm4gPT09IFwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICAgICAgPyBuZXh0Lm4gPT09IG5leHRDaGFyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IG5leHQub1xuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiBuZXh0Lm4uZ2V0KG5leHRDaGFyKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXQgKz0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RJZHggPSByZWdFeHAubGFzdEluZGV4ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQgPSBuZXh0LnY7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbWlnaHQgaGF2ZSBhIHRyZWUgbm9kZSB3aXRob3V0IGEgdmFsdWU7IHNraXAgYW5kIHVzZSBhIG51bWVyaWMgZW50aXR5LlxuICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXQgKz0gbmV4dDtcbiAgICAgICAgICAgIGxhc3RJZHggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjcCA9ICgwLCBlc2NhcGVfanNfMS5nZXRDb2RlUG9pbnQpKHN0ciwgaSk7XG4gICAgICAgICAgICByZXQgKz0gXCImI3hcIi5jb25jYXQoY3AudG9TdHJpbmcoMTYpLCBcIjtcIik7XG4gICAgICAgICAgICAvLyBJbmNyZWFzZSBieSAxIGlmIHdlIGhhdmUgYSBzdXJyb2dhdGUgcGFpclxuICAgICAgICAgICAgbGFzdElkeCA9IHJlZ0V4cC5sYXN0SW5kZXggKz0gTnVtYmVyKGNwICE9PSBjaGFyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0ICsgc3RyLnN1YnN0cihsYXN0SWR4KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY29kZS5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW5jb2RlTm9uQXNjaWlIVE1MIiwiZW5jb2RlSFRNTCIsImVuY29kZV9odG1sX2pzXzEiLCJyZXF1aXJlIiwiZXNjYXBlX2pzXzEiLCJodG1sUmVwbGFjZXIiLCJkYXRhIiwiZW5jb2RlSFRNTFRyaWVSZSIsInhtbFJlcGxhY2VyIiwicmVnRXhwIiwic3RyIiwicmV0IiwibGFzdElkeCIsIm1hdGNoIiwiZXhlYyIsImkiLCJpbmRleCIsInN1YnN0cmluZyIsImNoYXIiLCJjaGFyQ29kZUF0IiwibmV4dCIsImRlZmF1bHQiLCJnZXQiLCJsZW5ndGgiLCJuZXh0Q2hhciIsIm4iLCJvIiwidW5kZWZpbmVkIiwibGFzdEluZGV4IiwidiIsImNwIiwiZ2V0Q29kZVBvaW50IiwiY29uY2F0IiwidG9TdHJpbmciLCJOdW1iZXIiLCJzdWJzdHIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/entities/lib/encode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/entities/lib/escape.js":
/*!*********************************************!*\
  !*** ./node_modules/entities/lib/escape.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.getCodePoint = exports.xmlReplacer = void 0;\nexports.xmlReplacer = /[\"&'<>$\\x80-\\uFFFF]/g;\nvar xmlCodeMap = new Map([\n    [\n        34,\n        \"&quot;\"\n    ],\n    [\n        38,\n        \"&amp;\"\n    ],\n    [\n        39,\n        \"&apos;\"\n    ],\n    [\n        60,\n        \"&lt;\"\n    ],\n    [\n        62,\n        \"&gt;\"\n    ]\n]);\n// For compatibility with node < 4, we wrap `codePointAt`\nexports.getCodePoint = // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null ? function(str, index) {\n    return str.codePointAt(index);\n} : function(c, index) {\n    return (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);\n};\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */ function encodeXML(str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while((match = exports.xmlReplacer.exec(str)) !== null){\n        var i = match.index;\n        var char = str.charCodeAt(i);\n        var next = xmlCodeMap.get(char);\n        if (next !== undefined) {\n            ret += str.substring(lastIdx, i) + next;\n            lastIdx = i + 1;\n        } else {\n            ret += \"\".concat(str.substring(lastIdx, i), \"&#x\").concat((0, exports.getCodePoint)(str, i).toString(16), \";\");\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = exports.xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\nexports.encodeXML = encodeXML;\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */ exports.escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */ function getEscaper(regex, map) {\n    return function escape(data) {\n        var match;\n        var lastIdx = 0;\n        var result = \"\";\n        while(match = regex.exec(data)){\n            if (lastIdx !== match.index) {\n                result += data.substring(lastIdx, match.index);\n            }\n            // We know that this character will be in the map.\n            result += map.get(match[0].charCodeAt(0));\n            // Every match will be of length 1\n            lastIdx = match.index + 1;\n        }\n        return result + data.substring(lastIdx);\n    };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */ exports.escapeUTF8 = getEscaper(/[&<>'\"]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */ exports.escapeAttribute = getEscaper(/[\"&\\u00A0]/g, new Map([\n    [\n        34,\n        \"&quot;\"\n    ],\n    [\n        38,\n        \"&amp;\"\n    ],\n    [\n        160,\n        \"&nbsp;\"\n    ]\n]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */ exports.escapeText = getEscaper(/[&<>\\u00A0]/g, new Map([\n    [\n        38,\n        \"&amp;\"\n    ],\n    [\n        60,\n        \"&lt;\"\n    ],\n    [\n        62,\n        \"&gt;\"\n    ],\n    [\n        160,\n        \"&nbsp;\"\n    ]\n])); //# sourceMappingURL=escape.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZXNjYXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBa0IsR0FBR0EsdUJBQXVCLEdBQUdBLGtCQUFrQixHQUFHQSxjQUFjLEdBQUdBLGlCQUFpQixHQUFHQSxvQkFBb0IsR0FBR0EsbUJBQW1CLEdBQUcsS0FBSztBQUMzSkEsbUJBQW1CLEdBQUc7QUFDdEIsSUFBSVMsYUFBYSxJQUFJQyxJQUFJO0lBQ3JCO1FBQUM7UUFBSTtLQUFTO0lBQ2Q7UUFBQztRQUFJO0tBQVE7SUFDYjtRQUFDO1FBQUk7S0FBUztJQUNkO1FBQUM7UUFBSTtLQUFPO0lBQ1o7UUFBQztRQUFJO0tBQU87Q0FDZjtBQUNELHlEQUF5RDtBQUN6RFYsb0JBQW9CLEdBQ3BCLHVFQUF1RTtBQUN2RVcsT0FBT0MsU0FBUyxDQUFDQyxXQUFXLElBQUksT0FDMUIsU0FBVUMsR0FBRyxFQUFFQyxLQUFLO0lBQUksT0FBT0QsSUFBSUQsV0FBVyxDQUFDRTtBQUFRLElBRXJELFNBQVVDLENBQUMsRUFBRUQsS0FBSztJQUNkLE9BQU8sQ0FBQ0MsRUFBRUMsVUFBVSxDQUFDRixTQUFTLE1BQUssTUFBTyxTQUNwQyxDQUFDQyxFQUFFQyxVQUFVLENBQUNGLFNBQVMsTUFBSyxJQUFLLFFBQy9CQyxFQUFFQyxVQUFVLENBQUNGLFFBQVEsS0FDckIsU0FDQSxVQUNGQyxFQUFFQyxVQUFVLENBQUNGO0FBQ3ZCO0FBQ1I7Ozs7OztDQU1DLEdBQ0QsU0FBU1QsVUFBVVEsR0FBRztJQUNsQixJQUFJSSxNQUFNO0lBQ1YsSUFBSUMsVUFBVTtJQUNkLElBQUlDO0lBQ0osTUFBTyxDQUFDQSxRQUFRcEIsUUFBUVEsV0FBVyxDQUFDYSxJQUFJLENBQUNQLElBQUcsTUFBTyxLQUFNO1FBQ3JELElBQUlRLElBQUlGLE1BQU1MLEtBQUs7UUFDbkIsSUFBSVEsT0FBT1QsSUFBSUcsVUFBVSxDQUFDSztRQUMxQixJQUFJRSxPQUFPZixXQUFXZ0IsR0FBRyxDQUFDRjtRQUMxQixJQUFJQyxTQUFTRSxXQUFXO1lBQ3BCUixPQUFPSixJQUFJYSxTQUFTLENBQUNSLFNBQVNHLEtBQUtFO1lBQ25DTCxVQUFVRyxJQUFJO1FBQ2xCLE9BQ0s7WUFDREosT0FBTyxHQUFHVSxNQUFNLENBQUNkLElBQUlhLFNBQVMsQ0FBQ1IsU0FBU0csSUFBSSxPQUFPTSxNQUFNLENBQUMsQ0FBQyxHQUFHNUIsUUFBUU8sWUFBWSxFQUFFTyxLQUFLUSxHQUFHTyxRQUFRLENBQUMsS0FBSztZQUMxRyw0Q0FBNEM7WUFDNUNWLFVBQVVuQiw2QkFBNkIsSUFBSStCLE9BQU8sQ0FBQ1IsT0FBTyxNQUFLLE1BQU87UUFDMUU7SUFDSjtJQUNBLE9BQU9MLE1BQU1KLElBQUlrQixNQUFNLENBQUNiO0FBQzVCO0FBQ0FuQixpQkFBaUIsR0FBR007QUFDcEI7Ozs7Ozs7O0NBUUMsR0FDRE4sY0FBYyxHQUFHTTtBQUNqQjs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTMkIsV0FBV0MsS0FBSyxFQUFFQyxHQUFHO0lBQzFCLE9BQU8sU0FBUzlCLE9BQU8rQixJQUFJO1FBQ3ZCLElBQUloQjtRQUNKLElBQUlELFVBQVU7UUFDZCxJQUFJa0IsU0FBUztRQUNiLE1BQVFqQixRQUFRYyxNQUFNYixJQUFJLENBQUNlLE1BQVE7WUFDL0IsSUFBSWpCLFlBQVlDLE1BQU1MLEtBQUssRUFBRTtnQkFDekJzQixVQUFVRCxLQUFLVCxTQUFTLENBQUNSLFNBQVNDLE1BQU1MLEtBQUs7WUFDakQ7WUFDQSxrREFBa0Q7WUFDbERzQixVQUFVRixJQUFJVixHQUFHLENBQUNMLEtBQUssQ0FBQyxFQUFFLENBQUNILFVBQVUsQ0FBQztZQUN0QyxrQ0FBa0M7WUFDbENFLFVBQVVDLE1BQU1MLEtBQUssR0FBRztRQUM1QjtRQUNBLE9BQU9zQixTQUFTRCxLQUFLVCxTQUFTLENBQUNSO0lBQ25DO0FBQ0o7QUFDQTs7Ozs7O0NBTUMsR0FDRG5CLGtCQUFrQixHQUFHaUMsV0FBVyxZQUFZeEI7QUFDNUM7Ozs7O0NBS0MsR0FDRFQsdUJBQXVCLEdBQUdpQyxXQUFXLGVBQWUsSUFBSXZCLElBQUk7SUFDeEQ7UUFBQztRQUFJO0tBQVM7SUFDZDtRQUFDO1FBQUk7S0FBUTtJQUNiO1FBQUM7UUFBSztLQUFTO0NBQ2xCO0FBQ0Q7Ozs7O0NBS0MsR0FDRFYsa0JBQWtCLEdBQUdpQyxXQUFXLGdCQUFnQixJQUFJdkIsSUFBSTtJQUNwRDtRQUFDO1FBQUk7S0FBUTtJQUNiO1FBQUM7UUFBSTtLQUFPO0lBQ1o7UUFBQztRQUFJO0tBQU87SUFDWjtRQUFDO1FBQUs7S0FBUztDQUNsQixJQUNELGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VzY2FwZS5qcz85MGMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lc2NhcGVUZXh0ID0gZXhwb3J0cy5lc2NhcGVBdHRyaWJ1dGUgPSBleHBvcnRzLmVzY2FwZVVURjggPSBleHBvcnRzLmVzY2FwZSA9IGV4cG9ydHMuZW5jb2RlWE1MID0gZXhwb3J0cy5nZXRDb2RlUG9pbnQgPSBleHBvcnRzLnhtbFJlcGxhY2VyID0gdm9pZCAwO1xuZXhwb3J0cy54bWxSZXBsYWNlciA9IC9bXCImJzw+JFxceDgwLVxcdUZGRkZdL2c7XG52YXIgeG1sQ29kZU1hcCA9IG5ldyBNYXAoW1xuICAgIFszNCwgXCImcXVvdDtcIl0sXG4gICAgWzM4LCBcIiZhbXA7XCJdLFxuICAgIFszOSwgXCImYXBvcztcIl0sXG4gICAgWzYwLCBcIiZsdDtcIl0sXG4gICAgWzYyLCBcIiZndDtcIl0sXG5dKTtcbi8vIEZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9kZSA8IDQsIHdlIHdyYXAgYGNvZGVQb2ludEF0YFxuZXhwb3J0cy5nZXRDb2RlUG9pbnQgPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG5TdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0ICE9IG51bGxcbiAgICA/IGZ1bmN0aW9uIChzdHIsIGluZGV4KSB7IHJldHVybiBzdHIuY29kZVBvaW50QXQoaW5kZXgpOyB9XG4gICAgOiAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgICBmdW5jdGlvbiAoYywgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAoYy5jaGFyQ29kZUF0KGluZGV4KSAmIDB4ZmMwMCkgPT09IDB4ZDgwMFxuICAgICAgICAgICAgICAgID8gKGMuY2hhckNvZGVBdChpbmRleCkgLSAweGQ4MDApICogMHg0MDAgK1xuICAgICAgICAgICAgICAgICAgICBjLmNoYXJDb2RlQXQoaW5kZXggKyAxKSAtXG4gICAgICAgICAgICAgICAgICAgIDB4ZGMwMCArXG4gICAgICAgICAgICAgICAgICAgIDB4MTAwMDBcbiAgICAgICAgICAgICAgICA6IGMuY2hhckNvZGVBdChpbmRleCk7XG4gICAgICAgIH07XG4vKipcbiAqIEVuY29kZXMgYWxsIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBhcyB3ZWxsIGFzIGNoYXJhY3RlcnMgbm90IHZhbGlkIGluIFhNTFxuICogZG9jdW1lbnRzIHVzaW5nIFhNTCBlbnRpdGllcy5cbiAqXG4gKiBJZiBhIGNoYXJhY3RlciBoYXMgbm8gZXF1aXZhbGVudCBlbnRpdHksIGFcbiAqIG51bWVyaWMgaGV4YWRlY2ltYWwgcmVmZXJlbmNlIChlZy4gYCYjeGZjO2ApIHdpbGwgYmUgdXNlZC5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlWE1MKHN0cikge1xuICAgIHZhciByZXQgPSBcIlwiO1xuICAgIHZhciBsYXN0SWR4ID0gMDtcbiAgICB2YXIgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IGV4cG9ydHMueG1sUmVwbGFjZXIuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgaSA9IG1hdGNoLmluZGV4O1xuICAgICAgICB2YXIgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgbmV4dCA9IHhtbENvZGVNYXAuZ2V0KGNoYXIpO1xuICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXQgKz0gc3RyLnN1YnN0cmluZyhsYXN0SWR4LCBpKSArIG5leHQ7XG4gICAgICAgICAgICBsYXN0SWR4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXQgKz0gXCJcIi5jb25jYXQoc3RyLnN1YnN0cmluZyhsYXN0SWR4LCBpKSwgXCImI3hcIikuY29uY2F0KCgwLCBleHBvcnRzLmdldENvZGVQb2ludCkoc3RyLCBpKS50b1N0cmluZygxNiksIFwiO1wiKTtcbiAgICAgICAgICAgIC8vIEluY3JlYXNlIGJ5IDEgaWYgd2UgaGF2ZSBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICBsYXN0SWR4ID0gZXhwb3J0cy54bWxSZXBsYWNlci5sYXN0SW5kZXggKz0gTnVtYmVyKChjaGFyICYgMHhmYzAwKSA9PT0gMHhkODAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0ICsgc3RyLnN1YnN0cihsYXN0SWR4KTtcbn1cbmV4cG9ydHMuZW5jb2RlWE1MID0gZW5jb2RlWE1MO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBub24tQVNDSUkgY2hhcmFjdGVycywgYXMgd2VsbCBhcyBjaGFyYWN0ZXJzIG5vdCB2YWxpZCBpbiBYTUxcbiAqIGRvY3VtZW50cyB1c2luZyBudW1lcmljIGhleGFkZWNpbWFsIHJlZmVyZW5jZSAoZWcuIGAmI3hmYztgKS5cbiAqXG4gKiBIYXZlIGEgbG9vayBhdCBgZXNjYXBlVVRGOGAgaWYgeW91IHdhbnQgYSBtb3JlIGNvbmNpc2Ugb3V0cHV0IGF0IHRoZSBleHBlbnNlXG4gKiBvZiByZWR1Y2VkIHRyYW5zcG9ydGFiaWxpdHkuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGVzY2FwZS5cbiAqL1xuZXhwb3J0cy5lc2NhcGUgPSBlbmNvZGVYTUw7XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVzY2FwZXMgYWxsIGNoYXJhY3RlcnMgbWF0Y2hlZCBieSB0aGUgZ2l2ZW4gcmVndWxhclxuICogZXhwcmVzc2lvbiB1c2luZyB0aGUgZ2l2ZW4gbWFwIG9mIGNoYXJhY3RlcnMgdG8gZXNjYXBlIHRvIHRoZWlyIGVudGl0aWVzLlxuICpcbiAqIEBwYXJhbSByZWdleCBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggY2hhcmFjdGVycyB0byBlc2NhcGUuXG4gKiBAcGFyYW0gbWFwIE1hcCBvZiBjaGFyYWN0ZXJzIHRvIGVzY2FwZSB0byB0aGVpciBlbnRpdGllcy5cbiAqXG4gKiBAcmV0dXJucyBGdW5jdGlvbiB0aGF0IGVzY2FwZXMgYWxsIGNoYXJhY3RlcnMgbWF0Y2hlZCBieSB0aGUgZ2l2ZW4gcmVndWxhclxuICogZXhwcmVzc2lvbiB1c2luZyB0aGUgZ2l2ZW4gbWFwIG9mIGNoYXJhY3RlcnMgdG8gZXNjYXBlIHRvIHRoZWlyIGVudGl0aWVzLlxuICovXG5mdW5jdGlvbiBnZXRFc2NhcGVyKHJlZ2V4LCBtYXApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZXNjYXBlKGRhdGEpIHtcbiAgICAgICAgdmFyIG1hdGNoO1xuICAgICAgICB2YXIgbGFzdElkeCA9IDA7XG4gICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhkYXRhKSkpIHtcbiAgICAgICAgICAgIGlmIChsYXN0SWR4ICE9PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBkYXRhLnN1YnN0cmluZyhsYXN0SWR4LCBtYXRjaC5pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBrbm93IHRoYXQgdGhpcyBjaGFyYWN0ZXIgd2lsbCBiZSBpbiB0aGUgbWFwLlxuICAgICAgICAgICAgcmVzdWx0ICs9IG1hcC5nZXQobWF0Y2hbMF0uY2hhckNvZGVBdCgwKSk7XG4gICAgICAgICAgICAvLyBFdmVyeSBtYXRjaCB3aWxsIGJlIG9mIGxlbmd0aCAxXG4gICAgICAgICAgICBsYXN0SWR4ID0gbWF0Y2guaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBkYXRhLnN1YnN0cmluZyhsYXN0SWR4KTtcbiAgICB9O1xufVxuLyoqXG4gKiBFbmNvZGVzIGFsbCBjaGFyYWN0ZXJzIG5vdCB2YWxpZCBpbiBYTUwgZG9jdW1lbnRzIHVzaW5nIFhNTCBlbnRpdGllcy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIG91dHB1dCB3aWxsIGJlIGNoYXJhY3Rlci1zZXQgZGVwZW5kZW50LlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlc2NhcGUuXG4gKi9cbmV4cG9ydHMuZXNjYXBlVVRGOCA9IGdldEVzY2FwZXIoL1smPD4nXCJdL2csIHhtbENvZGVNYXApO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSB0byBiZSBlc2NhcGVkIGluIEhUTUwgYXR0cmlidXRlcyxcbiAqIGZvbGxvd2luZyB7QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI2VzY2FwaW5nU3RyaW5nfS5cbiAqXG4gKiBAcGFyYW0gZGF0YSBTdHJpbmcgdG8gZXNjYXBlLlxuICovXG5leHBvcnRzLmVzY2FwZUF0dHJpYnV0ZSA9IGdldEVzY2FwZXIoL1tcIiZcXHUwMEEwXS9nLCBuZXcgTWFwKFtcbiAgICBbMzQsIFwiJnF1b3Q7XCJdLFxuICAgIFszOCwgXCImYW1wO1wiXSxcbiAgICBbMTYwLCBcIiZuYnNwO1wiXSxcbl0pKTtcbi8qKlxuICogRW5jb2RlcyBhbGwgY2hhcmFjdGVycyB0aGF0IGhhdmUgdG8gYmUgZXNjYXBlZCBpbiBIVE1MIHRleHQsXG4gKiBmb2xsb3dpbmcge0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNlc2NhcGluZ1N0cmluZ30uXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGVzY2FwZS5cbiAqL1xuZXhwb3J0cy5lc2NhcGVUZXh0ID0gZ2V0RXNjYXBlcigvWyY8PlxcdTAwQTBdL2csIG5ldyBNYXAoW1xuICAgIFszOCwgXCImYW1wO1wiXSxcbiAgICBbNjAsIFwiJmx0O1wiXSxcbiAgICBbNjIsIFwiJmd0O1wiXSxcbiAgICBbMTYwLCBcIiZuYnNwO1wiXSxcbl0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzY2FwZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlc2NhcGVUZXh0IiwiZXNjYXBlQXR0cmlidXRlIiwiZXNjYXBlVVRGOCIsImVzY2FwZSIsImVuY29kZVhNTCIsImdldENvZGVQb2ludCIsInhtbFJlcGxhY2VyIiwieG1sQ29kZU1hcCIsIk1hcCIsIlN0cmluZyIsInByb3RvdHlwZSIsImNvZGVQb2ludEF0Iiwic3RyIiwiaW5kZXgiLCJjIiwiY2hhckNvZGVBdCIsInJldCIsImxhc3RJZHgiLCJtYXRjaCIsImV4ZWMiLCJpIiwiY2hhciIsIm5leHQiLCJnZXQiLCJ1bmRlZmluZWQiLCJzdWJzdHJpbmciLCJjb25jYXQiLCJ0b1N0cmluZyIsImxhc3RJbmRleCIsIk51bWJlciIsInN1YnN0ciIsImdldEVzY2FwZXIiLCJyZWdleCIsIm1hcCIsImRhdGEiLCJyZXN1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/entities/lib/escape.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/entities/lib/generated/decode-data-html.js":
/*!*****************************************************************!*\
  !*** ./node_modules/entities/lib/generated/decode-data-html.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Generated using scripts/write-decode-map.ts\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = new Uint16Array(// prettier-ignore\n'ᵁ<\\xd5ıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\\x00\\x00\\x00\\x00\\x00\\x00ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig耻\\xc6䃆P耻&䀦cute耻\\xc1䃁reve;䄂Āiyx}rc耻\\xc2䃂;䐐r;쀀\\ud835\\udd04rave耻\\xc0䃀pha;䎑acr;䄀d;橓Āgp\\x9d\\xa1on;䄄f;쀀\\ud835\\udd38plyFunction;恡ing耻\\xc5䃅Ācs\\xbe\\xc3r;쀀\\ud835\\udc9cign;扔ilde耻\\xc3䃃ml耻\\xc4䃄Ѐaceforsu\\xe5\\xfb\\xfeėĜĢħĪĀcr\\xea\\xf2kslash;或Ŷ\\xf6\\xf8;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀\\ud835\\udd05pf;쀀\\ud835\\udd39eve;䋘c\\xf2ēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻\\xa9䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻\\xc7䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷\\xf2ſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀\\ud835\\udc9epĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀\\ud835\\udd07Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\\x00\\x00\\x00͔͂\\x00Ѕf;쀀\\ud835\\udd3bƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegra\\xecȹoɴ͹\\x00\\x00ͻ\\xbb͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔e\\xe5ˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\\x00\\x00ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\\x00ц\\x00ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\\x00ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀\\ud835\\udc9frok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻\\xd0䃐cute耻\\xc9䃉ƀaiyӒӗӜron;䄚rc耻\\xca䃊;䐭ot;䄖r;쀀\\ud835\\udd08rave耻\\xc8䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\\x00\\x00ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀\\ud835\\udd3csilon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻\\xcb䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀\\ud835\\udd09lledɓ֗\\x00\\x00֣mallSquare;旼erySmallSquare;斪Ͱֺ\\x00ֿ\\x00\\x00ׄf;쀀\\ud835\\udd3dAll;戀riertrf;愱c\\xf2׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀\\ud835\\udd0a;拙pf;쀀\\ud835\\udd3eeater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀\\ud835\\udca2;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\\x00ڲf;愍izontalLine;攀Āctۃۅ\\xf2کrok;䄦mpńېۘownHum\\xf0įqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻\\xcd䃍Āiyܓܘrc耻\\xce䃎;䐘ot;䄰r;愑rave耻\\xcc䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lie\\xf3ϝǴ݉\\x00ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀\\ud835\\udd40a;䎙cr;愐ilde;䄨ǫޚ\\x00ޞcy;䐆l耻\\xcf䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀\\ud835\\udd0dpf;쀀\\ud835\\udd41ǣ߇\\x00ߌr;쀀\\ud835\\udca5rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀\\ud835\\udd0epf;쀀\\ud835\\udd42cr;쀀\\ud835\\udca6րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\\x00ࣃbleBracket;柦nǔࣈ\\x00࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ight\\xe1Μs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀\\ud835\\udd0fĀ;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊight\\xe1οight\\xe1ϊf;쀀\\ud835\\udd43erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂ\\xf2ࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀\\ud835\\udd10nusPlus;戓pf;쀀\\ud835\\udd44c\\xf2੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘\\xeb૙eryThi\\xee૙tedĀGL૸ଆreaterGreate\\xf2ٳessLes\\xf3ੈLine;䀊r;쀀\\ud835\\udd11ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀\\ud835\\udca9ilde耻\\xd1䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻\\xd3䃓Āiy෎ීrc耻\\xd4䃔;䐞blac;䅐r;쀀\\ud835\\udd12rave耻\\xd2䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀\\ud835\\udd46enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀\\ud835\\udcaaash耻\\xd8䃘iŬื฼de耻\\xd5䃕es;樷ml耻\\xd6䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀\\ud835\\udd13i;䎦;䎠usMinus;䂱Āipຢອncareplan\\xe5ڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀\\ud835\\udcab;䎨ȀUfos༑༖༛༟OT耻\"䀢r;쀀\\ud835\\udd14pf;愚cr;쀀\\ud835\\udcac؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻\\xae䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r\\xbbཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\\x00စbleBracket;柧nǔည\\x00နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀\\ud835\\udd16ortȀDLRUᄪᄴᄾᅉownArrow\\xbbОeftArrow\\xbb࢚ightArrow\\xbb࿝pArrow;憑gma;䎣allCircle;战pf;쀀\\ud835\\udd4aɲᅭ\\x00\\x00ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀\\ud835\\udcaear;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Th\\xe1ྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et\\xbbሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻\\xde䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀\\ud835\\udd17Āeiቻ኉ǲኀ\\x00ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀\\ud835\\udd4bipleDot;惛Āctዖዛr;쀀\\ud835\\udcafrok;䅦ૡዷጎጚጦ\\x00ጬጱ\\x00\\x00\\x00\\x00\\x00ጸጽ፷ᎅ\\x00᏿ᐄᐊᐐĀcrዻጁute耻\\xda䃚rĀ;oጇገ憟cir;楉rǣጓ\\x00጖y;䐎ve;䅬Āiyጞጣrc耻\\xdb䃛;䐣blac;䅰r;쀀\\ud835\\udd18rave耻\\xd9䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀\\ud835\\udd4cЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥own\\xe1ϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀\\ud835\\udcb0ilde;䅨ml耻\\xdc䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀\\ud835\\udd19pf;쀀\\ud835\\udd4dcr;쀀\\ud835\\udcb1dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀\\ud835\\udd1apf;쀀\\ud835\\udd4ecr;쀀\\ud835\\udcb2Ȁfiosᓋᓐᓒᓘr;쀀\\ud835\\udd1b;䎞pf;쀀\\ud835\\udd4fcr;쀀\\ud835\\udcb3ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻\\xdd䃝Āiyᔉᔍrc;䅶;䐫r;쀀\\ud835\\udd1cpf;쀀\\ud835\\udd50cr;쀀\\ud835\\udcb4ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\\x00ᕛoWidt\\xe8૙a;䎖r;愨pf;愤cr;쀀\\ud835\\udcb5௡ᖃᖊᖐ\\x00ᖰᖶᖿ\\x00\\x00\\x00\\x00ᗆᗛᗫᙟ᙭\\x00ᚕ᚛ᚲᚹ\\x00ᚾcute耻\\xe1䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻\\xe2䃢te肻\\xb4̆;䐰lig耻\\xe6䃦Ā;r\\xb2ᖺ;쀀\\ud835\\udd1erave耻\\xe0䃠ĀepᗊᗖĀfpᗏᗔsym;愵\\xe8ᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\\x00\\x00ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e\\xbbᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢\\xbb\\xb9arr;捼Āgpᙣᙧon;䄅f;쀀\\ud835\\udd52΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒ\\xf1ᚃing耻\\xe5䃥ƀctyᚡᚦᚨr;쀀\\ud835\\udcb6;䀪mpĀ;e዁ᚯ\\xf1ʈilde耻\\xe3䃣ml耻\\xe4䃤Āciᛂᛈonin\\xf4ɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e\\xbbᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰s\\xe9ᜌno\\xf5ēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀\\ud835\\udd1fg΀costuvwឍឝឳេ៕៛៞ƀaiuបពរ\\xf0ݠrc;旯p\\xbb፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\\x00\\x00ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄e\\xe5ᑄ\\xe5ᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\\x00ᠳƲᠯ\\x00ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀\\ud835\\udd53Ā;tᏋᡣom\\xbbᏌtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻\\xa6䂦Ȁceioᥑᥖᥚᥠr;쀀\\ud835\\udcb7mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t\\xbb᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\\x00᧨ᨑᨕᨲ\\x00ᨷᩐ\\x00\\x00᪴\\x00\\x00᫁\\x00\\x00ᬡᬮ᭍᭒\\x00᯽\\x00ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁\\xeeړȀaeiu᧰᧻ᨁᨅǰ᧵\\x00᧸s;橍on;䄍dil耻\\xe7䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻\\xb8ƭptyv;榲t脀\\xa2;eᨭᨮ䂢r\\xe4Ʋr;쀀\\ud835\\udd20ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark\\xbbᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\\x00\\x00᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟\\xbbཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it\\xbb᪼ˬ᫇᫔᫺\\x00ᬊonĀ;eᫍᫎ䀺Ā;q\\xc7\\xc6ɭ᫙\\x00\\x00᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁\\xeeᅠeĀmx᫱᫶ent\\xbb᫩e\\xf3ɍǧ᫾\\x00ᬇĀ;dኻᬂot;橭n\\xf4Ɇƀfryᬐᬔᬗ;쀀\\ud835\\udd54o\\xe4ɔ脀\\xa9;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀\\ud835\\udcb8Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\\x00\\x00᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\\x00\\x00ᯒre\\xe3᭳u\\xe3᭵ee;拎edge;拏en耻\\xa4䂤earrowĀlrᯮ᯳eft\\xbbᮀight\\xbbᮽe\\xe4ᯝĀciᰁᰇonin\\xf4Ƿnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍r\\xf2΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸\\xf2ᄳhĀ;vᱚᱛ怐\\xbbऊūᱡᱧarow;椏a\\xe3̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻\\xb0䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀\\ud835\\udd21arĀlrᲳᲵ\\xbbࣜ\\xbbသʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀\\xf7;o᳧ᳰntimes;拇n\\xf8᳷cy;䑒cɯᴆ\\x00\\x00ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀\\ud835\\udd55ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedg\\xe5\\xfanƀadhᄮᵝᵧownarrow\\xf3ᲃarpoonĀlrᵲᵶef\\xf4Ჴigh\\xf4ᲶŢᵿᶅkaro\\xf7གɯᶊ\\x00\\x00ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀\\ud835\\udcb9;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃r\\xf2Щa\\xf2ྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴo\\xf4ᲉĀcsḎḔute耻\\xe9䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻\\xea䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀\\ud835\\udd22ƀ;rsṐṑṗ檚ave耻\\xe8䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et\\xbbẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀\\ud835\\udd56ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on\\xbbớ;䏵ȀcsuvỪỳἋἣĀioữḱrc\\xbbḮɩỹ\\x00\\x00ỻ\\xedՈantĀglἂἆtr\\xbbṝess\\xbbṺƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯o\\xf4͒ĀahὉὋ;䎷耻\\xf0䃰Āmrὓὗl耻\\xeb䃫o;悬ƀcipὡὤὧl;䀡s\\xf4ծĀeoὬὴctatio\\xeeՙnential\\xe5չৡᾒ\\x00ᾞ\\x00ᾡᾧ\\x00\\x00ῆῌ\\x00ΐ\\x00ῦῪ \\x00 ⁚llingdotse\\xf1Ṅy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\\x00\\x00᾽g;耀ﬀig;耀ﬄ;쀀\\ud835\\udd23lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\\x00ῳf;쀀\\ud835\\udd57ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\\x00⁐β•‥‧‪‬\\x00‮耻\\xbd䂽;慓耻\\xbc䂼;慕;慙;慛Ƴ‴\\x00‶;慔;慖ʴ‾⁁\\x00\\x00⁃耻\\xbe䂾;慗;慜5;慘ƶ⁌\\x00⁎;慚;慝8;慞l;恄wn;挢cr;쀀\\ud835\\udcbbࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lan\\xf4٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀\\ud835\\udd24Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox\\xbbℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀\\ud835\\udd58Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\\x00↎pro\\xf8₞r;楸qĀlqؿ↖les\\xf3₈i\\xed٫Āen↣↭rtneqq;쀀≩︀\\xc5↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽r\\xf2ΠȀilmr⇐⇔⇗⇛rs\\xf0ᒄf\\xbb․il\\xf4کĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it\\xbb∊lip;怦con;抹r;쀀\\ud835\\udd25sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀\\ud835\\udd59bar;怕ƀclt≯≴≸r;쀀\\ud835\\udcbdas\\xe8⇴rok;䄧Ābp⊂⊇ull;恃hen\\xbbᱛૡ⊣\\x00⊪\\x00⊸⋅⋎\\x00⋕⋳\\x00\\x00⋸⌢⍧⍢⍿\\x00⎆⎪⎴cute耻\\xed䃭ƀ;iyݱ⊰⊵rc耻\\xee䃮;䐸Ācx⊼⊿y;䐵cl耻\\xa1䂡ĀfrΟ⋉;쀀\\ud835\\udd26rave耻\\xec䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓in\\xe5ގar\\xf4ܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝do\\xf4⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙er\\xf3ᕣ\\xe3⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀\\ud835\\udd5aa;䎹uest耻\\xbf䂿Āci⎊⎏r;쀀\\ud835\\udcbenʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\\x00⎼cy;䑖l耻\\xef䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀\\ud835\\udd27ath;䈷pf;쀀\\ud835\\udd5bǣ⏬\\x00⏱r;쀀\\ud835\\udcbfrcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀\\ud835\\udd28reen;䄸cy;䑅cy;䑜pf;쀀\\ud835\\udd5ccr;쀀\\ud835\\udcc0஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼r\\xf2৆\\xf2Εail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\\x00⒪\\x00⒱\\x00\\x00\\x00\\x00\\x00⒵Ⓔ\\x00ⓆⓈⓍ\\x00⓹ute;䄺mptyv;榴ra\\xeeࡌbda;䎻gƀ;dlࢎⓁⓃ;榑\\xe5ࢎ;檅uo耻\\xab䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝\\xeb≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼\\xecࢰ\\xe2┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□a\\xe9⓶arpoonĀdu▯▴own\\xbbњp\\xbb०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoon\\xf3྘quigarro\\xf7⇰hreetimes;拋ƀ;qs▋ও◺lan\\xf4বʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋ppro\\xf8Ⓠot;拖qĀgq♃♅\\xf4উgt\\xf2⒌\\xf4ছi\\xedলƀilr♕࣡♚sht;楼;쀀\\ud835\\udd29Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖r\\xf2◁orne\\xf2ᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che\\xbb⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox\\xbb⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽r\\xebࣁgƀlmr⛿✍✔eftĀar০✇ight\\xe1৲apsto;柼ight\\xe1৽parrowĀlr✥✩ef\\xf4⓭ight;憬ƀafl✶✹✽r;榅;쀀\\ud835\\udd5dus;樭imes;樴š❋❏st;戗\\xe1ፎƀ;ef❗❘᠀旊nge\\xbb❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇r\\xf2ࢨorne\\xf2ᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀\\ud835\\udcc1mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹re\\xe5◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀\\xc5⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻\\xaf䂯Āet⡗⡙;時Ā;e⡞⡟朠se\\xbb⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻ow\\xeeҌef\\xf4ए\\xf0Ꮡker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle\\xbbᘦr;쀀\\ud835\\udd2ao;愧ƀcdn⢯⢴⣉ro耻\\xb5䂵Ȁ;acdᑤ⢽⣀⣄s\\xf4ᚧir;櫰ot肻\\xb7Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛\\xf2−\\xf0ઁĀdp⣩⣮els;抧f;쀀\\ud835\\udd5eĀct⣸⣽r;쀀\\ud835\\udcc2pos\\xbbᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la\\xbb˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉ro\\xf8඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\\x00⧣p肻\\xa0ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\\x00⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸ui\\xf6ୣĀei⩊⩎ar;椨\\xed஘istĀ;s஠டr;쀀\\ud835\\udd2bȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lan\\xf4௢i\\xed௪Ā;rஶ⪁\\xbbஷƀAap⪊⪍⪑r\\xf2⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹r\\xf2⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro\\xf7⫁ightarro\\xf7⪐ƀ;qs఻⪺⫪lan\\xf4ౕĀ;sౕ⫴\\xbbశi\\xedౝĀ;rవ⫾iĀ;eచథi\\xe4ඐĀpt⬌⬑f;쀀\\ud835\\udd5f膀\\xac;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lle\\xec୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳u\\xe5ಥĀ;cಘ⭸Ā;eಒ⭽\\xf1ಘȀAait⮈⮋⮝⮧r\\xf2⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow\\xbb⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉u\\xe5൅;쀀\\ud835\\udcc3ortɭ⬅\\x00\\x00⯖ar\\xe1⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭\\xe5೸\\xe5ഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗ\\xf1സȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇ\\xecௗlde耻\\xf1䃱\\xe7ృiangleĀlrⱒⱜeftĀ;eచⱚ\\xf1దightĀ;eೋⱥ\\xf1೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00ⴭ\\x00ⴸⵈⵠⵥ⵲ⶄᬇ\\x00\\x00ⶍⶫ\\x00ⷈⷎ\\x00ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻\\xf3䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻\\xf4䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀\\ud835\\udd2cͯ⵹\\x00\\x00⵼\\x00ⶂn;䋛ave耻\\xf2䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨr\\xf2᪀Āir⶝ⶠr;榾oss;榻n\\xe5๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀\\ud835\\udd60ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨r\\xf2᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f\\xbbⷿ耻\\xaa䂪耻\\xba䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧\\xf2⸁ash耻\\xf8䃸l;折iŬⸯ⸴de耻\\xf5䃵esĀ;aǛ⸺s;樶ml耻\\xf6䃶bar;挽ૡ⹞\\x00⹽\\x00⺀⺝\\x00⺢⺹\\x00\\x00⻋ຜ\\x00⼓\\x00\\x00⼫⾼\\x00⿈rȀ;astЃ⹧⹲຅脀\\xb6;l⹭⹮䂶le\\xecЃɩ⹸\\x00\\x00⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀\\ud835\\udd2dƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕ma\\xf4੶ne;明ƀ;tv⺿⻀⻈䏀chfork\\xbb´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎\\xf6⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻\\xb1ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀\\ud835\\udd61nd耻\\xa3䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷u\\xe5໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾ppro\\xf8⽃urlye\\xf1໙\\xf1໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨i\\xedໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺\\xf0⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴\\xef໻rel;抰Āci⿀⿅r;쀀\\ud835\\udcc5;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀\\ud835\\udd2epf;쀀\\ud835\\udd62rime;恗cr;쀀\\ud835\\udcc6ƀaeo⿸〉〓tĀei⿾々rnion\\xf3ڰnt;樖stĀ;e【】䀿\\xf1Ἑ\\xf4༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがr\\xf2Ⴓ\\xf2ϝail;検ar\\xf2ᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕i\\xe3ᅮmptyv;榳gȀ;del࿑らるろ;榒;榥\\xe5࿑uo耻\\xbb䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞\\xeb≝\\xf0✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶al\\xf3༞ƀabrョリヮr\\xf2៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗\\xec࿲\\xe2ヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜn\\xe5Ⴛar\\xf4ྩt;断ƀilrㅩဣㅮsht;楽;쀀\\ud835\\udd2fĀaoㅷㆆrĀduㅽㅿ\\xbbѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭa\\xe9トarpoonĀduㆻㆿow\\xeeㅾp\\xbb႒eftĀah㇊㇐rrow\\xf3࿪arpoon\\xf3Ցightarrows;應quigarro\\xf7ニhreetimes;拌g;䋚ingdotse\\xf1ἲƀahm㈍㈐㈓r\\xf2࿪a\\xf2Ց;怏oustĀ;a㈞㈟掱che\\xbb㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾r\\xebဃƀafl㉇㉊㉎r;榆;쀀\\ud835\\udd63us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒ar\\xf2㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀\\ud835\\udcc7Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠re\\xe5ㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\\x00㍺㎤\\x00\\x00㏬㏰\\x00㐨㑈㑚㒭㒱㓊㓱\\x00㘖\\x00\\x00㘳cute;䅛qu\\xef➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\\x00㋼;檸on;䅡u\\xe5ᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓i\\xedሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒\\xeb∨Ā;oਸ਼਴t耻\\xa7䂧i;䀻war;椩mĀin㍩\\xf0nu\\xf3\\xf1t;朶rĀ;o㍶⁕쀀\\ud835\\udd30Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\\x00\\x00㎜i\\xe4ᑤara\\xec⹯耻\\xad䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲ar\\xf2ᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetm\\xe9㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀\\ud835\\udd64aĀdr㑍ЂesĀ;u㑔㑕晠it\\xbb㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍\\xf1ᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝\\xf1ᆮƀ;afᅻ㒦ְrť㒫ֱ\\xbbᅼar\\xf2ᅈȀcemt㒹㒾㓂㓅r;쀀\\ud835\\udcc8tm\\xee\\xf1i\\xec㐕ar\\xe6ᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psilo\\xeeỠh\\xe9⺯s\\xbb⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦ppro\\xf8㋺urlye\\xf1ᇾ\\xf1ᇳƀaes㖂㖈㌛ppro\\xf8㌚q\\xf1㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻\\xb9䂹耻\\xb2䂲耻\\xb3䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨\\xeb∮Ā;oਫ਩war;椪lig耻\\xdf䃟௡㙑㙝㙠ዎ㙳㙹\\x00㙾㛂\\x00\\x00\\x00\\x00\\x00㛛㜃\\x00㜉㝬\\x00\\x00\\x00㞇ɲ㙖\\x00\\x00㙛get;挖;䏄r\\xeb๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀\\ud835\\udd31Ȁeiko㚆㚝㚵㚼ǲ㚋\\x00㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮ppro\\xf8዁im\\xbbኬs\\xf0ኞĀas㚺㚮\\xf0዁rn耻\\xfe䃾Ǭ̟㛆⋧es膀\\xd7;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀\\xe1⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀\\ud835\\udd65rk;櫚\\xe1㍢rime;怴ƀaip㜏㜒㝤d\\xe5ቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own\\xbbᶻeftĀ;e⠀㜾\\xf1म;扜ightĀ;e㊪㝋\\xf1ၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀\\ud835\\udcc9;䑆cy;䑛rok;䅧Āio㞋㞎x\\xf4᝷headĀlr㞗㞠eftarro\\xf7ࡏightarrow\\xbbཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶r\\xf2ϭar;楣Ācr㟜㟢ute耻\\xfa䃺\\xf2ᅐrǣ㟪\\x00㟭y;䑞ve;䅭Āiy㟵㟺rc耻\\xfb䃻;䑃ƀabh㠃㠆㠋r\\xf2Ꭽlac;䅱a\\xf2ᏃĀir㠓㠘sht;楾;쀀\\ud835\\udd32rave耻\\xf9䃹š㠧㠱rĀlr㠬㠮\\xbbॗ\\xbbႃlk;斀Āct㠹㡍ɯ㠿\\x00\\x00㡊rnĀ;e㡅㡆挜r\\xbb㡆op;挏ri;旸Āal㡖㡚cr;䅫肻\\xa8͉Āgp㡢㡦on;䅳f;쀀\\ud835\\udd66̀adhlsuᅋ㡸㡽፲㢑㢠own\\xe1ᎳarpoonĀlr㢈㢌ef\\xf4㠭igh\\xf4㠯iƀ;hl㢙㢚㢜䏅\\xbbᏺon\\xbb㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\\x00\\x00㣁rnĀ;e㢼㢽挝r\\xbb㢽op;挎ng;䅯ri;旹cr;쀀\\ud835\\udccaƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨\\xbb᠓Āam㣯㣲r\\xf2㢨l耻\\xfc䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠r\\xf2ϷarĀ;v㤦㤧櫨;櫩as\\xe8ϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖app\\xe1␕othin\\xe7ẖƀhir㓫⻈㥙op\\xf4⾵Ā;hᎷ㥢\\xefㆍĀiu㥩㥭gm\\xe1㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟et\\xe1㚜iangleĀlr㦪㦯eft\\xbbथight\\xbbၑy;䐲ash\\xbbံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨa\\xf2ᑩr;쀀\\ud835\\udd33tr\\xe9㦮suĀbp㧯㧱\\xbbജ\\xbb൙pf;쀀\\ud835\\udd67ro\\xf0໻tr\\xe9㦴Ācu㨆㨋r;쀀\\ud835\\udccbĀbp㨐㨘nĀEe㦀㨖\\xbb㥾nĀEe㦒㨞\\xbb㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀\\ud835\\udd34pf;쀀\\ud835\\udd68Ā;eᑹ㩦at\\xe8ᑹcr;쀀\\ud835\\udcccૣណ㪇\\x00㪋\\x00㪐㪛\\x00\\x00㪝㪨㪫㪯\\x00\\x00㫃㫎\\x00㫘ៜ៟tr\\xe9៑r;쀀\\ud835\\udd35ĀAa㪔㪗r\\xf2σr\\xf2৶;䎾ĀAa㪡㪤r\\xf2θr\\xf2৫a\\xf0✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀\\ud835\\udd69im\\xe5ឲĀAa㫇㫊r\\xf2ώr\\xf2ਁĀcq㫒ីr;쀀\\ud835\\udccdĀpt៖㫜r\\xe9។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻\\xfd䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻\\xa5䂥r;쀀\\ud835\\udd36cy;䑗pf;쀀\\ud835\\udd6acr;쀀\\ud835\\udcceĀcm㬦㬩y;䑎l耻\\xff䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡tr\\xe6ᕟa;䎶r;쀀\\ud835\\udd37cy;䐶grarr;懝pf;쀀\\ud835\\udd6bcr;쀀\\ud835\\udccfĀjn㮅㮇;怍j;怌'.split(\"\").map(function(c) {\n    return c.charCodeAt(0);\n})); //# sourceMappingURL=decode-data-html.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/entities/lib/generated/decode-data-html.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/entities/lib/generated/decode-data-xml.js":
/*!****************************************************************!*\
  !*** ./node_modules/entities/lib/generated/decode-data-xml.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Generated using scripts/write-decode-map.ts\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = new Uint16Array(// prettier-ignore\n\"Ȁaglq\t\\x15\\x18\\x1bɭ\\x0f\\x00\\x00\\x12p;䀦os;䀧t;䀾t;䀼uot;䀢\".split(\"\").map(function(c) {\n    return c.charCodeAt(0);\n})); //# sourceMappingURL=decode-data-xml.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZ2VuZXJhdGVkL2RlY29kZS1kYXRhLXhtbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QztBQUM5Q0EsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGtCQUFlLEdBQUcsSUFBSUcsWUFDdEIsa0JBQWtCO0FBQ2xCLHdEQUNLQyxLQUFLLENBQUMsSUFDTkMsR0FBRyxDQUFDLFNBQVVDLENBQUM7SUFBSSxPQUFPQSxFQUFFQyxVQUFVLENBQUM7QUFBSSxLQUNoRCwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9nZW5lcmF0ZWQvZGVjb2RlLWRhdGEteG1sLmpzP2IwYTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBHZW5lcmF0ZWQgdXNpbmcgc2NyaXB0cy93cml0ZS1kZWNvZGUtbWFwLnRzXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgVWludDE2QXJyYXkoXG4vLyBwcmV0dGllci1pZ25vcmVcblwiXFx1MDIwMGFnbHFcXHRcXHgxNVxceDE4XFx4MWJcXHUwMjZkXFx4MGZcXDBcXDBcXHgxMnA7XFx1NDAyNm9zO1xcdTQwMjd0O1xcdTQwM2V0O1xcdTQwM2N1b3Q7XFx1NDAyMlwiXG4gICAgLnNwbGl0KFwiXCIpXG4gICAgLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5jaGFyQ29kZUF0KDApOyB9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUtZGF0YS14bWwuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIlVpbnQxNkFycmF5Iiwic3BsaXQiLCJtYXAiLCJjIiwiY2hhckNvZGVBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/entities/lib/generated/decode-data-xml.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/entities/lib/generated/encode-html.js":
/*!************************************************************!*\
  !*** ./node_modules/entities/lib/generated/encode-html.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Generated using scripts/write-encode-map.ts\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction restoreDiff(arr) {\n    for(var i = 1; i < arr.length; i++){\n        arr[i][0] += arr[i - 1][0] + 1;\n    }\n    return arr;\n}\n// prettier-ignore\nexports[\"default\"] = new Map(/* #__PURE__ */ restoreDiff([\n    [\n        9,\n        \"&Tab;\"\n    ],\n    [\n        0,\n        \"&NewLine;\"\n    ],\n    [\n        22,\n        \"&excl;\"\n    ],\n    [\n        0,\n        \"&quot;\"\n    ],\n    [\n        0,\n        \"&num;\"\n    ],\n    [\n        0,\n        \"&dollar;\"\n    ],\n    [\n        0,\n        \"&percnt;\"\n    ],\n    [\n        0,\n        \"&amp;\"\n    ],\n    [\n        0,\n        \"&apos;\"\n    ],\n    [\n        0,\n        \"&lpar;\"\n    ],\n    [\n        0,\n        \"&rpar;\"\n    ],\n    [\n        0,\n        \"&ast;\"\n    ],\n    [\n        0,\n        \"&plus;\"\n    ],\n    [\n        0,\n        \"&comma;\"\n    ],\n    [\n        1,\n        \"&period;\"\n    ],\n    [\n        0,\n        \"&sol;\"\n    ],\n    [\n        10,\n        \"&colon;\"\n    ],\n    [\n        0,\n        \"&semi;\"\n    ],\n    [\n        0,\n        {\n            v: \"&lt;\",\n            n: 8402,\n            o: \"&nvlt;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&equals;\",\n            n: 8421,\n            o: \"&bne;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gt;\",\n            n: 8402,\n            o: \"&nvgt;\"\n        }\n    ],\n    [\n        0,\n        \"&quest;\"\n    ],\n    [\n        0,\n        \"&commat;\"\n    ],\n    [\n        26,\n        \"&lbrack;\"\n    ],\n    [\n        0,\n        \"&bsol;\"\n    ],\n    [\n        0,\n        \"&rbrack;\"\n    ],\n    [\n        0,\n        \"&Hat;\"\n    ],\n    [\n        0,\n        \"&lowbar;\"\n    ],\n    [\n        0,\n        \"&DiacriticalGrave;\"\n    ],\n    [\n        5,\n        {\n            n: 106,\n            o: \"&fjlig;\"\n        }\n    ],\n    [\n        20,\n        \"&lbrace;\"\n    ],\n    [\n        0,\n        \"&verbar;\"\n    ],\n    [\n        0,\n        \"&rbrace;\"\n    ],\n    [\n        34,\n        \"&nbsp;\"\n    ],\n    [\n        0,\n        \"&iexcl;\"\n    ],\n    [\n        0,\n        \"&cent;\"\n    ],\n    [\n        0,\n        \"&pound;\"\n    ],\n    [\n        0,\n        \"&curren;\"\n    ],\n    [\n        0,\n        \"&yen;\"\n    ],\n    [\n        0,\n        \"&brvbar;\"\n    ],\n    [\n        0,\n        \"&sect;\"\n    ],\n    [\n        0,\n        \"&die;\"\n    ],\n    [\n        0,\n        \"&copy;\"\n    ],\n    [\n        0,\n        \"&ordf;\"\n    ],\n    [\n        0,\n        \"&laquo;\"\n    ],\n    [\n        0,\n        \"&not;\"\n    ],\n    [\n        0,\n        \"&shy;\"\n    ],\n    [\n        0,\n        \"&circledR;\"\n    ],\n    [\n        0,\n        \"&macr;\"\n    ],\n    [\n        0,\n        \"&deg;\"\n    ],\n    [\n        0,\n        \"&PlusMinus;\"\n    ],\n    [\n        0,\n        \"&sup2;\"\n    ],\n    [\n        0,\n        \"&sup3;\"\n    ],\n    [\n        0,\n        \"&acute;\"\n    ],\n    [\n        0,\n        \"&micro;\"\n    ],\n    [\n        0,\n        \"&para;\"\n    ],\n    [\n        0,\n        \"&centerdot;\"\n    ],\n    [\n        0,\n        \"&cedil;\"\n    ],\n    [\n        0,\n        \"&sup1;\"\n    ],\n    [\n        0,\n        \"&ordm;\"\n    ],\n    [\n        0,\n        \"&raquo;\"\n    ],\n    [\n        0,\n        \"&frac14;\"\n    ],\n    [\n        0,\n        \"&frac12;\"\n    ],\n    [\n        0,\n        \"&frac34;\"\n    ],\n    [\n        0,\n        \"&iquest;\"\n    ],\n    [\n        0,\n        \"&Agrave;\"\n    ],\n    [\n        0,\n        \"&Aacute;\"\n    ],\n    [\n        0,\n        \"&Acirc;\"\n    ],\n    [\n        0,\n        \"&Atilde;\"\n    ],\n    [\n        0,\n        \"&Auml;\"\n    ],\n    [\n        0,\n        \"&angst;\"\n    ],\n    [\n        0,\n        \"&AElig;\"\n    ],\n    [\n        0,\n        \"&Ccedil;\"\n    ],\n    [\n        0,\n        \"&Egrave;\"\n    ],\n    [\n        0,\n        \"&Eacute;\"\n    ],\n    [\n        0,\n        \"&Ecirc;\"\n    ],\n    [\n        0,\n        \"&Euml;\"\n    ],\n    [\n        0,\n        \"&Igrave;\"\n    ],\n    [\n        0,\n        \"&Iacute;\"\n    ],\n    [\n        0,\n        \"&Icirc;\"\n    ],\n    [\n        0,\n        \"&Iuml;\"\n    ],\n    [\n        0,\n        \"&ETH;\"\n    ],\n    [\n        0,\n        \"&Ntilde;\"\n    ],\n    [\n        0,\n        \"&Ograve;\"\n    ],\n    [\n        0,\n        \"&Oacute;\"\n    ],\n    [\n        0,\n        \"&Ocirc;\"\n    ],\n    [\n        0,\n        \"&Otilde;\"\n    ],\n    [\n        0,\n        \"&Ouml;\"\n    ],\n    [\n        0,\n        \"&times;\"\n    ],\n    [\n        0,\n        \"&Oslash;\"\n    ],\n    [\n        0,\n        \"&Ugrave;\"\n    ],\n    [\n        0,\n        \"&Uacute;\"\n    ],\n    [\n        0,\n        \"&Ucirc;\"\n    ],\n    [\n        0,\n        \"&Uuml;\"\n    ],\n    [\n        0,\n        \"&Yacute;\"\n    ],\n    [\n        0,\n        \"&THORN;\"\n    ],\n    [\n        0,\n        \"&szlig;\"\n    ],\n    [\n        0,\n        \"&agrave;\"\n    ],\n    [\n        0,\n        \"&aacute;\"\n    ],\n    [\n        0,\n        \"&acirc;\"\n    ],\n    [\n        0,\n        \"&atilde;\"\n    ],\n    [\n        0,\n        \"&auml;\"\n    ],\n    [\n        0,\n        \"&aring;\"\n    ],\n    [\n        0,\n        \"&aelig;\"\n    ],\n    [\n        0,\n        \"&ccedil;\"\n    ],\n    [\n        0,\n        \"&egrave;\"\n    ],\n    [\n        0,\n        \"&eacute;\"\n    ],\n    [\n        0,\n        \"&ecirc;\"\n    ],\n    [\n        0,\n        \"&euml;\"\n    ],\n    [\n        0,\n        \"&igrave;\"\n    ],\n    [\n        0,\n        \"&iacute;\"\n    ],\n    [\n        0,\n        \"&icirc;\"\n    ],\n    [\n        0,\n        \"&iuml;\"\n    ],\n    [\n        0,\n        \"&eth;\"\n    ],\n    [\n        0,\n        \"&ntilde;\"\n    ],\n    [\n        0,\n        \"&ograve;\"\n    ],\n    [\n        0,\n        \"&oacute;\"\n    ],\n    [\n        0,\n        \"&ocirc;\"\n    ],\n    [\n        0,\n        \"&otilde;\"\n    ],\n    [\n        0,\n        \"&ouml;\"\n    ],\n    [\n        0,\n        \"&div;\"\n    ],\n    [\n        0,\n        \"&oslash;\"\n    ],\n    [\n        0,\n        \"&ugrave;\"\n    ],\n    [\n        0,\n        \"&uacute;\"\n    ],\n    [\n        0,\n        \"&ucirc;\"\n    ],\n    [\n        0,\n        \"&uuml;\"\n    ],\n    [\n        0,\n        \"&yacute;\"\n    ],\n    [\n        0,\n        \"&thorn;\"\n    ],\n    [\n        0,\n        \"&yuml;\"\n    ],\n    [\n        0,\n        \"&Amacr;\"\n    ],\n    [\n        0,\n        \"&amacr;\"\n    ],\n    [\n        0,\n        \"&Abreve;\"\n    ],\n    [\n        0,\n        \"&abreve;\"\n    ],\n    [\n        0,\n        \"&Aogon;\"\n    ],\n    [\n        0,\n        \"&aogon;\"\n    ],\n    [\n        0,\n        \"&Cacute;\"\n    ],\n    [\n        0,\n        \"&cacute;\"\n    ],\n    [\n        0,\n        \"&Ccirc;\"\n    ],\n    [\n        0,\n        \"&ccirc;\"\n    ],\n    [\n        0,\n        \"&Cdot;\"\n    ],\n    [\n        0,\n        \"&cdot;\"\n    ],\n    [\n        0,\n        \"&Ccaron;\"\n    ],\n    [\n        0,\n        \"&ccaron;\"\n    ],\n    [\n        0,\n        \"&Dcaron;\"\n    ],\n    [\n        0,\n        \"&dcaron;\"\n    ],\n    [\n        0,\n        \"&Dstrok;\"\n    ],\n    [\n        0,\n        \"&dstrok;\"\n    ],\n    [\n        0,\n        \"&Emacr;\"\n    ],\n    [\n        0,\n        \"&emacr;\"\n    ],\n    [\n        2,\n        \"&Edot;\"\n    ],\n    [\n        0,\n        \"&edot;\"\n    ],\n    [\n        0,\n        \"&Eogon;\"\n    ],\n    [\n        0,\n        \"&eogon;\"\n    ],\n    [\n        0,\n        \"&Ecaron;\"\n    ],\n    [\n        0,\n        \"&ecaron;\"\n    ],\n    [\n        0,\n        \"&Gcirc;\"\n    ],\n    [\n        0,\n        \"&gcirc;\"\n    ],\n    [\n        0,\n        \"&Gbreve;\"\n    ],\n    [\n        0,\n        \"&gbreve;\"\n    ],\n    [\n        0,\n        \"&Gdot;\"\n    ],\n    [\n        0,\n        \"&gdot;\"\n    ],\n    [\n        0,\n        \"&Gcedil;\"\n    ],\n    [\n        1,\n        \"&Hcirc;\"\n    ],\n    [\n        0,\n        \"&hcirc;\"\n    ],\n    [\n        0,\n        \"&Hstrok;\"\n    ],\n    [\n        0,\n        \"&hstrok;\"\n    ],\n    [\n        0,\n        \"&Itilde;\"\n    ],\n    [\n        0,\n        \"&itilde;\"\n    ],\n    [\n        0,\n        \"&Imacr;\"\n    ],\n    [\n        0,\n        \"&imacr;\"\n    ],\n    [\n        2,\n        \"&Iogon;\"\n    ],\n    [\n        0,\n        \"&iogon;\"\n    ],\n    [\n        0,\n        \"&Idot;\"\n    ],\n    [\n        0,\n        \"&imath;\"\n    ],\n    [\n        0,\n        \"&IJlig;\"\n    ],\n    [\n        0,\n        \"&ijlig;\"\n    ],\n    [\n        0,\n        \"&Jcirc;\"\n    ],\n    [\n        0,\n        \"&jcirc;\"\n    ],\n    [\n        0,\n        \"&Kcedil;\"\n    ],\n    [\n        0,\n        \"&kcedil;\"\n    ],\n    [\n        0,\n        \"&kgreen;\"\n    ],\n    [\n        0,\n        \"&Lacute;\"\n    ],\n    [\n        0,\n        \"&lacute;\"\n    ],\n    [\n        0,\n        \"&Lcedil;\"\n    ],\n    [\n        0,\n        \"&lcedil;\"\n    ],\n    [\n        0,\n        \"&Lcaron;\"\n    ],\n    [\n        0,\n        \"&lcaron;\"\n    ],\n    [\n        0,\n        \"&Lmidot;\"\n    ],\n    [\n        0,\n        \"&lmidot;\"\n    ],\n    [\n        0,\n        \"&Lstrok;\"\n    ],\n    [\n        0,\n        \"&lstrok;\"\n    ],\n    [\n        0,\n        \"&Nacute;\"\n    ],\n    [\n        0,\n        \"&nacute;\"\n    ],\n    [\n        0,\n        \"&Ncedil;\"\n    ],\n    [\n        0,\n        \"&ncedil;\"\n    ],\n    [\n        0,\n        \"&Ncaron;\"\n    ],\n    [\n        0,\n        \"&ncaron;\"\n    ],\n    [\n        0,\n        \"&napos;\"\n    ],\n    [\n        0,\n        \"&ENG;\"\n    ],\n    [\n        0,\n        \"&eng;\"\n    ],\n    [\n        0,\n        \"&Omacr;\"\n    ],\n    [\n        0,\n        \"&omacr;\"\n    ],\n    [\n        2,\n        \"&Odblac;\"\n    ],\n    [\n        0,\n        \"&odblac;\"\n    ],\n    [\n        0,\n        \"&OElig;\"\n    ],\n    [\n        0,\n        \"&oelig;\"\n    ],\n    [\n        0,\n        \"&Racute;\"\n    ],\n    [\n        0,\n        \"&racute;\"\n    ],\n    [\n        0,\n        \"&Rcedil;\"\n    ],\n    [\n        0,\n        \"&rcedil;\"\n    ],\n    [\n        0,\n        \"&Rcaron;\"\n    ],\n    [\n        0,\n        \"&rcaron;\"\n    ],\n    [\n        0,\n        \"&Sacute;\"\n    ],\n    [\n        0,\n        \"&sacute;\"\n    ],\n    [\n        0,\n        \"&Scirc;\"\n    ],\n    [\n        0,\n        \"&scirc;\"\n    ],\n    [\n        0,\n        \"&Scedil;\"\n    ],\n    [\n        0,\n        \"&scedil;\"\n    ],\n    [\n        0,\n        \"&Scaron;\"\n    ],\n    [\n        0,\n        \"&scaron;\"\n    ],\n    [\n        0,\n        \"&Tcedil;\"\n    ],\n    [\n        0,\n        \"&tcedil;\"\n    ],\n    [\n        0,\n        \"&Tcaron;\"\n    ],\n    [\n        0,\n        \"&tcaron;\"\n    ],\n    [\n        0,\n        \"&Tstrok;\"\n    ],\n    [\n        0,\n        \"&tstrok;\"\n    ],\n    [\n        0,\n        \"&Utilde;\"\n    ],\n    [\n        0,\n        \"&utilde;\"\n    ],\n    [\n        0,\n        \"&Umacr;\"\n    ],\n    [\n        0,\n        \"&umacr;\"\n    ],\n    [\n        0,\n        \"&Ubreve;\"\n    ],\n    [\n        0,\n        \"&ubreve;\"\n    ],\n    [\n        0,\n        \"&Uring;\"\n    ],\n    [\n        0,\n        \"&uring;\"\n    ],\n    [\n        0,\n        \"&Udblac;\"\n    ],\n    [\n        0,\n        \"&udblac;\"\n    ],\n    [\n        0,\n        \"&Uogon;\"\n    ],\n    [\n        0,\n        \"&uogon;\"\n    ],\n    [\n        0,\n        \"&Wcirc;\"\n    ],\n    [\n        0,\n        \"&wcirc;\"\n    ],\n    [\n        0,\n        \"&Ycirc;\"\n    ],\n    [\n        0,\n        \"&ycirc;\"\n    ],\n    [\n        0,\n        \"&Yuml;\"\n    ],\n    [\n        0,\n        \"&Zacute;\"\n    ],\n    [\n        0,\n        \"&zacute;\"\n    ],\n    [\n        0,\n        \"&Zdot;\"\n    ],\n    [\n        0,\n        \"&zdot;\"\n    ],\n    [\n        0,\n        \"&Zcaron;\"\n    ],\n    [\n        0,\n        \"&zcaron;\"\n    ],\n    [\n        19,\n        \"&fnof;\"\n    ],\n    [\n        34,\n        \"&imped;\"\n    ],\n    [\n        63,\n        \"&gacute;\"\n    ],\n    [\n        65,\n        \"&jmath;\"\n    ],\n    [\n        142,\n        \"&circ;\"\n    ],\n    [\n        0,\n        \"&caron;\"\n    ],\n    [\n        16,\n        \"&breve;\"\n    ],\n    [\n        0,\n        \"&DiacriticalDot;\"\n    ],\n    [\n        0,\n        \"&ring;\"\n    ],\n    [\n        0,\n        \"&ogon;\"\n    ],\n    [\n        0,\n        \"&DiacriticalTilde;\"\n    ],\n    [\n        0,\n        \"&dblac;\"\n    ],\n    [\n        51,\n        \"&DownBreve;\"\n    ],\n    [\n        127,\n        \"&Alpha;\"\n    ],\n    [\n        0,\n        \"&Beta;\"\n    ],\n    [\n        0,\n        \"&Gamma;\"\n    ],\n    [\n        0,\n        \"&Delta;\"\n    ],\n    [\n        0,\n        \"&Epsilon;\"\n    ],\n    [\n        0,\n        \"&Zeta;\"\n    ],\n    [\n        0,\n        \"&Eta;\"\n    ],\n    [\n        0,\n        \"&Theta;\"\n    ],\n    [\n        0,\n        \"&Iota;\"\n    ],\n    [\n        0,\n        \"&Kappa;\"\n    ],\n    [\n        0,\n        \"&Lambda;\"\n    ],\n    [\n        0,\n        \"&Mu;\"\n    ],\n    [\n        0,\n        \"&Nu;\"\n    ],\n    [\n        0,\n        \"&Xi;\"\n    ],\n    [\n        0,\n        \"&Omicron;\"\n    ],\n    [\n        0,\n        \"&Pi;\"\n    ],\n    [\n        0,\n        \"&Rho;\"\n    ],\n    [\n        1,\n        \"&Sigma;\"\n    ],\n    [\n        0,\n        \"&Tau;\"\n    ],\n    [\n        0,\n        \"&Upsilon;\"\n    ],\n    [\n        0,\n        \"&Phi;\"\n    ],\n    [\n        0,\n        \"&Chi;\"\n    ],\n    [\n        0,\n        \"&Psi;\"\n    ],\n    [\n        0,\n        \"&ohm;\"\n    ],\n    [\n        7,\n        \"&alpha;\"\n    ],\n    [\n        0,\n        \"&beta;\"\n    ],\n    [\n        0,\n        \"&gamma;\"\n    ],\n    [\n        0,\n        \"&delta;\"\n    ],\n    [\n        0,\n        \"&epsi;\"\n    ],\n    [\n        0,\n        \"&zeta;\"\n    ],\n    [\n        0,\n        \"&eta;\"\n    ],\n    [\n        0,\n        \"&theta;\"\n    ],\n    [\n        0,\n        \"&iota;\"\n    ],\n    [\n        0,\n        \"&kappa;\"\n    ],\n    [\n        0,\n        \"&lambda;\"\n    ],\n    [\n        0,\n        \"&mu;\"\n    ],\n    [\n        0,\n        \"&nu;\"\n    ],\n    [\n        0,\n        \"&xi;\"\n    ],\n    [\n        0,\n        \"&omicron;\"\n    ],\n    [\n        0,\n        \"&pi;\"\n    ],\n    [\n        0,\n        \"&rho;\"\n    ],\n    [\n        0,\n        \"&sigmaf;\"\n    ],\n    [\n        0,\n        \"&sigma;\"\n    ],\n    [\n        0,\n        \"&tau;\"\n    ],\n    [\n        0,\n        \"&upsi;\"\n    ],\n    [\n        0,\n        \"&phi;\"\n    ],\n    [\n        0,\n        \"&chi;\"\n    ],\n    [\n        0,\n        \"&psi;\"\n    ],\n    [\n        0,\n        \"&omega;\"\n    ],\n    [\n        7,\n        \"&thetasym;\"\n    ],\n    [\n        0,\n        \"&Upsi;\"\n    ],\n    [\n        2,\n        \"&phiv;\"\n    ],\n    [\n        0,\n        \"&piv;\"\n    ],\n    [\n        5,\n        \"&Gammad;\"\n    ],\n    [\n        0,\n        \"&digamma;\"\n    ],\n    [\n        18,\n        \"&kappav;\"\n    ],\n    [\n        0,\n        \"&rhov;\"\n    ],\n    [\n        3,\n        \"&epsiv;\"\n    ],\n    [\n        0,\n        \"&backepsilon;\"\n    ],\n    [\n        10,\n        \"&IOcy;\"\n    ],\n    [\n        0,\n        \"&DJcy;\"\n    ],\n    [\n        0,\n        \"&GJcy;\"\n    ],\n    [\n        0,\n        \"&Jukcy;\"\n    ],\n    [\n        0,\n        \"&DScy;\"\n    ],\n    [\n        0,\n        \"&Iukcy;\"\n    ],\n    [\n        0,\n        \"&YIcy;\"\n    ],\n    [\n        0,\n        \"&Jsercy;\"\n    ],\n    [\n        0,\n        \"&LJcy;\"\n    ],\n    [\n        0,\n        \"&NJcy;\"\n    ],\n    [\n        0,\n        \"&TSHcy;\"\n    ],\n    [\n        0,\n        \"&KJcy;\"\n    ],\n    [\n        1,\n        \"&Ubrcy;\"\n    ],\n    [\n        0,\n        \"&DZcy;\"\n    ],\n    [\n        0,\n        \"&Acy;\"\n    ],\n    [\n        0,\n        \"&Bcy;\"\n    ],\n    [\n        0,\n        \"&Vcy;\"\n    ],\n    [\n        0,\n        \"&Gcy;\"\n    ],\n    [\n        0,\n        \"&Dcy;\"\n    ],\n    [\n        0,\n        \"&IEcy;\"\n    ],\n    [\n        0,\n        \"&ZHcy;\"\n    ],\n    [\n        0,\n        \"&Zcy;\"\n    ],\n    [\n        0,\n        \"&Icy;\"\n    ],\n    [\n        0,\n        \"&Jcy;\"\n    ],\n    [\n        0,\n        \"&Kcy;\"\n    ],\n    [\n        0,\n        \"&Lcy;\"\n    ],\n    [\n        0,\n        \"&Mcy;\"\n    ],\n    [\n        0,\n        \"&Ncy;\"\n    ],\n    [\n        0,\n        \"&Ocy;\"\n    ],\n    [\n        0,\n        \"&Pcy;\"\n    ],\n    [\n        0,\n        \"&Rcy;\"\n    ],\n    [\n        0,\n        \"&Scy;\"\n    ],\n    [\n        0,\n        \"&Tcy;\"\n    ],\n    [\n        0,\n        \"&Ucy;\"\n    ],\n    [\n        0,\n        \"&Fcy;\"\n    ],\n    [\n        0,\n        \"&KHcy;\"\n    ],\n    [\n        0,\n        \"&TScy;\"\n    ],\n    [\n        0,\n        \"&CHcy;\"\n    ],\n    [\n        0,\n        \"&SHcy;\"\n    ],\n    [\n        0,\n        \"&SHCHcy;\"\n    ],\n    [\n        0,\n        \"&HARDcy;\"\n    ],\n    [\n        0,\n        \"&Ycy;\"\n    ],\n    [\n        0,\n        \"&SOFTcy;\"\n    ],\n    [\n        0,\n        \"&Ecy;\"\n    ],\n    [\n        0,\n        \"&YUcy;\"\n    ],\n    [\n        0,\n        \"&YAcy;\"\n    ],\n    [\n        0,\n        \"&acy;\"\n    ],\n    [\n        0,\n        \"&bcy;\"\n    ],\n    [\n        0,\n        \"&vcy;\"\n    ],\n    [\n        0,\n        \"&gcy;\"\n    ],\n    [\n        0,\n        \"&dcy;\"\n    ],\n    [\n        0,\n        \"&iecy;\"\n    ],\n    [\n        0,\n        \"&zhcy;\"\n    ],\n    [\n        0,\n        \"&zcy;\"\n    ],\n    [\n        0,\n        \"&icy;\"\n    ],\n    [\n        0,\n        \"&jcy;\"\n    ],\n    [\n        0,\n        \"&kcy;\"\n    ],\n    [\n        0,\n        \"&lcy;\"\n    ],\n    [\n        0,\n        \"&mcy;\"\n    ],\n    [\n        0,\n        \"&ncy;\"\n    ],\n    [\n        0,\n        \"&ocy;\"\n    ],\n    [\n        0,\n        \"&pcy;\"\n    ],\n    [\n        0,\n        \"&rcy;\"\n    ],\n    [\n        0,\n        \"&scy;\"\n    ],\n    [\n        0,\n        \"&tcy;\"\n    ],\n    [\n        0,\n        \"&ucy;\"\n    ],\n    [\n        0,\n        \"&fcy;\"\n    ],\n    [\n        0,\n        \"&khcy;\"\n    ],\n    [\n        0,\n        \"&tscy;\"\n    ],\n    [\n        0,\n        \"&chcy;\"\n    ],\n    [\n        0,\n        \"&shcy;\"\n    ],\n    [\n        0,\n        \"&shchcy;\"\n    ],\n    [\n        0,\n        \"&hardcy;\"\n    ],\n    [\n        0,\n        \"&ycy;\"\n    ],\n    [\n        0,\n        \"&softcy;\"\n    ],\n    [\n        0,\n        \"&ecy;\"\n    ],\n    [\n        0,\n        \"&yucy;\"\n    ],\n    [\n        0,\n        \"&yacy;\"\n    ],\n    [\n        1,\n        \"&iocy;\"\n    ],\n    [\n        0,\n        \"&djcy;\"\n    ],\n    [\n        0,\n        \"&gjcy;\"\n    ],\n    [\n        0,\n        \"&jukcy;\"\n    ],\n    [\n        0,\n        \"&dscy;\"\n    ],\n    [\n        0,\n        \"&iukcy;\"\n    ],\n    [\n        0,\n        \"&yicy;\"\n    ],\n    [\n        0,\n        \"&jsercy;\"\n    ],\n    [\n        0,\n        \"&ljcy;\"\n    ],\n    [\n        0,\n        \"&njcy;\"\n    ],\n    [\n        0,\n        \"&tshcy;\"\n    ],\n    [\n        0,\n        \"&kjcy;\"\n    ],\n    [\n        1,\n        \"&ubrcy;\"\n    ],\n    [\n        0,\n        \"&dzcy;\"\n    ],\n    [\n        7074,\n        \"&ensp;\"\n    ],\n    [\n        0,\n        \"&emsp;\"\n    ],\n    [\n        0,\n        \"&emsp13;\"\n    ],\n    [\n        0,\n        \"&emsp14;\"\n    ],\n    [\n        1,\n        \"&numsp;\"\n    ],\n    [\n        0,\n        \"&puncsp;\"\n    ],\n    [\n        0,\n        \"&ThinSpace;\"\n    ],\n    [\n        0,\n        \"&hairsp;\"\n    ],\n    [\n        0,\n        \"&NegativeMediumSpace;\"\n    ],\n    [\n        0,\n        \"&zwnj;\"\n    ],\n    [\n        0,\n        \"&zwj;\"\n    ],\n    [\n        0,\n        \"&lrm;\"\n    ],\n    [\n        0,\n        \"&rlm;\"\n    ],\n    [\n        0,\n        \"&dash;\"\n    ],\n    [\n        2,\n        \"&ndash;\"\n    ],\n    [\n        0,\n        \"&mdash;\"\n    ],\n    [\n        0,\n        \"&horbar;\"\n    ],\n    [\n        0,\n        \"&Verbar;\"\n    ],\n    [\n        1,\n        \"&lsquo;\"\n    ],\n    [\n        0,\n        \"&CloseCurlyQuote;\"\n    ],\n    [\n        0,\n        \"&lsquor;\"\n    ],\n    [\n        1,\n        \"&ldquo;\"\n    ],\n    [\n        0,\n        \"&CloseCurlyDoubleQuote;\"\n    ],\n    [\n        0,\n        \"&bdquo;\"\n    ],\n    [\n        1,\n        \"&dagger;\"\n    ],\n    [\n        0,\n        \"&Dagger;\"\n    ],\n    [\n        0,\n        \"&bull;\"\n    ],\n    [\n        2,\n        \"&nldr;\"\n    ],\n    [\n        0,\n        \"&hellip;\"\n    ],\n    [\n        9,\n        \"&permil;\"\n    ],\n    [\n        0,\n        \"&pertenk;\"\n    ],\n    [\n        0,\n        \"&prime;\"\n    ],\n    [\n        0,\n        \"&Prime;\"\n    ],\n    [\n        0,\n        \"&tprime;\"\n    ],\n    [\n        0,\n        \"&backprime;\"\n    ],\n    [\n        3,\n        \"&lsaquo;\"\n    ],\n    [\n        0,\n        \"&rsaquo;\"\n    ],\n    [\n        3,\n        \"&oline;\"\n    ],\n    [\n        2,\n        \"&caret;\"\n    ],\n    [\n        1,\n        \"&hybull;\"\n    ],\n    [\n        0,\n        \"&frasl;\"\n    ],\n    [\n        10,\n        \"&bsemi;\"\n    ],\n    [\n        7,\n        \"&qprime;\"\n    ],\n    [\n        7,\n        {\n            v: \"&MediumSpace;\",\n            n: 8202,\n            o: \"&ThickSpace;\"\n        }\n    ],\n    [\n        0,\n        \"&NoBreak;\"\n    ],\n    [\n        0,\n        \"&af;\"\n    ],\n    [\n        0,\n        \"&InvisibleTimes;\"\n    ],\n    [\n        0,\n        \"&ic;\"\n    ],\n    [\n        72,\n        \"&euro;\"\n    ],\n    [\n        46,\n        \"&tdot;\"\n    ],\n    [\n        0,\n        \"&DotDot;\"\n    ],\n    [\n        37,\n        \"&complexes;\"\n    ],\n    [\n        2,\n        \"&incare;\"\n    ],\n    [\n        4,\n        \"&gscr;\"\n    ],\n    [\n        0,\n        \"&hamilt;\"\n    ],\n    [\n        0,\n        \"&Hfr;\"\n    ],\n    [\n        0,\n        \"&Hopf;\"\n    ],\n    [\n        0,\n        \"&planckh;\"\n    ],\n    [\n        0,\n        \"&hbar;\"\n    ],\n    [\n        0,\n        \"&imagline;\"\n    ],\n    [\n        0,\n        \"&Ifr;\"\n    ],\n    [\n        0,\n        \"&lagran;\"\n    ],\n    [\n        0,\n        \"&ell;\"\n    ],\n    [\n        1,\n        \"&naturals;\"\n    ],\n    [\n        0,\n        \"&numero;\"\n    ],\n    [\n        0,\n        \"&copysr;\"\n    ],\n    [\n        0,\n        \"&weierp;\"\n    ],\n    [\n        0,\n        \"&Popf;\"\n    ],\n    [\n        0,\n        \"&Qopf;\"\n    ],\n    [\n        0,\n        \"&realine;\"\n    ],\n    [\n        0,\n        \"&real;\"\n    ],\n    [\n        0,\n        \"&reals;\"\n    ],\n    [\n        0,\n        \"&rx;\"\n    ],\n    [\n        3,\n        \"&trade;\"\n    ],\n    [\n        1,\n        \"&integers;\"\n    ],\n    [\n        2,\n        \"&mho;\"\n    ],\n    [\n        0,\n        \"&zeetrf;\"\n    ],\n    [\n        0,\n        \"&iiota;\"\n    ],\n    [\n        2,\n        \"&bernou;\"\n    ],\n    [\n        0,\n        \"&Cayleys;\"\n    ],\n    [\n        1,\n        \"&escr;\"\n    ],\n    [\n        0,\n        \"&Escr;\"\n    ],\n    [\n        0,\n        \"&Fouriertrf;\"\n    ],\n    [\n        1,\n        \"&Mellintrf;\"\n    ],\n    [\n        0,\n        \"&order;\"\n    ],\n    [\n        0,\n        \"&alefsym;\"\n    ],\n    [\n        0,\n        \"&beth;\"\n    ],\n    [\n        0,\n        \"&gimel;\"\n    ],\n    [\n        0,\n        \"&daleth;\"\n    ],\n    [\n        12,\n        \"&CapitalDifferentialD;\"\n    ],\n    [\n        0,\n        \"&dd;\"\n    ],\n    [\n        0,\n        \"&ee;\"\n    ],\n    [\n        0,\n        \"&ii;\"\n    ],\n    [\n        10,\n        \"&frac13;\"\n    ],\n    [\n        0,\n        \"&frac23;\"\n    ],\n    [\n        0,\n        \"&frac15;\"\n    ],\n    [\n        0,\n        \"&frac25;\"\n    ],\n    [\n        0,\n        \"&frac35;\"\n    ],\n    [\n        0,\n        \"&frac45;\"\n    ],\n    [\n        0,\n        \"&frac16;\"\n    ],\n    [\n        0,\n        \"&frac56;\"\n    ],\n    [\n        0,\n        \"&frac18;\"\n    ],\n    [\n        0,\n        \"&frac38;\"\n    ],\n    [\n        0,\n        \"&frac58;\"\n    ],\n    [\n        0,\n        \"&frac78;\"\n    ],\n    [\n        49,\n        \"&larr;\"\n    ],\n    [\n        0,\n        \"&ShortUpArrow;\"\n    ],\n    [\n        0,\n        \"&rarr;\"\n    ],\n    [\n        0,\n        \"&darr;\"\n    ],\n    [\n        0,\n        \"&harr;\"\n    ],\n    [\n        0,\n        \"&updownarrow;\"\n    ],\n    [\n        0,\n        \"&nwarr;\"\n    ],\n    [\n        0,\n        \"&nearr;\"\n    ],\n    [\n        0,\n        \"&LowerRightArrow;\"\n    ],\n    [\n        0,\n        \"&LowerLeftArrow;\"\n    ],\n    [\n        0,\n        \"&nlarr;\"\n    ],\n    [\n        0,\n        \"&nrarr;\"\n    ],\n    [\n        1,\n        {\n            v: \"&rarrw;\",\n            n: 824,\n            o: \"&nrarrw;\"\n        }\n    ],\n    [\n        0,\n        \"&Larr;\"\n    ],\n    [\n        0,\n        \"&Uarr;\"\n    ],\n    [\n        0,\n        \"&Rarr;\"\n    ],\n    [\n        0,\n        \"&Darr;\"\n    ],\n    [\n        0,\n        \"&larrtl;\"\n    ],\n    [\n        0,\n        \"&rarrtl;\"\n    ],\n    [\n        0,\n        \"&LeftTeeArrow;\"\n    ],\n    [\n        0,\n        \"&mapstoup;\"\n    ],\n    [\n        0,\n        \"&map;\"\n    ],\n    [\n        0,\n        \"&DownTeeArrow;\"\n    ],\n    [\n        1,\n        \"&hookleftarrow;\"\n    ],\n    [\n        0,\n        \"&hookrightarrow;\"\n    ],\n    [\n        0,\n        \"&larrlp;\"\n    ],\n    [\n        0,\n        \"&looparrowright;\"\n    ],\n    [\n        0,\n        \"&harrw;\"\n    ],\n    [\n        0,\n        \"&nharr;\"\n    ],\n    [\n        1,\n        \"&lsh;\"\n    ],\n    [\n        0,\n        \"&rsh;\"\n    ],\n    [\n        0,\n        \"&ldsh;\"\n    ],\n    [\n        0,\n        \"&rdsh;\"\n    ],\n    [\n        1,\n        \"&crarr;\"\n    ],\n    [\n        0,\n        \"&cularr;\"\n    ],\n    [\n        0,\n        \"&curarr;\"\n    ],\n    [\n        2,\n        \"&circlearrowleft;\"\n    ],\n    [\n        0,\n        \"&circlearrowright;\"\n    ],\n    [\n        0,\n        \"&leftharpoonup;\"\n    ],\n    [\n        0,\n        \"&DownLeftVector;\"\n    ],\n    [\n        0,\n        \"&RightUpVector;\"\n    ],\n    [\n        0,\n        \"&LeftUpVector;\"\n    ],\n    [\n        0,\n        \"&rharu;\"\n    ],\n    [\n        0,\n        \"&DownRightVector;\"\n    ],\n    [\n        0,\n        \"&dharr;\"\n    ],\n    [\n        0,\n        \"&dharl;\"\n    ],\n    [\n        0,\n        \"&RightArrowLeftArrow;\"\n    ],\n    [\n        0,\n        \"&udarr;\"\n    ],\n    [\n        0,\n        \"&LeftArrowRightArrow;\"\n    ],\n    [\n        0,\n        \"&leftleftarrows;\"\n    ],\n    [\n        0,\n        \"&upuparrows;\"\n    ],\n    [\n        0,\n        \"&rightrightarrows;\"\n    ],\n    [\n        0,\n        \"&ddarr;\"\n    ],\n    [\n        0,\n        \"&leftrightharpoons;\"\n    ],\n    [\n        0,\n        \"&Equilibrium;\"\n    ],\n    [\n        0,\n        \"&nlArr;\"\n    ],\n    [\n        0,\n        \"&nhArr;\"\n    ],\n    [\n        0,\n        \"&nrArr;\"\n    ],\n    [\n        0,\n        \"&DoubleLeftArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleUpArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleRightArrow;\"\n    ],\n    [\n        0,\n        \"&dArr;\"\n    ],\n    [\n        0,\n        \"&DoubleLeftRightArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleUpDownArrow;\"\n    ],\n    [\n        0,\n        \"&nwArr;\"\n    ],\n    [\n        0,\n        \"&neArr;\"\n    ],\n    [\n        0,\n        \"&seArr;\"\n    ],\n    [\n        0,\n        \"&swArr;\"\n    ],\n    [\n        0,\n        \"&lAarr;\"\n    ],\n    [\n        0,\n        \"&rAarr;\"\n    ],\n    [\n        1,\n        \"&zigrarr;\"\n    ],\n    [\n        6,\n        \"&larrb;\"\n    ],\n    [\n        0,\n        \"&rarrb;\"\n    ],\n    [\n        15,\n        \"&DownArrowUpArrow;\"\n    ],\n    [\n        7,\n        \"&loarr;\"\n    ],\n    [\n        0,\n        \"&roarr;\"\n    ],\n    [\n        0,\n        \"&hoarr;\"\n    ],\n    [\n        0,\n        \"&forall;\"\n    ],\n    [\n        0,\n        \"&comp;\"\n    ],\n    [\n        0,\n        {\n            v: \"&part;\",\n            n: 824,\n            o: \"&npart;\"\n        }\n    ],\n    [\n        0,\n        \"&exist;\"\n    ],\n    [\n        0,\n        \"&nexist;\"\n    ],\n    [\n        0,\n        \"&empty;\"\n    ],\n    [\n        1,\n        \"&Del;\"\n    ],\n    [\n        0,\n        \"&Element;\"\n    ],\n    [\n        0,\n        \"&NotElement;\"\n    ],\n    [\n        1,\n        \"&ni;\"\n    ],\n    [\n        0,\n        \"&notni;\"\n    ],\n    [\n        2,\n        \"&prod;\"\n    ],\n    [\n        0,\n        \"&coprod;\"\n    ],\n    [\n        0,\n        \"&sum;\"\n    ],\n    [\n        0,\n        \"&minus;\"\n    ],\n    [\n        0,\n        \"&MinusPlus;\"\n    ],\n    [\n        0,\n        \"&dotplus;\"\n    ],\n    [\n        1,\n        \"&Backslash;\"\n    ],\n    [\n        0,\n        \"&lowast;\"\n    ],\n    [\n        0,\n        \"&compfn;\"\n    ],\n    [\n        1,\n        \"&radic;\"\n    ],\n    [\n        2,\n        \"&prop;\"\n    ],\n    [\n        0,\n        \"&infin;\"\n    ],\n    [\n        0,\n        \"&angrt;\"\n    ],\n    [\n        0,\n        {\n            v: \"&ang;\",\n            n: 8402,\n            o: \"&nang;\"\n        }\n    ],\n    [\n        0,\n        \"&angmsd;\"\n    ],\n    [\n        0,\n        \"&angsph;\"\n    ],\n    [\n        0,\n        \"&mid;\"\n    ],\n    [\n        0,\n        \"&nmid;\"\n    ],\n    [\n        0,\n        \"&DoubleVerticalBar;\"\n    ],\n    [\n        0,\n        \"&NotDoubleVerticalBar;\"\n    ],\n    [\n        0,\n        \"&and;\"\n    ],\n    [\n        0,\n        \"&or;\"\n    ],\n    [\n        0,\n        {\n            v: \"&cap;\",\n            n: 65024,\n            o: \"&caps;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&cup;\",\n            n: 65024,\n            o: \"&cups;\"\n        }\n    ],\n    [\n        0,\n        \"&int;\"\n    ],\n    [\n        0,\n        \"&Int;\"\n    ],\n    [\n        0,\n        \"&iiint;\"\n    ],\n    [\n        0,\n        \"&conint;\"\n    ],\n    [\n        0,\n        \"&Conint;\"\n    ],\n    [\n        0,\n        \"&Cconint;\"\n    ],\n    [\n        0,\n        \"&cwint;\"\n    ],\n    [\n        0,\n        \"&ClockwiseContourIntegral;\"\n    ],\n    [\n        0,\n        \"&awconint;\"\n    ],\n    [\n        0,\n        \"&there4;\"\n    ],\n    [\n        0,\n        \"&becaus;\"\n    ],\n    [\n        0,\n        \"&ratio;\"\n    ],\n    [\n        0,\n        \"&Colon;\"\n    ],\n    [\n        0,\n        \"&dotminus;\"\n    ],\n    [\n        1,\n        \"&mDDot;\"\n    ],\n    [\n        0,\n        \"&homtht;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sim;\",\n            n: 8402,\n            o: \"&nvsim;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&backsim;\",\n            n: 817,\n            o: \"&race;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&ac;\",\n            n: 819,\n            o: \"&acE;\"\n        }\n    ],\n    [\n        0,\n        \"&acd;\"\n    ],\n    [\n        0,\n        \"&VerticalTilde;\"\n    ],\n    [\n        0,\n        \"&NotTilde;\"\n    ],\n    [\n        0,\n        {\n            v: \"&eqsim;\",\n            n: 824,\n            o: \"&nesim;\"\n        }\n    ],\n    [\n        0,\n        \"&sime;\"\n    ],\n    [\n        0,\n        \"&NotTildeEqual;\"\n    ],\n    [\n        0,\n        \"&cong;\"\n    ],\n    [\n        0,\n        \"&simne;\"\n    ],\n    [\n        0,\n        \"&ncong;\"\n    ],\n    [\n        0,\n        \"&ap;\"\n    ],\n    [\n        0,\n        \"&nap;\"\n    ],\n    [\n        0,\n        \"&ape;\"\n    ],\n    [\n        0,\n        {\n            v: \"&apid;\",\n            n: 824,\n            o: \"&napid;\"\n        }\n    ],\n    [\n        0,\n        \"&backcong;\"\n    ],\n    [\n        0,\n        {\n            v: \"&asympeq;\",\n            n: 8402,\n            o: \"&nvap;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&bump;\",\n            n: 824,\n            o: \"&nbump;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&bumpe;\",\n            n: 824,\n            o: \"&nbumpe;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&doteq;\",\n            n: 824,\n            o: \"&nedot;\"\n        }\n    ],\n    [\n        0,\n        \"&doteqdot;\"\n    ],\n    [\n        0,\n        \"&efDot;\"\n    ],\n    [\n        0,\n        \"&erDot;\"\n    ],\n    [\n        0,\n        \"&Assign;\"\n    ],\n    [\n        0,\n        \"&ecolon;\"\n    ],\n    [\n        0,\n        \"&ecir;\"\n    ],\n    [\n        0,\n        \"&circeq;\"\n    ],\n    [\n        1,\n        \"&wedgeq;\"\n    ],\n    [\n        0,\n        \"&veeeq;\"\n    ],\n    [\n        1,\n        \"&triangleq;\"\n    ],\n    [\n        2,\n        \"&equest;\"\n    ],\n    [\n        0,\n        \"&ne;\"\n    ],\n    [\n        0,\n        {\n            v: \"&Congruent;\",\n            n: 8421,\n            o: \"&bnequiv;\"\n        }\n    ],\n    [\n        0,\n        \"&nequiv;\"\n    ],\n    [\n        1,\n        {\n            v: \"&le;\",\n            n: 8402,\n            o: \"&nvle;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&ge;\",\n            n: 8402,\n            o: \"&nvge;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&lE;\",\n            n: 824,\n            o: \"&nlE;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gE;\",\n            n: 824,\n            o: \"&ngE;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&lnE;\",\n            n: 65024,\n            o: \"&lvertneqq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gnE;\",\n            n: 65024,\n            o: \"&gvertneqq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&ll;\",\n            n: new Map(/* #__PURE__ */ restoreDiff([\n                [\n                    824,\n                    \"&nLtv;\"\n                ],\n                [\n                    7577,\n                    \"&nLt;\"\n                ]\n            ]))\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gg;\",\n            n: new Map(/* #__PURE__ */ restoreDiff([\n                [\n                    824,\n                    \"&nGtv;\"\n                ],\n                [\n                    7577,\n                    \"&nGt;\"\n                ]\n            ]))\n        }\n    ],\n    [\n        0,\n        \"&between;\"\n    ],\n    [\n        0,\n        \"&NotCupCap;\"\n    ],\n    [\n        0,\n        \"&nless;\"\n    ],\n    [\n        0,\n        \"&ngt;\"\n    ],\n    [\n        0,\n        \"&nle;\"\n    ],\n    [\n        0,\n        \"&nge;\"\n    ],\n    [\n        0,\n        \"&lesssim;\"\n    ],\n    [\n        0,\n        \"&GreaterTilde;\"\n    ],\n    [\n        0,\n        \"&nlsim;\"\n    ],\n    [\n        0,\n        \"&ngsim;\"\n    ],\n    [\n        0,\n        \"&LessGreater;\"\n    ],\n    [\n        0,\n        \"&gl;\"\n    ],\n    [\n        0,\n        \"&NotLessGreater;\"\n    ],\n    [\n        0,\n        \"&NotGreaterLess;\"\n    ],\n    [\n        0,\n        \"&pr;\"\n    ],\n    [\n        0,\n        \"&sc;\"\n    ],\n    [\n        0,\n        \"&prcue;\"\n    ],\n    [\n        0,\n        \"&sccue;\"\n    ],\n    [\n        0,\n        \"&PrecedesTilde;\"\n    ],\n    [\n        0,\n        {\n            v: \"&scsim;\",\n            n: 824,\n            o: \"&NotSucceedsTilde;\"\n        }\n    ],\n    [\n        0,\n        \"&NotPrecedes;\"\n    ],\n    [\n        0,\n        \"&NotSucceeds;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sub;\",\n            n: 8402,\n            o: \"&NotSubset;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sup;\",\n            n: 8402,\n            o: \"&NotSuperset;\"\n        }\n    ],\n    [\n        0,\n        \"&nsub;\"\n    ],\n    [\n        0,\n        \"&nsup;\"\n    ],\n    [\n        0,\n        \"&sube;\"\n    ],\n    [\n        0,\n        \"&supe;\"\n    ],\n    [\n        0,\n        \"&NotSubsetEqual;\"\n    ],\n    [\n        0,\n        \"&NotSupersetEqual;\"\n    ],\n    [\n        0,\n        {\n            v: \"&subne;\",\n            n: 65024,\n            o: \"&varsubsetneq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&supne;\",\n            n: 65024,\n            o: \"&varsupsetneq;\"\n        }\n    ],\n    [\n        1,\n        \"&cupdot;\"\n    ],\n    [\n        0,\n        \"&UnionPlus;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sqsub;\",\n            n: 824,\n            o: \"&NotSquareSubset;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sqsup;\",\n            n: 824,\n            o: \"&NotSquareSuperset;\"\n        }\n    ],\n    [\n        0,\n        \"&sqsube;\"\n    ],\n    [\n        0,\n        \"&sqsupe;\"\n    ],\n    [\n        0,\n        {\n            v: \"&sqcap;\",\n            n: 65024,\n            o: \"&sqcaps;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sqcup;\",\n            n: 65024,\n            o: \"&sqcups;\"\n        }\n    ],\n    [\n        0,\n        \"&CirclePlus;\"\n    ],\n    [\n        0,\n        \"&CircleMinus;\"\n    ],\n    [\n        0,\n        \"&CircleTimes;\"\n    ],\n    [\n        0,\n        \"&osol;\"\n    ],\n    [\n        0,\n        \"&CircleDot;\"\n    ],\n    [\n        0,\n        \"&circledcirc;\"\n    ],\n    [\n        0,\n        \"&circledast;\"\n    ],\n    [\n        1,\n        \"&circleddash;\"\n    ],\n    [\n        0,\n        \"&boxplus;\"\n    ],\n    [\n        0,\n        \"&boxminus;\"\n    ],\n    [\n        0,\n        \"&boxtimes;\"\n    ],\n    [\n        0,\n        \"&dotsquare;\"\n    ],\n    [\n        0,\n        \"&RightTee;\"\n    ],\n    [\n        0,\n        \"&dashv;\"\n    ],\n    [\n        0,\n        \"&DownTee;\"\n    ],\n    [\n        0,\n        \"&bot;\"\n    ],\n    [\n        1,\n        \"&models;\"\n    ],\n    [\n        0,\n        \"&DoubleRightTee;\"\n    ],\n    [\n        0,\n        \"&Vdash;\"\n    ],\n    [\n        0,\n        \"&Vvdash;\"\n    ],\n    [\n        0,\n        \"&VDash;\"\n    ],\n    [\n        0,\n        \"&nvdash;\"\n    ],\n    [\n        0,\n        \"&nvDash;\"\n    ],\n    [\n        0,\n        \"&nVdash;\"\n    ],\n    [\n        0,\n        \"&nVDash;\"\n    ],\n    [\n        0,\n        \"&prurel;\"\n    ],\n    [\n        1,\n        \"&LeftTriangle;\"\n    ],\n    [\n        0,\n        \"&RightTriangle;\"\n    ],\n    [\n        0,\n        {\n            v: \"&LeftTriangleEqual;\",\n            n: 8402,\n            o: \"&nvltrie;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&RightTriangleEqual;\",\n            n: 8402,\n            o: \"&nvrtrie;\"\n        }\n    ],\n    [\n        0,\n        \"&origof;\"\n    ],\n    [\n        0,\n        \"&imof;\"\n    ],\n    [\n        0,\n        \"&multimap;\"\n    ],\n    [\n        0,\n        \"&hercon;\"\n    ],\n    [\n        0,\n        \"&intcal;\"\n    ],\n    [\n        0,\n        \"&veebar;\"\n    ],\n    [\n        1,\n        \"&barvee;\"\n    ],\n    [\n        0,\n        \"&angrtvb;\"\n    ],\n    [\n        0,\n        \"&lrtri;\"\n    ],\n    [\n        0,\n        \"&bigwedge;\"\n    ],\n    [\n        0,\n        \"&bigvee;\"\n    ],\n    [\n        0,\n        \"&bigcap;\"\n    ],\n    [\n        0,\n        \"&bigcup;\"\n    ],\n    [\n        0,\n        \"&diam;\"\n    ],\n    [\n        0,\n        \"&sdot;\"\n    ],\n    [\n        0,\n        \"&sstarf;\"\n    ],\n    [\n        0,\n        \"&divideontimes;\"\n    ],\n    [\n        0,\n        \"&bowtie;\"\n    ],\n    [\n        0,\n        \"&ltimes;\"\n    ],\n    [\n        0,\n        \"&rtimes;\"\n    ],\n    [\n        0,\n        \"&leftthreetimes;\"\n    ],\n    [\n        0,\n        \"&rightthreetimes;\"\n    ],\n    [\n        0,\n        \"&backsimeq;\"\n    ],\n    [\n        0,\n        \"&curlyvee;\"\n    ],\n    [\n        0,\n        \"&curlywedge;\"\n    ],\n    [\n        0,\n        \"&Sub;\"\n    ],\n    [\n        0,\n        \"&Sup;\"\n    ],\n    [\n        0,\n        \"&Cap;\"\n    ],\n    [\n        0,\n        \"&Cup;\"\n    ],\n    [\n        0,\n        \"&fork;\"\n    ],\n    [\n        0,\n        \"&epar;\"\n    ],\n    [\n        0,\n        \"&lessdot;\"\n    ],\n    [\n        0,\n        \"&gtdot;\"\n    ],\n    [\n        0,\n        {\n            v: \"&Ll;\",\n            n: 824,\n            o: \"&nLl;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&Gg;\",\n            n: 824,\n            o: \"&nGg;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&leg;\",\n            n: 65024,\n            o: \"&lesg;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&gel;\",\n            n: 65024,\n            o: \"&gesl;\"\n        }\n    ],\n    [\n        2,\n        \"&cuepr;\"\n    ],\n    [\n        0,\n        \"&cuesc;\"\n    ],\n    [\n        0,\n        \"&NotPrecedesSlantEqual;\"\n    ],\n    [\n        0,\n        \"&NotSucceedsSlantEqual;\"\n    ],\n    [\n        0,\n        \"&NotSquareSubsetEqual;\"\n    ],\n    [\n        0,\n        \"&NotSquareSupersetEqual;\"\n    ],\n    [\n        2,\n        \"&lnsim;\"\n    ],\n    [\n        0,\n        \"&gnsim;\"\n    ],\n    [\n        0,\n        \"&precnsim;\"\n    ],\n    [\n        0,\n        \"&scnsim;\"\n    ],\n    [\n        0,\n        \"&nltri;\"\n    ],\n    [\n        0,\n        \"&NotRightTriangle;\"\n    ],\n    [\n        0,\n        \"&nltrie;\"\n    ],\n    [\n        0,\n        \"&NotRightTriangleEqual;\"\n    ],\n    [\n        0,\n        \"&vellip;\"\n    ],\n    [\n        0,\n        \"&ctdot;\"\n    ],\n    [\n        0,\n        \"&utdot;\"\n    ],\n    [\n        0,\n        \"&dtdot;\"\n    ],\n    [\n        0,\n        \"&disin;\"\n    ],\n    [\n        0,\n        \"&isinsv;\"\n    ],\n    [\n        0,\n        \"&isins;\"\n    ],\n    [\n        0,\n        {\n            v: \"&isindot;\",\n            n: 824,\n            o: \"&notindot;\"\n        }\n    ],\n    [\n        0,\n        \"&notinvc;\"\n    ],\n    [\n        0,\n        \"&notinvb;\"\n    ],\n    [\n        1,\n        {\n            v: \"&isinE;\",\n            n: 824,\n            o: \"&notinE;\"\n        }\n    ],\n    [\n        0,\n        \"&nisd;\"\n    ],\n    [\n        0,\n        \"&xnis;\"\n    ],\n    [\n        0,\n        \"&nis;\"\n    ],\n    [\n        0,\n        \"&notnivc;\"\n    ],\n    [\n        0,\n        \"&notnivb;\"\n    ],\n    [\n        6,\n        \"&barwed;\"\n    ],\n    [\n        0,\n        \"&Barwed;\"\n    ],\n    [\n        1,\n        \"&lceil;\"\n    ],\n    [\n        0,\n        \"&rceil;\"\n    ],\n    [\n        0,\n        \"&LeftFloor;\"\n    ],\n    [\n        0,\n        \"&rfloor;\"\n    ],\n    [\n        0,\n        \"&drcrop;\"\n    ],\n    [\n        0,\n        \"&dlcrop;\"\n    ],\n    [\n        0,\n        \"&urcrop;\"\n    ],\n    [\n        0,\n        \"&ulcrop;\"\n    ],\n    [\n        0,\n        \"&bnot;\"\n    ],\n    [\n        1,\n        \"&profline;\"\n    ],\n    [\n        0,\n        \"&profsurf;\"\n    ],\n    [\n        1,\n        \"&telrec;\"\n    ],\n    [\n        0,\n        \"&target;\"\n    ],\n    [\n        5,\n        \"&ulcorn;\"\n    ],\n    [\n        0,\n        \"&urcorn;\"\n    ],\n    [\n        0,\n        \"&dlcorn;\"\n    ],\n    [\n        0,\n        \"&drcorn;\"\n    ],\n    [\n        2,\n        \"&frown;\"\n    ],\n    [\n        0,\n        \"&smile;\"\n    ],\n    [\n        9,\n        \"&cylcty;\"\n    ],\n    [\n        0,\n        \"&profalar;\"\n    ],\n    [\n        7,\n        \"&topbot;\"\n    ],\n    [\n        6,\n        \"&ovbar;\"\n    ],\n    [\n        1,\n        \"&solbar;\"\n    ],\n    [\n        60,\n        \"&angzarr;\"\n    ],\n    [\n        51,\n        \"&lmoustache;\"\n    ],\n    [\n        0,\n        \"&rmoustache;\"\n    ],\n    [\n        2,\n        \"&OverBracket;\"\n    ],\n    [\n        0,\n        \"&bbrk;\"\n    ],\n    [\n        0,\n        \"&bbrktbrk;\"\n    ],\n    [\n        37,\n        \"&OverParenthesis;\"\n    ],\n    [\n        0,\n        \"&UnderParenthesis;\"\n    ],\n    [\n        0,\n        \"&OverBrace;\"\n    ],\n    [\n        0,\n        \"&UnderBrace;\"\n    ],\n    [\n        2,\n        \"&trpezium;\"\n    ],\n    [\n        4,\n        \"&elinters;\"\n    ],\n    [\n        59,\n        \"&blank;\"\n    ],\n    [\n        164,\n        \"&circledS;\"\n    ],\n    [\n        55,\n        \"&boxh;\"\n    ],\n    [\n        1,\n        \"&boxv;\"\n    ],\n    [\n        9,\n        \"&boxdr;\"\n    ],\n    [\n        3,\n        \"&boxdl;\"\n    ],\n    [\n        3,\n        \"&boxur;\"\n    ],\n    [\n        3,\n        \"&boxul;\"\n    ],\n    [\n        3,\n        \"&boxvr;\"\n    ],\n    [\n        7,\n        \"&boxvl;\"\n    ],\n    [\n        7,\n        \"&boxhd;\"\n    ],\n    [\n        7,\n        \"&boxhu;\"\n    ],\n    [\n        7,\n        \"&boxvh;\"\n    ],\n    [\n        19,\n        \"&boxH;\"\n    ],\n    [\n        0,\n        \"&boxV;\"\n    ],\n    [\n        0,\n        \"&boxdR;\"\n    ],\n    [\n        0,\n        \"&boxDr;\"\n    ],\n    [\n        0,\n        \"&boxDR;\"\n    ],\n    [\n        0,\n        \"&boxdL;\"\n    ],\n    [\n        0,\n        \"&boxDl;\"\n    ],\n    [\n        0,\n        \"&boxDL;\"\n    ],\n    [\n        0,\n        \"&boxuR;\"\n    ],\n    [\n        0,\n        \"&boxUr;\"\n    ],\n    [\n        0,\n        \"&boxUR;\"\n    ],\n    [\n        0,\n        \"&boxuL;\"\n    ],\n    [\n        0,\n        \"&boxUl;\"\n    ],\n    [\n        0,\n        \"&boxUL;\"\n    ],\n    [\n        0,\n        \"&boxvR;\"\n    ],\n    [\n        0,\n        \"&boxVr;\"\n    ],\n    [\n        0,\n        \"&boxVR;\"\n    ],\n    [\n        0,\n        \"&boxvL;\"\n    ],\n    [\n        0,\n        \"&boxVl;\"\n    ],\n    [\n        0,\n        \"&boxVL;\"\n    ],\n    [\n        0,\n        \"&boxHd;\"\n    ],\n    [\n        0,\n        \"&boxhD;\"\n    ],\n    [\n        0,\n        \"&boxHD;\"\n    ],\n    [\n        0,\n        \"&boxHu;\"\n    ],\n    [\n        0,\n        \"&boxhU;\"\n    ],\n    [\n        0,\n        \"&boxHU;\"\n    ],\n    [\n        0,\n        \"&boxvH;\"\n    ],\n    [\n        0,\n        \"&boxVh;\"\n    ],\n    [\n        0,\n        \"&boxVH;\"\n    ],\n    [\n        19,\n        \"&uhblk;\"\n    ],\n    [\n        3,\n        \"&lhblk;\"\n    ],\n    [\n        3,\n        \"&block;\"\n    ],\n    [\n        8,\n        \"&blk14;\"\n    ],\n    [\n        0,\n        \"&blk12;\"\n    ],\n    [\n        0,\n        \"&blk34;\"\n    ],\n    [\n        13,\n        \"&square;\"\n    ],\n    [\n        8,\n        \"&blacksquare;\"\n    ],\n    [\n        0,\n        \"&EmptyVerySmallSquare;\"\n    ],\n    [\n        1,\n        \"&rect;\"\n    ],\n    [\n        0,\n        \"&marker;\"\n    ],\n    [\n        2,\n        \"&fltns;\"\n    ],\n    [\n        1,\n        \"&bigtriangleup;\"\n    ],\n    [\n        0,\n        \"&blacktriangle;\"\n    ],\n    [\n        0,\n        \"&triangle;\"\n    ],\n    [\n        2,\n        \"&blacktriangleright;\"\n    ],\n    [\n        0,\n        \"&rtri;\"\n    ],\n    [\n        3,\n        \"&bigtriangledown;\"\n    ],\n    [\n        0,\n        \"&blacktriangledown;\"\n    ],\n    [\n        0,\n        \"&dtri;\"\n    ],\n    [\n        2,\n        \"&blacktriangleleft;\"\n    ],\n    [\n        0,\n        \"&ltri;\"\n    ],\n    [\n        6,\n        \"&loz;\"\n    ],\n    [\n        0,\n        \"&cir;\"\n    ],\n    [\n        32,\n        \"&tridot;\"\n    ],\n    [\n        2,\n        \"&bigcirc;\"\n    ],\n    [\n        8,\n        \"&ultri;\"\n    ],\n    [\n        0,\n        \"&urtri;\"\n    ],\n    [\n        0,\n        \"&lltri;\"\n    ],\n    [\n        0,\n        \"&EmptySmallSquare;\"\n    ],\n    [\n        0,\n        \"&FilledSmallSquare;\"\n    ],\n    [\n        8,\n        \"&bigstar;\"\n    ],\n    [\n        0,\n        \"&star;\"\n    ],\n    [\n        7,\n        \"&phone;\"\n    ],\n    [\n        49,\n        \"&female;\"\n    ],\n    [\n        1,\n        \"&male;\"\n    ],\n    [\n        29,\n        \"&spades;\"\n    ],\n    [\n        2,\n        \"&clubs;\"\n    ],\n    [\n        1,\n        \"&hearts;\"\n    ],\n    [\n        0,\n        \"&diamondsuit;\"\n    ],\n    [\n        3,\n        \"&sung;\"\n    ],\n    [\n        2,\n        \"&flat;\"\n    ],\n    [\n        0,\n        \"&natural;\"\n    ],\n    [\n        0,\n        \"&sharp;\"\n    ],\n    [\n        163,\n        \"&check;\"\n    ],\n    [\n        3,\n        \"&cross;\"\n    ],\n    [\n        8,\n        \"&malt;\"\n    ],\n    [\n        21,\n        \"&sext;\"\n    ],\n    [\n        33,\n        \"&VerticalSeparator;\"\n    ],\n    [\n        25,\n        \"&lbbrk;\"\n    ],\n    [\n        0,\n        \"&rbbrk;\"\n    ],\n    [\n        84,\n        \"&bsolhsub;\"\n    ],\n    [\n        0,\n        \"&suphsol;\"\n    ],\n    [\n        28,\n        \"&LeftDoubleBracket;\"\n    ],\n    [\n        0,\n        \"&RightDoubleBracket;\"\n    ],\n    [\n        0,\n        \"&lang;\"\n    ],\n    [\n        0,\n        \"&rang;\"\n    ],\n    [\n        0,\n        \"&Lang;\"\n    ],\n    [\n        0,\n        \"&Rang;\"\n    ],\n    [\n        0,\n        \"&loang;\"\n    ],\n    [\n        0,\n        \"&roang;\"\n    ],\n    [\n        7,\n        \"&longleftarrow;\"\n    ],\n    [\n        0,\n        \"&longrightarrow;\"\n    ],\n    [\n        0,\n        \"&longleftrightarrow;\"\n    ],\n    [\n        0,\n        \"&DoubleLongLeftArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleLongRightArrow;\"\n    ],\n    [\n        0,\n        \"&DoubleLongLeftRightArrow;\"\n    ],\n    [\n        1,\n        \"&longmapsto;\"\n    ],\n    [\n        2,\n        \"&dzigrarr;\"\n    ],\n    [\n        258,\n        \"&nvlArr;\"\n    ],\n    [\n        0,\n        \"&nvrArr;\"\n    ],\n    [\n        0,\n        \"&nvHarr;\"\n    ],\n    [\n        0,\n        \"&Map;\"\n    ],\n    [\n        6,\n        \"&lbarr;\"\n    ],\n    [\n        0,\n        \"&bkarow;\"\n    ],\n    [\n        0,\n        \"&lBarr;\"\n    ],\n    [\n        0,\n        \"&dbkarow;\"\n    ],\n    [\n        0,\n        \"&drbkarow;\"\n    ],\n    [\n        0,\n        \"&DDotrahd;\"\n    ],\n    [\n        0,\n        \"&UpArrowBar;\"\n    ],\n    [\n        0,\n        \"&DownArrowBar;\"\n    ],\n    [\n        2,\n        \"&Rarrtl;\"\n    ],\n    [\n        2,\n        \"&latail;\"\n    ],\n    [\n        0,\n        \"&ratail;\"\n    ],\n    [\n        0,\n        \"&lAtail;\"\n    ],\n    [\n        0,\n        \"&rAtail;\"\n    ],\n    [\n        0,\n        \"&larrfs;\"\n    ],\n    [\n        0,\n        \"&rarrfs;\"\n    ],\n    [\n        0,\n        \"&larrbfs;\"\n    ],\n    [\n        0,\n        \"&rarrbfs;\"\n    ],\n    [\n        2,\n        \"&nwarhk;\"\n    ],\n    [\n        0,\n        \"&nearhk;\"\n    ],\n    [\n        0,\n        \"&hksearow;\"\n    ],\n    [\n        0,\n        \"&hkswarow;\"\n    ],\n    [\n        0,\n        \"&nwnear;\"\n    ],\n    [\n        0,\n        \"&nesear;\"\n    ],\n    [\n        0,\n        \"&seswar;\"\n    ],\n    [\n        0,\n        \"&swnwar;\"\n    ],\n    [\n        8,\n        {\n            v: \"&rarrc;\",\n            n: 824,\n            o: \"&nrarrc;\"\n        }\n    ],\n    [\n        1,\n        \"&cudarrr;\"\n    ],\n    [\n        0,\n        \"&ldca;\"\n    ],\n    [\n        0,\n        \"&rdca;\"\n    ],\n    [\n        0,\n        \"&cudarrl;\"\n    ],\n    [\n        0,\n        \"&larrpl;\"\n    ],\n    [\n        2,\n        \"&curarrm;\"\n    ],\n    [\n        0,\n        \"&cularrp;\"\n    ],\n    [\n        7,\n        \"&rarrpl;\"\n    ],\n    [\n        2,\n        \"&harrcir;\"\n    ],\n    [\n        0,\n        \"&Uarrocir;\"\n    ],\n    [\n        0,\n        \"&lurdshar;\"\n    ],\n    [\n        0,\n        \"&ldrushar;\"\n    ],\n    [\n        2,\n        \"&LeftRightVector;\"\n    ],\n    [\n        0,\n        \"&RightUpDownVector;\"\n    ],\n    [\n        0,\n        \"&DownLeftRightVector;\"\n    ],\n    [\n        0,\n        \"&LeftUpDownVector;\"\n    ],\n    [\n        0,\n        \"&LeftVectorBar;\"\n    ],\n    [\n        0,\n        \"&RightVectorBar;\"\n    ],\n    [\n        0,\n        \"&RightUpVectorBar;\"\n    ],\n    [\n        0,\n        \"&RightDownVectorBar;\"\n    ],\n    [\n        0,\n        \"&DownLeftVectorBar;\"\n    ],\n    [\n        0,\n        \"&DownRightVectorBar;\"\n    ],\n    [\n        0,\n        \"&LeftUpVectorBar;\"\n    ],\n    [\n        0,\n        \"&LeftDownVectorBar;\"\n    ],\n    [\n        0,\n        \"&LeftTeeVector;\"\n    ],\n    [\n        0,\n        \"&RightTeeVector;\"\n    ],\n    [\n        0,\n        \"&RightUpTeeVector;\"\n    ],\n    [\n        0,\n        \"&RightDownTeeVector;\"\n    ],\n    [\n        0,\n        \"&DownLeftTeeVector;\"\n    ],\n    [\n        0,\n        \"&DownRightTeeVector;\"\n    ],\n    [\n        0,\n        \"&LeftUpTeeVector;\"\n    ],\n    [\n        0,\n        \"&LeftDownTeeVector;\"\n    ],\n    [\n        0,\n        \"&lHar;\"\n    ],\n    [\n        0,\n        \"&uHar;\"\n    ],\n    [\n        0,\n        \"&rHar;\"\n    ],\n    [\n        0,\n        \"&dHar;\"\n    ],\n    [\n        0,\n        \"&luruhar;\"\n    ],\n    [\n        0,\n        \"&ldrdhar;\"\n    ],\n    [\n        0,\n        \"&ruluhar;\"\n    ],\n    [\n        0,\n        \"&rdldhar;\"\n    ],\n    [\n        0,\n        \"&lharul;\"\n    ],\n    [\n        0,\n        \"&llhard;\"\n    ],\n    [\n        0,\n        \"&rharul;\"\n    ],\n    [\n        0,\n        \"&lrhard;\"\n    ],\n    [\n        0,\n        \"&udhar;\"\n    ],\n    [\n        0,\n        \"&duhar;\"\n    ],\n    [\n        0,\n        \"&RoundImplies;\"\n    ],\n    [\n        0,\n        \"&erarr;\"\n    ],\n    [\n        0,\n        \"&simrarr;\"\n    ],\n    [\n        0,\n        \"&larrsim;\"\n    ],\n    [\n        0,\n        \"&rarrsim;\"\n    ],\n    [\n        0,\n        \"&rarrap;\"\n    ],\n    [\n        0,\n        \"&ltlarr;\"\n    ],\n    [\n        1,\n        \"&gtrarr;\"\n    ],\n    [\n        0,\n        \"&subrarr;\"\n    ],\n    [\n        1,\n        \"&suplarr;\"\n    ],\n    [\n        0,\n        \"&lfisht;\"\n    ],\n    [\n        0,\n        \"&rfisht;\"\n    ],\n    [\n        0,\n        \"&ufisht;\"\n    ],\n    [\n        0,\n        \"&dfisht;\"\n    ],\n    [\n        5,\n        \"&lopar;\"\n    ],\n    [\n        0,\n        \"&ropar;\"\n    ],\n    [\n        4,\n        \"&lbrke;\"\n    ],\n    [\n        0,\n        \"&rbrke;\"\n    ],\n    [\n        0,\n        \"&lbrkslu;\"\n    ],\n    [\n        0,\n        \"&rbrksld;\"\n    ],\n    [\n        0,\n        \"&lbrksld;\"\n    ],\n    [\n        0,\n        \"&rbrkslu;\"\n    ],\n    [\n        0,\n        \"&langd;\"\n    ],\n    [\n        0,\n        \"&rangd;\"\n    ],\n    [\n        0,\n        \"&lparlt;\"\n    ],\n    [\n        0,\n        \"&rpargt;\"\n    ],\n    [\n        0,\n        \"&gtlPar;\"\n    ],\n    [\n        0,\n        \"&ltrPar;\"\n    ],\n    [\n        3,\n        \"&vzigzag;\"\n    ],\n    [\n        1,\n        \"&vangrt;\"\n    ],\n    [\n        0,\n        \"&angrtvbd;\"\n    ],\n    [\n        6,\n        \"&ange;\"\n    ],\n    [\n        0,\n        \"&range;\"\n    ],\n    [\n        0,\n        \"&dwangle;\"\n    ],\n    [\n        0,\n        \"&uwangle;\"\n    ],\n    [\n        0,\n        \"&angmsdaa;\"\n    ],\n    [\n        0,\n        \"&angmsdab;\"\n    ],\n    [\n        0,\n        \"&angmsdac;\"\n    ],\n    [\n        0,\n        \"&angmsdad;\"\n    ],\n    [\n        0,\n        \"&angmsdae;\"\n    ],\n    [\n        0,\n        \"&angmsdaf;\"\n    ],\n    [\n        0,\n        \"&angmsdag;\"\n    ],\n    [\n        0,\n        \"&angmsdah;\"\n    ],\n    [\n        0,\n        \"&bemptyv;\"\n    ],\n    [\n        0,\n        \"&demptyv;\"\n    ],\n    [\n        0,\n        \"&cemptyv;\"\n    ],\n    [\n        0,\n        \"&raemptyv;\"\n    ],\n    [\n        0,\n        \"&laemptyv;\"\n    ],\n    [\n        0,\n        \"&ohbar;\"\n    ],\n    [\n        0,\n        \"&omid;\"\n    ],\n    [\n        0,\n        \"&opar;\"\n    ],\n    [\n        1,\n        \"&operp;\"\n    ],\n    [\n        1,\n        \"&olcross;\"\n    ],\n    [\n        0,\n        \"&odsold;\"\n    ],\n    [\n        1,\n        \"&olcir;\"\n    ],\n    [\n        0,\n        \"&ofcir;\"\n    ],\n    [\n        0,\n        \"&olt;\"\n    ],\n    [\n        0,\n        \"&ogt;\"\n    ],\n    [\n        0,\n        \"&cirscir;\"\n    ],\n    [\n        0,\n        \"&cirE;\"\n    ],\n    [\n        0,\n        \"&solb;\"\n    ],\n    [\n        0,\n        \"&bsolb;\"\n    ],\n    [\n        3,\n        \"&boxbox;\"\n    ],\n    [\n        3,\n        \"&trisb;\"\n    ],\n    [\n        0,\n        \"&rtriltri;\"\n    ],\n    [\n        0,\n        {\n            v: \"&LeftTriangleBar;\",\n            n: 824,\n            o: \"&NotLeftTriangleBar;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&RightTriangleBar;\",\n            n: 824,\n            o: \"&NotRightTriangleBar;\"\n        }\n    ],\n    [\n        11,\n        \"&iinfin;\"\n    ],\n    [\n        0,\n        \"&infintie;\"\n    ],\n    [\n        0,\n        \"&nvinfin;\"\n    ],\n    [\n        4,\n        \"&eparsl;\"\n    ],\n    [\n        0,\n        \"&smeparsl;\"\n    ],\n    [\n        0,\n        \"&eqvparsl;\"\n    ],\n    [\n        5,\n        \"&blacklozenge;\"\n    ],\n    [\n        8,\n        \"&RuleDelayed;\"\n    ],\n    [\n        1,\n        \"&dsol;\"\n    ],\n    [\n        9,\n        \"&bigodot;\"\n    ],\n    [\n        0,\n        \"&bigoplus;\"\n    ],\n    [\n        0,\n        \"&bigotimes;\"\n    ],\n    [\n        1,\n        \"&biguplus;\"\n    ],\n    [\n        1,\n        \"&bigsqcup;\"\n    ],\n    [\n        5,\n        \"&iiiint;\"\n    ],\n    [\n        0,\n        \"&fpartint;\"\n    ],\n    [\n        2,\n        \"&cirfnint;\"\n    ],\n    [\n        0,\n        \"&awint;\"\n    ],\n    [\n        0,\n        \"&rppolint;\"\n    ],\n    [\n        0,\n        \"&scpolint;\"\n    ],\n    [\n        0,\n        \"&npolint;\"\n    ],\n    [\n        0,\n        \"&pointint;\"\n    ],\n    [\n        0,\n        \"&quatint;\"\n    ],\n    [\n        0,\n        \"&intlarhk;\"\n    ],\n    [\n        10,\n        \"&pluscir;\"\n    ],\n    [\n        0,\n        \"&plusacir;\"\n    ],\n    [\n        0,\n        \"&simplus;\"\n    ],\n    [\n        0,\n        \"&plusdu;\"\n    ],\n    [\n        0,\n        \"&plussim;\"\n    ],\n    [\n        0,\n        \"&plustwo;\"\n    ],\n    [\n        1,\n        \"&mcomma;\"\n    ],\n    [\n        0,\n        \"&minusdu;\"\n    ],\n    [\n        2,\n        \"&loplus;\"\n    ],\n    [\n        0,\n        \"&roplus;\"\n    ],\n    [\n        0,\n        \"&Cross;\"\n    ],\n    [\n        0,\n        \"&timesd;\"\n    ],\n    [\n        0,\n        \"&timesbar;\"\n    ],\n    [\n        1,\n        \"&smashp;\"\n    ],\n    [\n        0,\n        \"&lotimes;\"\n    ],\n    [\n        0,\n        \"&rotimes;\"\n    ],\n    [\n        0,\n        \"&otimesas;\"\n    ],\n    [\n        0,\n        \"&Otimes;\"\n    ],\n    [\n        0,\n        \"&odiv;\"\n    ],\n    [\n        0,\n        \"&triplus;\"\n    ],\n    [\n        0,\n        \"&triminus;\"\n    ],\n    [\n        0,\n        \"&tritime;\"\n    ],\n    [\n        0,\n        \"&intprod;\"\n    ],\n    [\n        2,\n        \"&amalg;\"\n    ],\n    [\n        0,\n        \"&capdot;\"\n    ],\n    [\n        1,\n        \"&ncup;\"\n    ],\n    [\n        0,\n        \"&ncap;\"\n    ],\n    [\n        0,\n        \"&capand;\"\n    ],\n    [\n        0,\n        \"&cupor;\"\n    ],\n    [\n        0,\n        \"&cupcap;\"\n    ],\n    [\n        0,\n        \"&capcup;\"\n    ],\n    [\n        0,\n        \"&cupbrcap;\"\n    ],\n    [\n        0,\n        \"&capbrcup;\"\n    ],\n    [\n        0,\n        \"&cupcup;\"\n    ],\n    [\n        0,\n        \"&capcap;\"\n    ],\n    [\n        0,\n        \"&ccups;\"\n    ],\n    [\n        0,\n        \"&ccaps;\"\n    ],\n    [\n        2,\n        \"&ccupssm;\"\n    ],\n    [\n        2,\n        \"&And;\"\n    ],\n    [\n        0,\n        \"&Or;\"\n    ],\n    [\n        0,\n        \"&andand;\"\n    ],\n    [\n        0,\n        \"&oror;\"\n    ],\n    [\n        0,\n        \"&orslope;\"\n    ],\n    [\n        0,\n        \"&andslope;\"\n    ],\n    [\n        1,\n        \"&andv;\"\n    ],\n    [\n        0,\n        \"&orv;\"\n    ],\n    [\n        0,\n        \"&andd;\"\n    ],\n    [\n        0,\n        \"&ord;\"\n    ],\n    [\n        1,\n        \"&wedbar;\"\n    ],\n    [\n        6,\n        \"&sdote;\"\n    ],\n    [\n        3,\n        \"&simdot;\"\n    ],\n    [\n        2,\n        {\n            v: \"&congdot;\",\n            n: 824,\n            o: \"&ncongdot;\"\n        }\n    ],\n    [\n        0,\n        \"&easter;\"\n    ],\n    [\n        0,\n        \"&apacir;\"\n    ],\n    [\n        0,\n        {\n            v: \"&apE;\",\n            n: 824,\n            o: \"&napE;\"\n        }\n    ],\n    [\n        0,\n        \"&eplus;\"\n    ],\n    [\n        0,\n        \"&pluse;\"\n    ],\n    [\n        0,\n        \"&Esim;\"\n    ],\n    [\n        0,\n        \"&Colone;\"\n    ],\n    [\n        0,\n        \"&Equal;\"\n    ],\n    [\n        1,\n        \"&ddotseq;\"\n    ],\n    [\n        0,\n        \"&equivDD;\"\n    ],\n    [\n        0,\n        \"&ltcir;\"\n    ],\n    [\n        0,\n        \"&gtcir;\"\n    ],\n    [\n        0,\n        \"&ltquest;\"\n    ],\n    [\n        0,\n        \"&gtquest;\"\n    ],\n    [\n        0,\n        {\n            v: \"&leqslant;\",\n            n: 824,\n            o: \"&nleqslant;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&geqslant;\",\n            n: 824,\n            o: \"&ngeqslant;\"\n        }\n    ],\n    [\n        0,\n        \"&lesdot;\"\n    ],\n    [\n        0,\n        \"&gesdot;\"\n    ],\n    [\n        0,\n        \"&lesdoto;\"\n    ],\n    [\n        0,\n        \"&gesdoto;\"\n    ],\n    [\n        0,\n        \"&lesdotor;\"\n    ],\n    [\n        0,\n        \"&gesdotol;\"\n    ],\n    [\n        0,\n        \"&lap;\"\n    ],\n    [\n        0,\n        \"&gap;\"\n    ],\n    [\n        0,\n        \"&lne;\"\n    ],\n    [\n        0,\n        \"&gne;\"\n    ],\n    [\n        0,\n        \"&lnap;\"\n    ],\n    [\n        0,\n        \"&gnap;\"\n    ],\n    [\n        0,\n        \"&lEg;\"\n    ],\n    [\n        0,\n        \"&gEl;\"\n    ],\n    [\n        0,\n        \"&lsime;\"\n    ],\n    [\n        0,\n        \"&gsime;\"\n    ],\n    [\n        0,\n        \"&lsimg;\"\n    ],\n    [\n        0,\n        \"&gsiml;\"\n    ],\n    [\n        0,\n        \"&lgE;\"\n    ],\n    [\n        0,\n        \"&glE;\"\n    ],\n    [\n        0,\n        \"&lesges;\"\n    ],\n    [\n        0,\n        \"&gesles;\"\n    ],\n    [\n        0,\n        \"&els;\"\n    ],\n    [\n        0,\n        \"&egs;\"\n    ],\n    [\n        0,\n        \"&elsdot;\"\n    ],\n    [\n        0,\n        \"&egsdot;\"\n    ],\n    [\n        0,\n        \"&el;\"\n    ],\n    [\n        0,\n        \"&eg;\"\n    ],\n    [\n        2,\n        \"&siml;\"\n    ],\n    [\n        0,\n        \"&simg;\"\n    ],\n    [\n        0,\n        \"&simlE;\"\n    ],\n    [\n        0,\n        \"&simgE;\"\n    ],\n    [\n        0,\n        {\n            v: \"&LessLess;\",\n            n: 824,\n            o: \"&NotNestedLessLess;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&GreaterGreater;\",\n            n: 824,\n            o: \"&NotNestedGreaterGreater;\"\n        }\n    ],\n    [\n        1,\n        \"&glj;\"\n    ],\n    [\n        0,\n        \"&gla;\"\n    ],\n    [\n        0,\n        \"&ltcc;\"\n    ],\n    [\n        0,\n        \"&gtcc;\"\n    ],\n    [\n        0,\n        \"&lescc;\"\n    ],\n    [\n        0,\n        \"&gescc;\"\n    ],\n    [\n        0,\n        \"&smt;\"\n    ],\n    [\n        0,\n        \"&lat;\"\n    ],\n    [\n        0,\n        {\n            v: \"&smte;\",\n            n: 65024,\n            o: \"&smtes;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&late;\",\n            n: 65024,\n            o: \"&lates;\"\n        }\n    ],\n    [\n        0,\n        \"&bumpE;\"\n    ],\n    [\n        0,\n        {\n            v: \"&PrecedesEqual;\",\n            n: 824,\n            o: \"&NotPrecedesEqual;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&sce;\",\n            n: 824,\n            o: \"&NotSucceedsEqual;\"\n        }\n    ],\n    [\n        2,\n        \"&prE;\"\n    ],\n    [\n        0,\n        \"&scE;\"\n    ],\n    [\n        0,\n        \"&precneqq;\"\n    ],\n    [\n        0,\n        \"&scnE;\"\n    ],\n    [\n        0,\n        \"&prap;\"\n    ],\n    [\n        0,\n        \"&scap;\"\n    ],\n    [\n        0,\n        \"&precnapprox;\"\n    ],\n    [\n        0,\n        \"&scnap;\"\n    ],\n    [\n        0,\n        \"&Pr;\"\n    ],\n    [\n        0,\n        \"&Sc;\"\n    ],\n    [\n        0,\n        \"&subdot;\"\n    ],\n    [\n        0,\n        \"&supdot;\"\n    ],\n    [\n        0,\n        \"&subplus;\"\n    ],\n    [\n        0,\n        \"&supplus;\"\n    ],\n    [\n        0,\n        \"&submult;\"\n    ],\n    [\n        0,\n        \"&supmult;\"\n    ],\n    [\n        0,\n        \"&subedot;\"\n    ],\n    [\n        0,\n        \"&supedot;\"\n    ],\n    [\n        0,\n        {\n            v: \"&subE;\",\n            n: 824,\n            o: \"&nsubE;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&supE;\",\n            n: 824,\n            o: \"&nsupE;\"\n        }\n    ],\n    [\n        0,\n        \"&subsim;\"\n    ],\n    [\n        0,\n        \"&supsim;\"\n    ],\n    [\n        2,\n        {\n            v: \"&subnE;\",\n            n: 65024,\n            o: \"&varsubsetneqq;\"\n        }\n    ],\n    [\n        0,\n        {\n            v: \"&supnE;\",\n            n: 65024,\n            o: \"&varsupsetneqq;\"\n        }\n    ],\n    [\n        2,\n        \"&csub;\"\n    ],\n    [\n        0,\n        \"&csup;\"\n    ],\n    [\n        0,\n        \"&csube;\"\n    ],\n    [\n        0,\n        \"&csupe;\"\n    ],\n    [\n        0,\n        \"&subsup;\"\n    ],\n    [\n        0,\n        \"&supsub;\"\n    ],\n    [\n        0,\n        \"&subsub;\"\n    ],\n    [\n        0,\n        \"&supsup;\"\n    ],\n    [\n        0,\n        \"&suphsub;\"\n    ],\n    [\n        0,\n        \"&supdsub;\"\n    ],\n    [\n        0,\n        \"&forkv;\"\n    ],\n    [\n        0,\n        \"&topfork;\"\n    ],\n    [\n        0,\n        \"&mlcp;\"\n    ],\n    [\n        8,\n        \"&Dashv;\"\n    ],\n    [\n        1,\n        \"&Vdashl;\"\n    ],\n    [\n        0,\n        \"&Barv;\"\n    ],\n    [\n        0,\n        \"&vBar;\"\n    ],\n    [\n        0,\n        \"&vBarv;\"\n    ],\n    [\n        1,\n        \"&Vbar;\"\n    ],\n    [\n        0,\n        \"&Not;\"\n    ],\n    [\n        0,\n        \"&bNot;\"\n    ],\n    [\n        0,\n        \"&rnmid;\"\n    ],\n    [\n        0,\n        \"&cirmid;\"\n    ],\n    [\n        0,\n        \"&midcir;\"\n    ],\n    [\n        0,\n        \"&topcir;\"\n    ],\n    [\n        0,\n        \"&nhpar;\"\n    ],\n    [\n        0,\n        \"&parsim;\"\n    ],\n    [\n        9,\n        {\n            v: \"&parsl;\",\n            n: 8421,\n            o: \"&nparsl;\"\n        }\n    ],\n    [\n        44343,\n        {\n            n: new Map(/* #__PURE__ */ restoreDiff([\n                [\n                    56476,\n                    \"&Ascr;\"\n                ],\n                [\n                    1,\n                    \"&Cscr;\"\n                ],\n                [\n                    0,\n                    \"&Dscr;\"\n                ],\n                [\n                    2,\n                    \"&Gscr;\"\n                ],\n                [\n                    2,\n                    \"&Jscr;\"\n                ],\n                [\n                    0,\n                    \"&Kscr;\"\n                ],\n                [\n                    2,\n                    \"&Nscr;\"\n                ],\n                [\n                    0,\n                    \"&Oscr;\"\n                ],\n                [\n                    0,\n                    \"&Pscr;\"\n                ],\n                [\n                    0,\n                    \"&Qscr;\"\n                ],\n                [\n                    1,\n                    \"&Sscr;\"\n                ],\n                [\n                    0,\n                    \"&Tscr;\"\n                ],\n                [\n                    0,\n                    \"&Uscr;\"\n                ],\n                [\n                    0,\n                    \"&Vscr;\"\n                ],\n                [\n                    0,\n                    \"&Wscr;\"\n                ],\n                [\n                    0,\n                    \"&Xscr;\"\n                ],\n                [\n                    0,\n                    \"&Yscr;\"\n                ],\n                [\n                    0,\n                    \"&Zscr;\"\n                ],\n                [\n                    0,\n                    \"&ascr;\"\n                ],\n                [\n                    0,\n                    \"&bscr;\"\n                ],\n                [\n                    0,\n                    \"&cscr;\"\n                ],\n                [\n                    0,\n                    \"&dscr;\"\n                ],\n                [\n                    1,\n                    \"&fscr;\"\n                ],\n                [\n                    1,\n                    \"&hscr;\"\n                ],\n                [\n                    0,\n                    \"&iscr;\"\n                ],\n                [\n                    0,\n                    \"&jscr;\"\n                ],\n                [\n                    0,\n                    \"&kscr;\"\n                ],\n                [\n                    0,\n                    \"&lscr;\"\n                ],\n                [\n                    0,\n                    \"&mscr;\"\n                ],\n                [\n                    0,\n                    \"&nscr;\"\n                ],\n                [\n                    1,\n                    \"&pscr;\"\n                ],\n                [\n                    0,\n                    \"&qscr;\"\n                ],\n                [\n                    0,\n                    \"&rscr;\"\n                ],\n                [\n                    0,\n                    \"&sscr;\"\n                ],\n                [\n                    0,\n                    \"&tscr;\"\n                ],\n                [\n                    0,\n                    \"&uscr;\"\n                ],\n                [\n                    0,\n                    \"&vscr;\"\n                ],\n                [\n                    0,\n                    \"&wscr;\"\n                ],\n                [\n                    0,\n                    \"&xscr;\"\n                ],\n                [\n                    0,\n                    \"&yscr;\"\n                ],\n                [\n                    0,\n                    \"&zscr;\"\n                ],\n                [\n                    52,\n                    \"&Afr;\"\n                ],\n                [\n                    0,\n                    \"&Bfr;\"\n                ],\n                [\n                    1,\n                    \"&Dfr;\"\n                ],\n                [\n                    0,\n                    \"&Efr;\"\n                ],\n                [\n                    0,\n                    \"&Ffr;\"\n                ],\n                [\n                    0,\n                    \"&Gfr;\"\n                ],\n                [\n                    2,\n                    \"&Jfr;\"\n                ],\n                [\n                    0,\n                    \"&Kfr;\"\n                ],\n                [\n                    0,\n                    \"&Lfr;\"\n                ],\n                [\n                    0,\n                    \"&Mfr;\"\n                ],\n                [\n                    0,\n                    \"&Nfr;\"\n                ],\n                [\n                    0,\n                    \"&Ofr;\"\n                ],\n                [\n                    0,\n                    \"&Pfr;\"\n                ],\n                [\n                    0,\n                    \"&Qfr;\"\n                ],\n                [\n                    1,\n                    \"&Sfr;\"\n                ],\n                [\n                    0,\n                    \"&Tfr;\"\n                ],\n                [\n                    0,\n                    \"&Ufr;\"\n                ],\n                [\n                    0,\n                    \"&Vfr;\"\n                ],\n                [\n                    0,\n                    \"&Wfr;\"\n                ],\n                [\n                    0,\n                    \"&Xfr;\"\n                ],\n                [\n                    0,\n                    \"&Yfr;\"\n                ],\n                [\n                    1,\n                    \"&afr;\"\n                ],\n                [\n                    0,\n                    \"&bfr;\"\n                ],\n                [\n                    0,\n                    \"&cfr;\"\n                ],\n                [\n                    0,\n                    \"&dfr;\"\n                ],\n                [\n                    0,\n                    \"&efr;\"\n                ],\n                [\n                    0,\n                    \"&ffr;\"\n                ],\n                [\n                    0,\n                    \"&gfr;\"\n                ],\n                [\n                    0,\n                    \"&hfr;\"\n                ],\n                [\n                    0,\n                    \"&ifr;\"\n                ],\n                [\n                    0,\n                    \"&jfr;\"\n                ],\n                [\n                    0,\n                    \"&kfr;\"\n                ],\n                [\n                    0,\n                    \"&lfr;\"\n                ],\n                [\n                    0,\n                    \"&mfr;\"\n                ],\n                [\n                    0,\n                    \"&nfr;\"\n                ],\n                [\n                    0,\n                    \"&ofr;\"\n                ],\n                [\n                    0,\n                    \"&pfr;\"\n                ],\n                [\n                    0,\n                    \"&qfr;\"\n                ],\n                [\n                    0,\n                    \"&rfr;\"\n                ],\n                [\n                    0,\n                    \"&sfr;\"\n                ],\n                [\n                    0,\n                    \"&tfr;\"\n                ],\n                [\n                    0,\n                    \"&ufr;\"\n                ],\n                [\n                    0,\n                    \"&vfr;\"\n                ],\n                [\n                    0,\n                    \"&wfr;\"\n                ],\n                [\n                    0,\n                    \"&xfr;\"\n                ],\n                [\n                    0,\n                    \"&yfr;\"\n                ],\n                [\n                    0,\n                    \"&zfr;\"\n                ],\n                [\n                    0,\n                    \"&Aopf;\"\n                ],\n                [\n                    0,\n                    \"&Bopf;\"\n                ],\n                [\n                    1,\n                    \"&Dopf;\"\n                ],\n                [\n                    0,\n                    \"&Eopf;\"\n                ],\n                [\n                    0,\n                    \"&Fopf;\"\n                ],\n                [\n                    0,\n                    \"&Gopf;\"\n                ],\n                [\n                    1,\n                    \"&Iopf;\"\n                ],\n                [\n                    0,\n                    \"&Jopf;\"\n                ],\n                [\n                    0,\n                    \"&Kopf;\"\n                ],\n                [\n                    0,\n                    \"&Lopf;\"\n                ],\n                [\n                    0,\n                    \"&Mopf;\"\n                ],\n                [\n                    1,\n                    \"&Oopf;\"\n                ],\n                [\n                    3,\n                    \"&Sopf;\"\n                ],\n                [\n                    0,\n                    \"&Topf;\"\n                ],\n                [\n                    0,\n                    \"&Uopf;\"\n                ],\n                [\n                    0,\n                    \"&Vopf;\"\n                ],\n                [\n                    0,\n                    \"&Wopf;\"\n                ],\n                [\n                    0,\n                    \"&Xopf;\"\n                ],\n                [\n                    0,\n                    \"&Yopf;\"\n                ],\n                [\n                    1,\n                    \"&aopf;\"\n                ],\n                [\n                    0,\n                    \"&bopf;\"\n                ],\n                [\n                    0,\n                    \"&copf;\"\n                ],\n                [\n                    0,\n                    \"&dopf;\"\n                ],\n                [\n                    0,\n                    \"&eopf;\"\n                ],\n                [\n                    0,\n                    \"&fopf;\"\n                ],\n                [\n                    0,\n                    \"&gopf;\"\n                ],\n                [\n                    0,\n                    \"&hopf;\"\n                ],\n                [\n                    0,\n                    \"&iopf;\"\n                ],\n                [\n                    0,\n                    \"&jopf;\"\n                ],\n                [\n                    0,\n                    \"&kopf;\"\n                ],\n                [\n                    0,\n                    \"&lopf;\"\n                ],\n                [\n                    0,\n                    \"&mopf;\"\n                ],\n                [\n                    0,\n                    \"&nopf;\"\n                ],\n                [\n                    0,\n                    \"&oopf;\"\n                ],\n                [\n                    0,\n                    \"&popf;\"\n                ],\n                [\n                    0,\n                    \"&qopf;\"\n                ],\n                [\n                    0,\n                    \"&ropf;\"\n                ],\n                [\n                    0,\n                    \"&sopf;\"\n                ],\n                [\n                    0,\n                    \"&topf;\"\n                ],\n                [\n                    0,\n                    \"&uopf;\"\n                ],\n                [\n                    0,\n                    \"&vopf;\"\n                ],\n                [\n                    0,\n                    \"&wopf;\"\n                ],\n                [\n                    0,\n                    \"&xopf;\"\n                ],\n                [\n                    0,\n                    \"&yopf;\"\n                ],\n                [\n                    0,\n                    \"&zopf;\"\n                ]\n            ]))\n        }\n    ],\n    [\n        8906,\n        \"&fflig;\"\n    ],\n    [\n        0,\n        \"&filig;\"\n    ],\n    [\n        0,\n        \"&fllig;\"\n    ],\n    [\n        0,\n        \"&ffilig;\"\n    ],\n    [\n        0,\n        \"&ffllig;\"\n    ]\n])); //# sourceMappingURL=encode-html.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/entities/lib/generated/encode-html.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/entities/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/entities/lib/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLAttribute = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.DecodingMode = exports.EntityDecoder = exports.encodeHTML5 = exports.encodeHTML4 = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = exports.EncodingMode = exports.EntityLevel = void 0;\nvar decode_js_1 = __webpack_require__(/*! ./decode.js */ \"(app-pages-browser)/./node_modules/entities/lib/decode.js\");\nvar encode_js_1 = __webpack_require__(/*! ./encode.js */ \"(app-pages-browser)/./node_modules/entities/lib/encode.js\");\nvar escape_js_1 = __webpack_require__(/*! ./escape.js */ \"(app-pages-browser)/./node_modules/entities/lib/escape.js\");\n/** The level of entities to support. */ var EntityLevel;\n(function(EntityLevel) {\n    /** Support only XML entities. */ EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n    /** Support HTML entities, which are a superset of XML entities. */ EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel = exports.EntityLevel || (exports.EntityLevel = {}));\nvar EncodingMode;\n(function(EncodingMode) {\n    /**\n     * The output is UTF-8 encoded. Only characters that need escaping within\n     * XML will be escaped.\n     */ EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n    /**\n     * The output consists only of ASCII characters. Characters that need\n     * escaping within HTML, and characters that aren't ASCII characters will\n     * be escaped.\n     */ EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n    /**\n     * Encode all characters that have an equivalent entity, as well as all\n     * characters that are not ASCII characters.\n     */ EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n    /**\n     * Encode all characters that have to be escaped in HTML attributes,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */ EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n    /**\n     * Encode all characters that have to be escaped in HTML text,\n     * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n     */ EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode = exports.EncodingMode || (exports.EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */ function decode(data, options) {\n    if (options === void 0) {\n        options = EntityLevel.XML;\n    }\n    var level = typeof options === \"number\" ? options : options.level;\n    if (level === EntityLevel.HTML) {\n        var mode = typeof options === \"object\" ? options.mode : undefined;\n        return (0, decode_js_1.decodeHTML)(data, mode);\n    }\n    return (0, decode_js_1.decodeXML)(data);\n}\nexports.decode = decode;\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */ function decodeStrict(data, options) {\n    var _a;\n    if (options === void 0) {\n        options = EntityLevel.XML;\n    }\n    var opts = typeof options === \"number\" ? {\n        level: options\n    } : options;\n    (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = decode_js_1.DecodingMode.Strict;\n    return decode(data, opts);\n}\nexports.decodeStrict = decodeStrict;\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */ function encode(data, options) {\n    if (options === void 0) {\n        options = EntityLevel.XML;\n    }\n    var opts = typeof options === \"number\" ? {\n        level: options\n    } : options;\n    // Mode `UTF8` just escapes XML entities\n    if (opts.mode === EncodingMode.UTF8) return (0, escape_js_1.escapeUTF8)(data);\n    if (opts.mode === EncodingMode.Attribute) return (0, escape_js_1.escapeAttribute)(data);\n    if (opts.mode === EncodingMode.Text) return (0, escape_js_1.escapeText)(data);\n    if (opts.level === EntityLevel.HTML) {\n        if (opts.mode === EncodingMode.ASCII) {\n            return (0, encode_js_1.encodeNonAsciiHTML)(data);\n        }\n        return (0, encode_js_1.encodeHTML)(data);\n    }\n    // ASCII and Extensive are equivalent\n    return (0, escape_js_1.encodeXML)(data);\n}\nexports.encode = encode;\nvar escape_js_2 = __webpack_require__(/*! ./escape.js */ \"(app-pages-browser)/./node_modules/entities/lib/escape.js\");\nObject.defineProperty(exports, \"encodeXML\", ({\n    enumerable: true,\n    get: function() {\n        return escape_js_2.encodeXML;\n    }\n}));\nObject.defineProperty(exports, \"escape\", ({\n    enumerable: true,\n    get: function() {\n        return escape_js_2.escape;\n    }\n}));\nObject.defineProperty(exports, \"escapeUTF8\", ({\n    enumerable: true,\n    get: function() {\n        return escape_js_2.escapeUTF8;\n    }\n}));\nObject.defineProperty(exports, \"escapeAttribute\", ({\n    enumerable: true,\n    get: function() {\n        return escape_js_2.escapeAttribute;\n    }\n}));\nObject.defineProperty(exports, \"escapeText\", ({\n    enumerable: true,\n    get: function() {\n        return escape_js_2.escapeText;\n    }\n}));\nvar encode_js_2 = __webpack_require__(/*! ./encode.js */ \"(app-pages-browser)/./node_modules/entities/lib/encode.js\");\nObject.defineProperty(exports, \"encodeHTML\", ({\n    enumerable: true,\n    get: function() {\n        return encode_js_2.encodeHTML;\n    }\n}));\nObject.defineProperty(exports, \"encodeNonAsciiHTML\", ({\n    enumerable: true,\n    get: function() {\n        return encode_js_2.encodeNonAsciiHTML;\n    }\n}));\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"encodeHTML4\", ({\n    enumerable: true,\n    get: function() {\n        return encode_js_2.encodeHTML;\n    }\n}));\nObject.defineProperty(exports, \"encodeHTML5\", ({\n    enumerable: true,\n    get: function() {\n        return encode_js_2.encodeHTML;\n    }\n}));\nvar decode_js_2 = __webpack_require__(/*! ./decode.js */ \"(app-pages-browser)/./node_modules/entities/lib/decode.js\");\nObject.defineProperty(exports, \"EntityDecoder\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.EntityDecoder;\n    }\n}));\nObject.defineProperty(exports, \"DecodingMode\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.DecodingMode;\n    }\n}));\nObject.defineProperty(exports, \"decodeXML\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.decodeXML;\n    }\n}));\nObject.defineProperty(exports, \"decodeHTML\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.decodeHTML;\n    }\n}));\nObject.defineProperty(exports, \"decodeHTMLStrict\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.decodeHTMLStrict;\n    }\n}));\nObject.defineProperty(exports, \"decodeHTMLAttribute\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.decodeHTMLAttribute;\n    }\n}));\n// Legacy aliases (deprecated)\nObject.defineProperty(exports, \"decodeHTML4\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.decodeHTML;\n    }\n}));\nObject.defineProperty(exports, \"decodeHTML5\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.decodeHTML;\n    }\n}));\nObject.defineProperty(exports, \"decodeHTML4Strict\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.decodeHTMLStrict;\n    }\n}));\nObject.defineProperty(exports, \"decodeHTML5Strict\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.decodeHTMLStrict;\n    }\n}));\nObject.defineProperty(exports, \"decodeXMLStrict\", ({\n    enumerable: true,\n    get: function() {\n        return decode_js_2.decodeXML;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSx5QkFBeUIsR0FBR0EseUJBQXlCLEdBQUdBLG1CQUFtQixHQUFHQSxtQkFBbUIsR0FBR0EsMkJBQTJCLEdBQUdBLHdCQUF3QixHQUFHQSxrQkFBa0IsR0FBR0EsaUJBQWlCLEdBQUdBLG9CQUFvQixHQUFHQSxxQkFBcUIsR0FBR0EsbUJBQW1CLEdBQUdBLG1CQUFtQixHQUFHQSwwQkFBMEIsR0FBR0Esa0JBQWtCLEdBQUdBLGtCQUFrQixHQUFHQSx1QkFBdUIsR0FBR0Esa0JBQWtCLEdBQUdBLGNBQWMsR0FBR0EsaUJBQWlCLEdBQUdBLGNBQWMsR0FBR0Esb0JBQW9CLEdBQUdBLGNBQWMsR0FBR0Esb0JBQW9CLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDamtCLElBQUkyQixjQUFjQyxtQkFBT0EsQ0FBQyw4RUFBYTtBQUN2QyxJQUFJQyxjQUFjRCxtQkFBT0EsQ0FBQyw4RUFBYTtBQUN2QyxJQUFJRSxjQUFjRixtQkFBT0EsQ0FBQyw4RUFBYTtBQUN2QyxzQ0FBc0MsR0FDdEMsSUFBSUY7QUFDSCxVQUFVQSxXQUFXO0lBQ2xCLCtCQUErQixHQUMvQkEsV0FBVyxDQUFDQSxXQUFXLENBQUMsTUFBTSxHQUFHLEVBQUUsR0FBRztJQUN0QyxpRUFBaUUsR0FDakVBLFdBQVcsQ0FBQ0EsV0FBVyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7QUFDM0MsR0FBR0EsY0FBYzFCLFFBQVEwQixXQUFXLElBQUsxQixDQUFBQSxtQkFBbUIsR0FBRyxDQUFDO0FBQ2hFLElBQUl5QjtBQUNILFVBQVVBLFlBQVk7SUFDbkI7OztLQUdDLEdBQ0RBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDekM7Ozs7S0FJQyxHQUNEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQzFDOzs7S0FHQyxHQUNEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0lBQzlDOzs7S0FHQyxHQUNEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0lBQzlDOzs7S0FHQyxHQUNEQSxZQUFZLENBQUNBLFlBQVksQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHO0FBQzdDLEdBQUdBLGVBQWV6QixRQUFReUIsWUFBWSxJQUFLekIsQ0FBQUEsb0JBQW9CLEdBQUcsQ0FBQztBQUNuRTs7Ozs7Q0FLQyxHQUNELFNBQVN3QixPQUFPTyxJQUFJLEVBQUVDLE9BQU87SUFDekIsSUFBSUEsWUFBWSxLQUFLLEdBQUc7UUFBRUEsVUFBVU4sWUFBWU8sR0FBRztJQUFFO0lBQ3JELElBQUlDLFFBQVEsT0FBT0YsWUFBWSxXQUFXQSxVQUFVQSxRQUFRRSxLQUFLO0lBQ2pFLElBQUlBLFVBQVVSLFlBQVlTLElBQUksRUFBRTtRQUM1QixJQUFJQyxPQUFPLE9BQU9KLFlBQVksV0FBV0EsUUFBUUksSUFBSSxHQUFHQztRQUN4RCxPQUFPLENBQUMsR0FBR1YsWUFBWWxCLFVBQVUsRUFBRXNCLE1BQU1LO0lBQzdDO0lBQ0EsT0FBTyxDQUFDLEdBQUdULFlBQVlqQixTQUFTLEVBQUVxQjtBQUN0QztBQUNBL0IsY0FBYyxHQUFHd0I7QUFDakI7Ozs7OztDQU1DLEdBQ0QsU0FBU0QsYUFBYVEsSUFBSSxFQUFFQyxPQUFPO0lBQy9CLElBQUlNO0lBQ0osSUFBSU4sWUFBWSxLQUFLLEdBQUc7UUFBRUEsVUFBVU4sWUFBWU8sR0FBRztJQUFFO0lBQ3JELElBQUlNLE9BQU8sT0FBT1AsWUFBWSxXQUFXO1FBQUVFLE9BQU9GO0lBQVEsSUFBSUE7SUFDN0RNLENBQUFBLEtBQUtDLEtBQUtILElBQUksTUFBTSxRQUFRRSxPQUFPLEtBQUssSUFBSUEsS0FBTUMsS0FBS0gsSUFBSSxHQUFHVCxZQUFZaEIsWUFBWSxDQUFDNkIsTUFBTTtJQUM5RixPQUFPaEIsT0FBT08sTUFBTVE7QUFDeEI7QUFDQXZDLG9CQUFvQixHQUFHdUI7QUFDdkI7Ozs7O0NBS0MsR0FDRCxTQUFTRCxPQUFPUyxJQUFJLEVBQUVDLE9BQU87SUFDekIsSUFBSUEsWUFBWSxLQUFLLEdBQUc7UUFBRUEsVUFBVU4sWUFBWU8sR0FBRztJQUFFO0lBQ3JELElBQUlNLE9BQU8sT0FBT1AsWUFBWSxXQUFXO1FBQUVFLE9BQU9GO0lBQVEsSUFBSUE7SUFDOUQsd0NBQXdDO0lBQ3hDLElBQUlPLEtBQUtILElBQUksS0FBS1gsYUFBYWdCLElBQUksRUFDL0IsT0FBTyxDQUFDLEdBQUdYLFlBQVlYLFVBQVUsRUFBRVk7SUFDdkMsSUFBSVEsS0FBS0gsSUFBSSxLQUFLWCxhQUFhaUIsU0FBUyxFQUNwQyxPQUFPLENBQUMsR0FBR1osWUFBWVosZUFBZSxFQUFFYTtJQUM1QyxJQUFJUSxLQUFLSCxJQUFJLEtBQUtYLGFBQWFrQixJQUFJLEVBQy9CLE9BQU8sQ0FBQyxHQUFHYixZQUFZYixVQUFVLEVBQUVjO0lBQ3ZDLElBQUlRLEtBQUtMLEtBQUssS0FBS1IsWUFBWVMsSUFBSSxFQUFFO1FBQ2pDLElBQUlJLEtBQUtILElBQUksS0FBS1gsYUFBYW1CLEtBQUssRUFBRTtZQUNsQyxPQUFPLENBQUMsR0FBR2YsWUFBWWQsa0JBQWtCLEVBQUVnQjtRQUMvQztRQUNBLE9BQU8sQ0FBQyxHQUFHRixZQUFZYixVQUFVLEVBQUVlO0lBQ3ZDO0lBQ0EscUNBQXFDO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHRCxZQUFZVCxTQUFTLEVBQUVVO0FBQ3RDO0FBQ0EvQixjQUFjLEdBQUdzQjtBQUNqQixJQUFJdUIsY0FBY2pCLG1CQUFPQSxDQUFDLDhFQUFhO0FBQ3ZDOUIsNkNBQTRDO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixZQUFZeEIsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3JIdkIsMENBQXlDO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixZQUFZekIsTUFBTTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQy9HdEIsOENBQTZDO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixZQUFZMUIsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3ZIckIsbURBQWtEO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixZQUFZM0IsZUFBZTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2pJcEIsOENBQTZDO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixZQUFZNUIsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3ZILElBQUkrQixjQUFjcEIsbUJBQU9BLENBQUMsOEVBQWE7QUFDdkM5Qiw4Q0FBNkM7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFlBQVloQyxVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDdkhsQixzREFBcUQ7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFlBQVlqQyxrQkFBa0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2SSw4QkFBOEI7QUFDOUJqQiwrQ0FBOEM7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFlBQVloQyxVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEhsQiwrQ0FBOEM7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLFlBQVloQyxVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEgsSUFBSWlDLGNBQWNyQixtQkFBT0EsQ0FBQyw4RUFBYTtBQUN2QzlCLGlEQUFnRDtJQUFFZ0QsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsWUFBWXJDLGFBQWE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM3SGQsZ0RBQStDO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxZQUFZdEMsWUFBWTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzNIYiw2Q0FBNEM7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLFlBQVl2QyxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDckhaLDhDQUE2QztJQUFFZ0QsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsWUFBWXhDLFVBQVU7SUFBRTtBQUFFLENBQUMsRUFBQztBQUN2SFgsb0RBQW1EO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxZQUFZekMsZ0JBQWdCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbklWLHVEQUFzRDtJQUFFZ0QsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsWUFBWTFDLG1CQUFtQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3pJLDhCQUE4QjtBQUM5QlQsK0NBQThDO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxZQUFZeEMsVUFBVTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3hIWCwrQ0FBOEM7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLFlBQVl4QyxVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEhYLHFEQUFvRDtJQUFFZ0QsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsWUFBWXpDLGdCQUFnQjtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BJVixxREFBb0Q7SUFBRWdELFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9FLFlBQVl6QyxnQkFBZ0I7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNwSVYsbURBQWtEO0lBQUVnRCxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxZQUFZdkMsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDLEVBQzNILGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2luZGV4LmpzPzBmOWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZVhNTFN0cmljdCA9IGV4cG9ydHMuZGVjb2RlSFRNTDVTdHJpY3QgPSBleHBvcnRzLmRlY29kZUhUTUw0U3RyaWN0ID0gZXhwb3J0cy5kZWNvZGVIVE1MNSA9IGV4cG9ydHMuZGVjb2RlSFRNTDQgPSBleHBvcnRzLmRlY29kZUhUTUxBdHRyaWJ1dGUgPSBleHBvcnRzLmRlY29kZUhUTUxTdHJpY3QgPSBleHBvcnRzLmRlY29kZUhUTUwgPSBleHBvcnRzLmRlY29kZVhNTCA9IGV4cG9ydHMuRGVjb2RpbmdNb2RlID0gZXhwb3J0cy5FbnRpdHlEZWNvZGVyID0gZXhwb3J0cy5lbmNvZGVIVE1MNSA9IGV4cG9ydHMuZW5jb2RlSFRNTDQgPSBleHBvcnRzLmVuY29kZU5vbkFzY2lpSFRNTCA9IGV4cG9ydHMuZW5jb2RlSFRNTCA9IGV4cG9ydHMuZXNjYXBlVGV4dCA9IGV4cG9ydHMuZXNjYXBlQXR0cmlidXRlID0gZXhwb3J0cy5lc2NhcGVVVEY4ID0gZXhwb3J0cy5lc2NhcGUgPSBleHBvcnRzLmVuY29kZVhNTCA9IGV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5kZWNvZGVTdHJpY3QgPSBleHBvcnRzLmRlY29kZSA9IGV4cG9ydHMuRW5jb2RpbmdNb2RlID0gZXhwb3J0cy5FbnRpdHlMZXZlbCA9IHZvaWQgMDtcbnZhciBkZWNvZGVfanNfMSA9IHJlcXVpcmUoXCIuL2RlY29kZS5qc1wiKTtcbnZhciBlbmNvZGVfanNfMSA9IHJlcXVpcmUoXCIuL2VuY29kZS5qc1wiKTtcbnZhciBlc2NhcGVfanNfMSA9IHJlcXVpcmUoXCIuL2VzY2FwZS5qc1wiKTtcbi8qKiBUaGUgbGV2ZWwgb2YgZW50aXRpZXMgdG8gc3VwcG9ydC4gKi9cbnZhciBFbnRpdHlMZXZlbDtcbihmdW5jdGlvbiAoRW50aXR5TGV2ZWwpIHtcbiAgICAvKiogU3VwcG9ydCBvbmx5IFhNTCBlbnRpdGllcy4gKi9cbiAgICBFbnRpdHlMZXZlbFtFbnRpdHlMZXZlbFtcIlhNTFwiXSA9IDBdID0gXCJYTUxcIjtcbiAgICAvKiogU3VwcG9ydCBIVE1MIGVudGl0aWVzLCB3aGljaCBhcmUgYSBzdXBlcnNldCBvZiBYTUwgZW50aXRpZXMuICovXG4gICAgRW50aXR5TGV2ZWxbRW50aXR5TGV2ZWxbXCJIVE1MXCJdID0gMV0gPSBcIkhUTUxcIjtcbn0pKEVudGl0eUxldmVsID0gZXhwb3J0cy5FbnRpdHlMZXZlbCB8fCAoZXhwb3J0cy5FbnRpdHlMZXZlbCA9IHt9KSk7XG52YXIgRW5jb2RpbmdNb2RlO1xuKGZ1bmN0aW9uIChFbmNvZGluZ01vZGUpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgb3V0cHV0IGlzIFVURi04IGVuY29kZWQuIE9ubHkgY2hhcmFjdGVycyB0aGF0IG5lZWQgZXNjYXBpbmcgd2l0aGluXG4gICAgICogWE1MIHdpbGwgYmUgZXNjYXBlZC5cbiAgICAgKi9cbiAgICBFbmNvZGluZ01vZGVbRW5jb2RpbmdNb2RlW1wiVVRGOFwiXSA9IDBdID0gXCJVVEY4XCI7XG4gICAgLyoqXG4gICAgICogVGhlIG91dHB1dCBjb25zaXN0cyBvbmx5IG9mIEFTQ0lJIGNoYXJhY3RlcnMuIENoYXJhY3RlcnMgdGhhdCBuZWVkXG4gICAgICogZXNjYXBpbmcgd2l0aGluIEhUTUwsIGFuZCBjaGFyYWN0ZXJzIHRoYXQgYXJlbid0IEFTQ0lJIGNoYXJhY3RlcnMgd2lsbFxuICAgICAqIGJlIGVzY2FwZWQuXG4gICAgICovXG4gICAgRW5jb2RpbmdNb2RlW0VuY29kaW5nTW9kZVtcIkFTQ0lJXCJdID0gMV0gPSBcIkFTQ0lJXCI7XG4gICAgLyoqXG4gICAgICogRW5jb2RlIGFsbCBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSBhbiBlcXVpdmFsZW50IGVudGl0eSwgYXMgd2VsbCBhcyBhbGxcbiAgICAgKiBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBBU0NJSSBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIEVuY29kaW5nTW9kZVtFbmNvZGluZ01vZGVbXCJFeHRlbnNpdmVcIl0gPSAyXSA9IFwiRXh0ZW5zaXZlXCI7XG4gICAgLyoqXG4gICAgICogRW5jb2RlIGFsbCBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSB0byBiZSBlc2NhcGVkIGluIEhUTUwgYXR0cmlidXRlcyxcbiAgICAgKiBmb2xsb3dpbmcge0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNlc2NhcGluZ1N0cmluZ30uXG4gICAgICovXG4gICAgRW5jb2RpbmdNb2RlW0VuY29kaW5nTW9kZVtcIkF0dHJpYnV0ZVwiXSA9IDNdID0gXCJBdHRyaWJ1dGVcIjtcbiAgICAvKipcbiAgICAgKiBFbmNvZGUgYWxsIGNoYXJhY3RlcnMgdGhhdCBoYXZlIHRvIGJlIGVzY2FwZWQgaW4gSFRNTCB0ZXh0LFxuICAgICAqIGZvbGxvd2luZyB7QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI2VzY2FwaW5nU3RyaW5nfS5cbiAgICAgKi9cbiAgICBFbmNvZGluZ01vZGVbRW5jb2RpbmdNb2RlW1wiVGV4dFwiXSA9IDRdID0gXCJUZXh0XCI7XG59KShFbmNvZGluZ01vZGUgPSBleHBvcnRzLkVuY29kaW5nTW9kZSB8fCAoZXhwb3J0cy5FbmNvZGluZ01vZGUgPSB7fSkpO1xuLyoqXG4gKiBEZWNvZGVzIGEgc3RyaW5nIHdpdGggZW50aXRpZXMuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGRlY29kZS5cbiAqIEBwYXJhbSBvcHRpb25zIERlY29kaW5nIG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShkYXRhLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0gRW50aXR5TGV2ZWwuWE1MOyB9XG4gICAgdmFyIGxldmVsID0gdHlwZW9mIG9wdGlvbnMgPT09IFwibnVtYmVyXCIgPyBvcHRpb25zIDogb3B0aW9ucy5sZXZlbDtcbiAgICBpZiAobGV2ZWwgPT09IEVudGl0eUxldmVsLkhUTUwpIHtcbiAgICAgICAgdmFyIG1vZGUgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMubW9kZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuICgwLCBkZWNvZGVfanNfMS5kZWNvZGVIVE1MKShkYXRhLCBtb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBkZWNvZGVfanNfMS5kZWNvZGVYTUwpKGRhdGEpO1xufVxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4vKipcbiAqIERlY29kZXMgYSBzdHJpbmcgd2l0aCBlbnRpdGllcy4gRG9lcyBub3QgYWxsb3cgbWlzc2luZyB0cmFpbGluZyBzZW1pY29sb25zIGZvciBlbnRpdGllcy5cbiAqXG4gKiBAcGFyYW0gZGF0YSBTdHJpbmcgdG8gZGVjb2RlLlxuICogQHBhcmFtIG9wdGlvbnMgRGVjb2Rpbmcgb3B0aW9ucy5cbiAqIEBkZXByZWNhdGVkIFVzZSBgZGVjb2RlYCB3aXRoIHRoZSBgbW9kZWAgc2V0IHRvIGBTdHJpY3RgLlxuICovXG5mdW5jdGlvbiBkZWNvZGVTdHJpY3QoZGF0YSwgb3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSBFbnRpdHlMZXZlbC5YTUw7IH1cbiAgICB2YXIgb3B0cyA9IHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiID8geyBsZXZlbDogb3B0aW9ucyB9IDogb3B0aW9ucztcbiAgICAoX2EgPSBvcHRzLm1vZGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChvcHRzLm1vZGUgPSBkZWNvZGVfanNfMS5EZWNvZGluZ01vZGUuU3RyaWN0KTtcbiAgICByZXR1cm4gZGVjb2RlKGRhdGEsIG9wdHMpO1xufVxuZXhwb3J0cy5kZWNvZGVTdHJpY3QgPSBkZWNvZGVTdHJpY3Q7XG4vKipcbiAqIEVuY29kZXMgYSBzdHJpbmcgd2l0aCBlbnRpdGllcy5cbiAqXG4gKiBAcGFyYW0gZGF0YSBTdHJpbmcgdG8gZW5jb2RlLlxuICogQHBhcmFtIG9wdGlvbnMgRW5jb2Rpbmcgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKGRhdGEsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSBFbnRpdHlMZXZlbC5YTUw7IH1cbiAgICB2YXIgb3B0cyA9IHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiID8geyBsZXZlbDogb3B0aW9ucyB9IDogb3B0aW9ucztcbiAgICAvLyBNb2RlIGBVVEY4YCBqdXN0IGVzY2FwZXMgWE1MIGVudGl0aWVzXG4gICAgaWYgKG9wdHMubW9kZSA9PT0gRW5jb2RpbmdNb2RlLlVURjgpXG4gICAgICAgIHJldHVybiAoMCwgZXNjYXBlX2pzXzEuZXNjYXBlVVRGOCkoZGF0YSk7XG4gICAgaWYgKG9wdHMubW9kZSA9PT0gRW5jb2RpbmdNb2RlLkF0dHJpYnV0ZSlcbiAgICAgICAgcmV0dXJuICgwLCBlc2NhcGVfanNfMS5lc2NhcGVBdHRyaWJ1dGUpKGRhdGEpO1xuICAgIGlmIChvcHRzLm1vZGUgPT09IEVuY29kaW5nTW9kZS5UZXh0KVxuICAgICAgICByZXR1cm4gKDAsIGVzY2FwZV9qc18xLmVzY2FwZVRleHQpKGRhdGEpO1xuICAgIGlmIChvcHRzLmxldmVsID09PSBFbnRpdHlMZXZlbC5IVE1MKSB7XG4gICAgICAgIGlmIChvcHRzLm1vZGUgPT09IEVuY29kaW5nTW9kZS5BU0NJSSkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBlbmNvZGVfanNfMS5lbmNvZGVOb25Bc2NpaUhUTUwpKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgZW5jb2RlX2pzXzEuZW5jb2RlSFRNTCkoZGF0YSk7XG4gICAgfVxuICAgIC8vIEFTQ0lJIGFuZCBFeHRlbnNpdmUgYXJlIGVxdWl2YWxlbnRcbiAgICByZXR1cm4gKDAsIGVzY2FwZV9qc18xLmVuY29kZVhNTCkoZGF0YSk7XG59XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbnZhciBlc2NhcGVfanNfMiA9IHJlcXVpcmUoXCIuL2VzY2FwZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZVhNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXNjYXBlX2pzXzIuZW5jb2RlWE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXNjYXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlc2NhcGVfanNfMi5lc2NhcGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlc2NhcGVVVEY4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlc2NhcGVfanNfMi5lc2NhcGVVVEY4OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXNjYXBlQXR0cmlidXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlc2NhcGVfanNfMi5lc2NhcGVBdHRyaWJ1dGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlc2NhcGVUZXh0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlc2NhcGVfanNfMi5lc2NhcGVUZXh0OyB9IH0pO1xudmFyIGVuY29kZV9qc18yID0gcmVxdWlyZShcIi4vZW5jb2RlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlSFRNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlX2pzXzIuZW5jb2RlSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZU5vbkFzY2lpSFRNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlX2pzXzIuZW5jb2RlTm9uQXNjaWlIVE1MOyB9IH0pO1xuLy8gTGVnYWN5IGFsaWFzZXMgKGRlcHJlY2F0ZWQpXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVIVE1MNFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlX2pzXzIuZW5jb2RlSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZUhUTUw1XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVfanNfMi5lbmNvZGVIVE1MOyB9IH0pO1xudmFyIGRlY29kZV9qc18yID0gcmVxdWlyZShcIi4vZGVjb2RlLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRW50aXR5RGVjb2RlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2pzXzIuRW50aXR5RGVjb2RlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlY29kaW5nTW9kZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2pzXzIuRGVjb2RpbmdNb2RlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlWE1MXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfanNfMi5kZWNvZGVYTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfanNfMi5kZWNvZGVIVE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTFN0cmljdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2pzXzIuZGVjb2RlSFRNTFN0cmljdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUxBdHRyaWJ1dGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV9qc18yLmRlY29kZUhUTUxBdHRyaWJ1dGU7IH0gfSk7XG4vLyBMZWdhY3kgYWxpYXNlcyAoZGVwcmVjYXRlZClcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUw0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfanNfMi5kZWNvZGVIVE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTDVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV9qc18yLmRlY29kZUhUTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MNFN0cmljdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2pzXzIuZGVjb2RlSFRNTFN0cmljdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUw1U3RyaWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfanNfMi5kZWNvZGVIVE1MU3RyaWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlWE1MU3RyaWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfanNfMi5kZWNvZGVYTUw7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGVYTUxTdHJpY3QiLCJkZWNvZGVIVE1MNVN0cmljdCIsImRlY29kZUhUTUw0U3RyaWN0IiwiZGVjb2RlSFRNTDUiLCJkZWNvZGVIVE1MNCIsImRlY29kZUhUTUxBdHRyaWJ1dGUiLCJkZWNvZGVIVE1MU3RyaWN0IiwiZGVjb2RlSFRNTCIsImRlY29kZVhNTCIsIkRlY29kaW5nTW9kZSIsIkVudGl0eURlY29kZXIiLCJlbmNvZGVIVE1MNSIsImVuY29kZUhUTUw0IiwiZW5jb2RlTm9uQXNjaWlIVE1MIiwiZW5jb2RlSFRNTCIsImVzY2FwZVRleHQiLCJlc2NhcGVBdHRyaWJ1dGUiLCJlc2NhcGVVVEY4IiwiZXNjYXBlIiwiZW5jb2RlWE1MIiwiZW5jb2RlIiwiZGVjb2RlU3RyaWN0IiwiZGVjb2RlIiwiRW5jb2RpbmdNb2RlIiwiRW50aXR5TGV2ZWwiLCJkZWNvZGVfanNfMSIsInJlcXVpcmUiLCJlbmNvZGVfanNfMSIsImVzY2FwZV9qc18xIiwiZGF0YSIsIm9wdGlvbnMiLCJYTUwiLCJsZXZlbCIsIkhUTUwiLCJtb2RlIiwidW5kZWZpbmVkIiwiX2EiLCJvcHRzIiwiU3RyaWN0IiwiVVRGOCIsIkF0dHJpYnV0ZSIsIlRleHQiLCJBU0NJSSIsImVzY2FwZV9qc18yIiwiZW51bWVyYWJsZSIsImdldCIsImVuY29kZV9qc18yIiwiZGVjb2RlX2pzXzIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/entities/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/htmlparser2/lib/Parser.js":
/*!************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Parser.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Parser = void 0;\nvar Tokenizer_js_1 = __importStar(__webpack_require__(/*! ./Tokenizer.js */ \"(app-pages-browser)/./node_modules/htmlparser2/lib/Tokenizer.js\"));\nvar decode_js_1 = __webpack_require__(/*! entities/lib/decode.js */ \"(app-pages-browser)/./node_modules/entities/lib/decode.js\");\nvar formTags = new Set([\n    \"input\",\n    \"option\",\n    \"optgroup\",\n    \"select\",\n    \"button\",\n    \"datalist\",\n    \"textarea\"\n]);\nvar pTag = new Set([\n    \"p\"\n]);\nvar tableSectionTags = new Set([\n    \"thead\",\n    \"tbody\"\n]);\nvar ddtTags = new Set([\n    \"dd\",\n    \"dt\"\n]);\nvar rtpTags = new Set([\n    \"rt\",\n    \"rp\"\n]);\nvar openImpliesClose = new Map([\n    [\n        \"tr\",\n        new Set([\n            \"tr\",\n            \"th\",\n            \"td\"\n        ])\n    ],\n    [\n        \"th\",\n        new Set([\n            \"th\"\n        ])\n    ],\n    [\n        \"td\",\n        new Set([\n            \"thead\",\n            \"th\",\n            \"td\"\n        ])\n    ],\n    [\n        \"body\",\n        new Set([\n            \"head\",\n            \"link\",\n            \"script\"\n        ])\n    ],\n    [\n        \"li\",\n        new Set([\n            \"li\"\n        ])\n    ],\n    [\n        \"p\",\n        pTag\n    ],\n    [\n        \"h1\",\n        pTag\n    ],\n    [\n        \"h2\",\n        pTag\n    ],\n    [\n        \"h3\",\n        pTag\n    ],\n    [\n        \"h4\",\n        pTag\n    ],\n    [\n        \"h5\",\n        pTag\n    ],\n    [\n        \"h6\",\n        pTag\n    ],\n    [\n        \"select\",\n        formTags\n    ],\n    [\n        \"input\",\n        formTags\n    ],\n    [\n        \"output\",\n        formTags\n    ],\n    [\n        \"button\",\n        formTags\n    ],\n    [\n        \"datalist\",\n        formTags\n    ],\n    [\n        \"textarea\",\n        formTags\n    ],\n    [\n        \"option\",\n        new Set([\n            \"option\"\n        ])\n    ],\n    [\n        \"optgroup\",\n        new Set([\n            \"optgroup\",\n            \"option\"\n        ])\n    ],\n    [\n        \"dd\",\n        ddtTags\n    ],\n    [\n        \"dt\",\n        ddtTags\n    ],\n    [\n        \"address\",\n        pTag\n    ],\n    [\n        \"article\",\n        pTag\n    ],\n    [\n        \"aside\",\n        pTag\n    ],\n    [\n        \"blockquote\",\n        pTag\n    ],\n    [\n        \"details\",\n        pTag\n    ],\n    [\n        \"div\",\n        pTag\n    ],\n    [\n        \"dl\",\n        pTag\n    ],\n    [\n        \"fieldset\",\n        pTag\n    ],\n    [\n        \"figcaption\",\n        pTag\n    ],\n    [\n        \"figure\",\n        pTag\n    ],\n    [\n        \"footer\",\n        pTag\n    ],\n    [\n        \"form\",\n        pTag\n    ],\n    [\n        \"header\",\n        pTag\n    ],\n    [\n        \"hr\",\n        pTag\n    ],\n    [\n        \"main\",\n        pTag\n    ],\n    [\n        \"nav\",\n        pTag\n    ],\n    [\n        \"ol\",\n        pTag\n    ],\n    [\n        \"pre\",\n        pTag\n    ],\n    [\n        \"section\",\n        pTag\n    ],\n    [\n        \"table\",\n        pTag\n    ],\n    [\n        \"ul\",\n        pTag\n    ],\n    [\n        \"rt\",\n        rtpTags\n    ],\n    [\n        \"rp\",\n        rtpTags\n    ],\n    [\n        \"tbody\",\n        tableSectionTags\n    ],\n    [\n        \"tfoot\",\n        tableSectionTags\n    ]\n]);\nvar voidElements = new Set([\n    \"area\",\n    \"base\",\n    \"basefont\",\n    \"br\",\n    \"col\",\n    \"command\",\n    \"embed\",\n    \"frame\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"isindex\",\n    \"keygen\",\n    \"link\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n]);\nvar foreignContextElements = new Set([\n    \"math\",\n    \"svg\"\n]);\nvar htmlIntegrationElements = new Set([\n    \"mi\",\n    \"mo\",\n    \"mn\",\n    \"ms\",\n    \"mtext\",\n    \"annotation-xml\",\n    \"foreignobject\",\n    \"desc\",\n    \"title\"\n]);\nvar reNameEnd = /\\s|\\//;\nvar Parser = /** @class */ function() {\n    function Parser(cbs, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _a, _b, _c, _d, _e;\n        this.options = options;\n        /** The start index of the last event. */ this.startIndex = 0;\n        /** The end index of the last event. */ this.endIndex = 0;\n        /**\n         * Store the start index of the current open tag,\n         * so we can update the start index for attributes.\n         */ this.openTagStart = 0;\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribvalue = \"\";\n        this.attribs = null;\n        this.stack = [];\n        this.foreignContext = [];\n        this.buffers = [];\n        this.bufferOffset = 0;\n        /** The index of the last written buffer. Used when resuming after a `pause()`. */ this.writeIndex = 0;\n        /** Indicates whether the parser has finished running / `.end` has been called. */ this.ended = false;\n        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};\n        this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;\n        this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;\n        this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_js_1.default)(this.options, this);\n        (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);\n    }\n    // Tokenizer event handlers\n    /** @internal */ Parser.prototype.ontext = function(start, endIndex) {\n        var _a, _b;\n        var data = this.getSlice(start, endIndex);\n        this.endIndex = endIndex - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);\n        this.startIndex = endIndex;\n    };\n    /** @internal */ Parser.prototype.ontextentity = function(cp) {\n        var _a, _b;\n        /*\n         * Entities can be emitted on the character, or directly after.\n         * We use the section start here to get accurate indices.\n         */ var index = this.tokenizer.getSectionStart();\n        this.endIndex = index - 1;\n        (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_js_1.fromCodePoint)(cp));\n        this.startIndex = index;\n    };\n    Parser.prototype.isVoidElement = function(name) {\n        return !this.options.xmlMode && voidElements.has(name);\n    };\n    /** @internal */ Parser.prototype.onopentagname = function(start, endIndex) {\n        this.endIndex = endIndex;\n        var name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        this.emitOpenTag(name);\n    };\n    Parser.prototype.emitOpenTag = function(name) {\n        var _a, _b, _c, _d;\n        this.openTagStart = this.startIndex;\n        this.tagname = name;\n        var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);\n        if (impliesClose) {\n            while(this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])){\n                var element = this.stack.pop();\n                (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);\n            }\n        }\n        if (!this.isVoidElement(name)) {\n            this.stack.push(name);\n            if (foreignContextElements.has(name)) {\n                this.foreignContext.push(true);\n            } else if (htmlIntegrationElements.has(name)) {\n                this.foreignContext.push(false);\n            }\n        }\n        (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);\n        if (this.cbs.onopentag) this.attribs = {};\n    };\n    Parser.prototype.endOpenTag = function(isImplied) {\n        var _a, _b;\n        this.startIndex = this.openTagStart;\n        if (this.attribs) {\n            (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);\n            this.attribs = null;\n        }\n        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {\n            this.cbs.onclosetag(this.tagname, true);\n        }\n        this.tagname = \"\";\n    };\n    /** @internal */ Parser.prototype.onopentagend = function(endIndex) {\n        this.endIndex = endIndex;\n        this.endOpenTag(false);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onclosetag = function(start, endIndex) {\n        var _a, _b, _c, _d, _e, _f;\n        this.endIndex = endIndex;\n        var name = this.getSlice(start, endIndex);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {\n            this.foreignContext.pop();\n        }\n        if (!this.isVoidElement(name)) {\n            var pos = this.stack.lastIndexOf(name);\n            if (pos !== -1) {\n                if (this.cbs.onclosetag) {\n                    var count = this.stack.length - pos;\n                    while(count--){\n                        // We know the stack has sufficient elements.\n                        this.cbs.onclosetag(this.stack.pop(), count !== 0);\n                    }\n                } else this.stack.length = pos;\n            } else if (!this.options.xmlMode && name === \"p\") {\n                // Implicit open before close\n                this.emitOpenTag(\"p\");\n                this.closeCurrentTag(true);\n            }\n        } else if (!this.options.xmlMode && name === \"br\") {\n            // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.\n            (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, \"br\");\n            (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, \"br\", {}, true);\n            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, \"br\", false);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onselfclosingtag = function(endIndex) {\n        this.endIndex = endIndex;\n        if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {\n            this.closeCurrentTag(false);\n            // Set `startIndex` for next node\n            this.startIndex = endIndex + 1;\n        } else {\n            // Ignore the fact that the tag is self-closing.\n            this.onopentagend(endIndex);\n        }\n    };\n    Parser.prototype.closeCurrentTag = function(isOpenImplied) {\n        var _a, _b;\n        var name = this.tagname;\n        this.endOpenTag(isOpenImplied);\n        // Self-closing tags will be on the top of the stack\n        if (this.stack[this.stack.length - 1] === name) {\n            // If the opening tag isn't implied, the closing tag has to be implied.\n            (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);\n            this.stack.pop();\n        }\n    };\n    /** @internal */ Parser.prototype.onattribname = function(start, endIndex) {\n        this.startIndex = start;\n        var name = this.getSlice(start, endIndex);\n        this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;\n    };\n    /** @internal */ Parser.prototype.onattribdata = function(start, endIndex) {\n        this.attribvalue += this.getSlice(start, endIndex);\n    };\n    /** @internal */ Parser.prototype.onattribentity = function(cp) {\n        this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);\n    };\n    /** @internal */ Parser.prototype.onattribend = function(quote, endIndex) {\n        var _a, _b;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '\"' : quote === Tokenizer_js_1.QuoteType.Single ? \"'\" : quote === Tokenizer_js_1.QuoteType.NoValue ? undefined : null);\n        if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {\n            this.attribs[this.attribname] = this.attribvalue;\n        }\n        this.attribvalue = \"\";\n    };\n    Parser.prototype.getInstructionName = function(value) {\n        var index = value.search(reNameEnd);\n        var name = index < 0 ? value : value.substr(0, index);\n        if (this.lowerCaseTagNames) {\n            name = name.toLowerCase();\n        }\n        return name;\n    };\n    /** @internal */ Parser.prototype.ondeclaration = function(start, endIndex) {\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            var name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"!\".concat(name), \"!\".concat(value));\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onprocessinginstruction = function(start, endIndex) {\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex);\n        if (this.cbs.onprocessinginstruction) {\n            var name = this.getInstructionName(value);\n            this.cbs.onprocessinginstruction(\"?\".concat(name), \"?\".concat(value));\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.oncomment = function(start, endIndex, offset) {\n        var _a, _b, _c, _d;\n        this.endIndex = endIndex;\n        (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));\n        (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.oncdata = function(start, endIndex, offset) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        this.endIndex = endIndex;\n        var value = this.getSlice(start, endIndex - offset);\n        if (this.options.xmlMode || this.options.recognizeCDATA) {\n            (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);\n            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);\n        } else {\n            (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, \"[CDATA[\".concat(value, \"]]\"));\n            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);\n        }\n        // Set `startIndex` for next node\n        this.startIndex = endIndex + 1;\n    };\n    /** @internal */ Parser.prototype.onend = function() {\n        var _a, _b;\n        if (this.cbs.onclosetag) {\n            // Set the end index for all remaining tags\n            this.endIndex = this.startIndex;\n            for(var index = this.stack.length; index > 0; this.cbs.onclosetag(this.stack[--index], true));\n        }\n        (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    /**\n     * Resets the parser to a blank state, ready to parse a new HTML document\n     */ Parser.prototype.reset = function() {\n        var _a, _b, _c, _d;\n        (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.tokenizer.reset();\n        this.tagname = \"\";\n        this.attribname = \"\";\n        this.attribs = null;\n        this.stack.length = 0;\n        this.startIndex = 0;\n        this.endIndex = 0;\n        (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);\n        this.buffers.length = 0;\n        this.bufferOffset = 0;\n        this.writeIndex = 0;\n        this.ended = false;\n    };\n    /**\n     * Resets the parser, then parses a complete document and\n     * pushes it to the handler.\n     *\n     * @param data Document to parse.\n     */ Parser.prototype.parseComplete = function(data) {\n        this.reset();\n        this.end(data);\n    };\n    Parser.prototype.getSlice = function(start, end) {\n        while(start - this.bufferOffset >= this.buffers[0].length){\n            this.shiftBuffer();\n        }\n        var slice = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);\n        while(end - this.bufferOffset > this.buffers[0].length){\n            this.shiftBuffer();\n            slice += this.buffers[0].slice(0, end - this.bufferOffset);\n        }\n        return slice;\n    };\n    Parser.prototype.shiftBuffer = function() {\n        this.bufferOffset += this.buffers[0].length;\n        this.writeIndex--;\n        this.buffers.shift();\n    };\n    /**\n     * Parses a chunk of data and calls the corresponding callbacks.\n     *\n     * @param chunk Chunk to parse.\n     */ Parser.prototype.write = function(chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".write() after done!\"));\n            return;\n        }\n        this.buffers.push(chunk);\n        if (this.tokenizer.running) {\n            this.tokenizer.write(chunk);\n            this.writeIndex++;\n        }\n    };\n    /**\n     * Parses the end of the buffer and clears the stack, calls onend.\n     *\n     * @param chunk Optional final chunk to parse.\n     */ Parser.prototype.end = function(chunk) {\n        var _a, _b;\n        if (this.ended) {\n            (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(\".end() after done!\"));\n            return;\n        }\n        if (chunk) this.write(chunk);\n        this.ended = true;\n        this.tokenizer.end();\n    };\n    /**\n     * Pauses parsing. The parser won't emit events until `resume` is called.\n     */ Parser.prototype.pause = function() {\n        this.tokenizer.pause();\n    };\n    /**\n     * Resumes parsing after `pause` was called.\n     */ Parser.prototype.resume = function() {\n        this.tokenizer.resume();\n        while(this.tokenizer.running && this.writeIndex < this.buffers.length){\n            this.tokenizer.write(this.buffers[this.writeIndex++]);\n        }\n        if (this.ended) this.tokenizer.end();\n    };\n    /**\n     * Alias of `write`, for backwards compatibility.\n     *\n     * @param chunk Chunk to parse.\n     * @deprecated\n     */ Parser.prototype.parseChunk = function(chunk) {\n        this.write(chunk);\n    };\n    /**\n     * Alias of `end`, for backwards compatibility.\n     *\n     * @param chunk Optional final chunk to parse.\n     * @deprecated\n     */ Parser.prototype.done = function(chunk) {\n        this.end(chunk);\n    };\n    return Parser;\n}();\nexports.Parser = Parser; //# sourceMappingURL=Parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/htmlparser2/lib/Parser.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/htmlparser2/lib/Tokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Tokenizer.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.QuoteType = void 0;\nvar decode_js_1 = __webpack_require__(/*! entities/lib/decode.js */ \"(app-pages-browser)/./node_modules/entities/lib/decode.js\");\nvar CharCodes;\n(function(CharCodes) {\n    CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n    CharCodes[CharCodes[\"NewLine\"] = 10] = \"NewLine\";\n    CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n    CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n    CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n    CharCodes[CharCodes[\"ExclamationMark\"] = 33] = \"ExclamationMark\";\n    CharCodes[CharCodes[\"Number\"] = 35] = \"Number\";\n    CharCodes[CharCodes[\"Amp\"] = 38] = \"Amp\";\n    CharCodes[CharCodes[\"SingleQuote\"] = 39] = \"SingleQuote\";\n    CharCodes[CharCodes[\"DoubleQuote\"] = 34] = \"DoubleQuote\";\n    CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n    CharCodes[CharCodes[\"Slash\"] = 47] = \"Slash\";\n    CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n    CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n    CharCodes[CharCodes[\"Semi\"] = 59] = \"Semi\";\n    CharCodes[CharCodes[\"Lt\"] = 60] = \"Lt\";\n    CharCodes[CharCodes[\"Eq\"] = 61] = \"Eq\";\n    CharCodes[CharCodes[\"Gt\"] = 62] = \"Gt\";\n    CharCodes[CharCodes[\"Questionmark\"] = 63] = \"Questionmark\";\n    CharCodes[CharCodes[\"UpperA\"] = 65] = \"UpperA\";\n    CharCodes[CharCodes[\"LowerA\"] = 97] = \"LowerA\";\n    CharCodes[CharCodes[\"UpperF\"] = 70] = \"UpperF\";\n    CharCodes[CharCodes[\"LowerF\"] = 102] = \"LowerF\";\n    CharCodes[CharCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n    CharCodes[CharCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n    CharCodes[CharCodes[\"LowerX\"] = 120] = \"LowerX\";\n    CharCodes[CharCodes[\"OpeningSquareBracket\"] = 91] = \"OpeningSquareBracket\";\n})(CharCodes || (CharCodes = {}));\n/** All the states the tokenizer can be in. */ var State;\n(function(State) {\n    State[State[\"Text\"] = 1] = \"Text\";\n    State[State[\"BeforeTagName\"] = 2] = \"BeforeTagName\";\n    State[State[\"InTagName\"] = 3] = \"InTagName\";\n    State[State[\"InSelfClosingTag\"] = 4] = \"InSelfClosingTag\";\n    State[State[\"BeforeClosingTagName\"] = 5] = \"BeforeClosingTagName\";\n    State[State[\"InClosingTagName\"] = 6] = \"InClosingTagName\";\n    State[State[\"AfterClosingTagName\"] = 7] = \"AfterClosingTagName\";\n    // Attributes\n    State[State[\"BeforeAttributeName\"] = 8] = \"BeforeAttributeName\";\n    State[State[\"InAttributeName\"] = 9] = \"InAttributeName\";\n    State[State[\"AfterAttributeName\"] = 10] = \"AfterAttributeName\";\n    State[State[\"BeforeAttributeValue\"] = 11] = \"BeforeAttributeValue\";\n    State[State[\"InAttributeValueDq\"] = 12] = \"InAttributeValueDq\";\n    State[State[\"InAttributeValueSq\"] = 13] = \"InAttributeValueSq\";\n    State[State[\"InAttributeValueNq\"] = 14] = \"InAttributeValueNq\";\n    // Declarations\n    State[State[\"BeforeDeclaration\"] = 15] = \"BeforeDeclaration\";\n    State[State[\"InDeclaration\"] = 16] = \"InDeclaration\";\n    // Processing instructions\n    State[State[\"InProcessingInstruction\"] = 17] = \"InProcessingInstruction\";\n    // Comments & CDATA\n    State[State[\"BeforeComment\"] = 18] = \"BeforeComment\";\n    State[State[\"CDATASequence\"] = 19] = \"CDATASequence\";\n    State[State[\"InSpecialComment\"] = 20] = \"InSpecialComment\";\n    State[State[\"InCommentLike\"] = 21] = \"InCommentLike\";\n    // Special tags\n    State[State[\"BeforeSpecialS\"] = 22] = \"BeforeSpecialS\";\n    State[State[\"SpecialStartSequence\"] = 23] = \"SpecialStartSequence\";\n    State[State[\"InSpecialTag\"] = 24] = \"InSpecialTag\";\n    State[State[\"BeforeEntity\"] = 25] = \"BeforeEntity\";\n    State[State[\"BeforeNumericEntity\"] = 26] = \"BeforeNumericEntity\";\n    State[State[\"InNamedEntity\"] = 27] = \"InNamedEntity\";\n    State[State[\"InNumericEntity\"] = 28] = \"InNumericEntity\";\n    State[State[\"InHexEntity\"] = 29] = \"InHexEntity\";\n})(State || (State = {}));\nfunction isWhitespace(c) {\n    return c === CharCodes.Space || c === CharCodes.NewLine || c === CharCodes.Tab || c === CharCodes.FormFeed || c === CharCodes.CarriageReturn;\n}\nfunction isEndOfTagSection(c) {\n    return c === CharCodes.Slash || c === CharCodes.Gt || isWhitespace(c);\n}\nfunction isNumber(c) {\n    return c >= CharCodes.Zero && c <= CharCodes.Nine;\n}\nfunction isASCIIAlpha(c) {\n    return c >= CharCodes.LowerA && c <= CharCodes.LowerZ || c >= CharCodes.UpperA && c <= CharCodes.UpperZ;\n}\nfunction isHexDigit(c) {\n    return c >= CharCodes.UpperA && c <= CharCodes.UpperF || c >= CharCodes.LowerA && c <= CharCodes.LowerF;\n}\nvar QuoteType;\n(function(QuoteType) {\n    QuoteType[QuoteType[\"NoValue\"] = 0] = \"NoValue\";\n    QuoteType[QuoteType[\"Unquoted\"] = 1] = \"Unquoted\";\n    QuoteType[QuoteType[\"Single\"] = 2] = \"Single\";\n    QuoteType[QuoteType[\"Double\"] = 3] = \"Double\";\n})(QuoteType = exports.QuoteType || (exports.QuoteType = {}));\n/**\n * Sequences used to match longer strings.\n *\n * We don't have `Script`, `Style`, or `Title` here. Instead, we re-use the *End\n * sequences with an increased offset.\n */ var Sequences = {\n    Cdata: new Uint8Array([\n        0x43,\n        0x44,\n        0x41,\n        0x54,\n        0x41,\n        0x5b\n    ]),\n    CdataEnd: new Uint8Array([\n        0x5d,\n        0x5d,\n        0x3e\n    ]),\n    CommentEnd: new Uint8Array([\n        0x2d,\n        0x2d,\n        0x3e\n    ]),\n    ScriptEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x73,\n        0x63,\n        0x72,\n        0x69,\n        0x70,\n        0x74\n    ]),\n    StyleEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x73,\n        0x74,\n        0x79,\n        0x6c,\n        0x65\n    ]),\n    TitleEnd: new Uint8Array([\n        0x3c,\n        0x2f,\n        0x74,\n        0x69,\n        0x74,\n        0x6c,\n        0x65\n    ])\n};\nvar Tokenizer = /** @class */ function() {\n    function Tokenizer(_a, cbs) {\n        var _b = _a.xmlMode, xmlMode = _b === void 0 ? false : _b, _c = _a.decodeEntities, decodeEntities = _c === void 0 ? true : _c;\n        this.cbs = cbs;\n        /** The current state the tokenizer is in. */ this.state = State.Text;\n        /** The read buffer. */ this.buffer = \"\";\n        /** The beginning of the section that is currently being read. */ this.sectionStart = 0;\n        /** The index within the buffer that we are currently looking at. */ this.index = 0;\n        /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */ this.baseState = State.Text;\n        /** For special parsing behavior inside of script and style tags. */ this.isSpecial = false;\n        /** Indicates whether the tokenizer has been paused. */ this.running = true;\n        /** The offset of the current buffer. */ this.offset = 0;\n        this.currentSequence = undefined;\n        this.sequenceIndex = 0;\n        this.trieIndex = 0;\n        this.trieCurrent = 0;\n        /** For named entities, the index of the value. For numeric entities, the code point. */ this.entityResult = 0;\n        this.entityExcess = 0;\n        this.xmlMode = xmlMode;\n        this.decodeEntities = decodeEntities;\n        this.entityTrie = xmlMode ? decode_js_1.xmlDecodeTree : decode_js_1.htmlDecodeTree;\n    }\n    Tokenizer.prototype.reset = function() {\n        this.state = State.Text;\n        this.buffer = \"\";\n        this.sectionStart = 0;\n        this.index = 0;\n        this.baseState = State.Text;\n        this.currentSequence = undefined;\n        this.running = true;\n        this.offset = 0;\n    };\n    Tokenizer.prototype.write = function(chunk) {\n        this.offset += this.buffer.length;\n        this.buffer = chunk;\n        this.parse();\n    };\n    Tokenizer.prototype.end = function() {\n        if (this.running) this.finish();\n    };\n    Tokenizer.prototype.pause = function() {\n        this.running = false;\n    };\n    Tokenizer.prototype.resume = function() {\n        this.running = true;\n        if (this.index < this.buffer.length + this.offset) {\n            this.parse();\n        }\n    };\n    /**\n     * The current index within all of the written data.\n     */ Tokenizer.prototype.getIndex = function() {\n        return this.index;\n    };\n    /**\n     * The start of the current section.\n     */ Tokenizer.prototype.getSectionStart = function() {\n        return this.sectionStart;\n    };\n    Tokenizer.prototype.stateText = function(c) {\n        if (c === CharCodes.Lt || !this.decodeEntities && this.fastForwardTo(CharCodes.Lt)) {\n            if (this.index > this.sectionStart) {\n                this.cbs.ontext(this.sectionStart, this.index);\n            }\n            this.state = State.BeforeTagName;\n            this.sectionStart = this.index;\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateSpecialStartSequence = function(c) {\n        var isEnd = this.sequenceIndex === this.currentSequence.length;\n        var isMatch = isEnd ? isEndOfTagSection(c) : (c | 0x20) === this.currentSequence[this.sequenceIndex];\n        if (!isMatch) {\n            this.isSpecial = false;\n        } else if (!isEnd) {\n            this.sequenceIndex++;\n            return;\n        }\n        this.sequenceIndex = 0;\n        this.state = State.InTagName;\n        this.stateInTagName(c);\n    };\n    /** Look for an end tag. For <title> tags, also decode entities. */ Tokenizer.prototype.stateInSpecialTag = function(c) {\n        if (this.sequenceIndex === this.currentSequence.length) {\n            if (c === CharCodes.Gt || isWhitespace(c)) {\n                var endOfText = this.index - this.currentSequence.length;\n                if (this.sectionStart < endOfText) {\n                    // Spoof the index so that reported locations match up.\n                    var actualIndex = this.index;\n                    this.index = endOfText;\n                    this.cbs.ontext(this.sectionStart, endOfText);\n                    this.index = actualIndex;\n                }\n                this.isSpecial = false;\n                this.sectionStart = endOfText + 2; // Skip over the `</`\n                this.stateInClosingTagName(c);\n                return; // We are done; skip the rest of the function.\n            }\n            this.sequenceIndex = 0;\n        }\n        if ((c | 0x20) === this.currentSequence[this.sequenceIndex]) {\n            this.sequenceIndex += 1;\n        } else if (this.sequenceIndex === 0) {\n            if (this.currentSequence === Sequences.TitleEnd) {\n                // We have to parse entities in <title> tags.\n                if (this.decodeEntities && c === CharCodes.Amp) {\n                    this.state = State.BeforeEntity;\n                }\n            } else if (this.fastForwardTo(CharCodes.Lt)) {\n                // Outside of <title> tags, we can fast-forward.\n                this.sequenceIndex = 1;\n            }\n        } else {\n            // If we see a `<`, set the sequence index to 1; useful for eg. `<</script>`.\n            this.sequenceIndex = Number(c === CharCodes.Lt);\n        }\n    };\n    Tokenizer.prototype.stateCDATASequence = function(c) {\n        if (c === Sequences.Cdata[this.sequenceIndex]) {\n            if (++this.sequenceIndex === Sequences.Cdata.length) {\n                this.state = State.InCommentLike;\n                this.currentSequence = Sequences.CdataEnd;\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n            }\n        } else {\n            this.sequenceIndex = 0;\n            this.state = State.InDeclaration;\n            this.stateInDeclaration(c); // Reconsume the character\n        }\n    };\n    /**\n     * When we wait for one specific character, we can speed things up\n     * by skipping through the buffer until we find it.\n     *\n     * @returns Whether the character was found.\n     */ Tokenizer.prototype.fastForwardTo = function(c) {\n        while(++this.index < this.buffer.length + this.offset){\n            if (this.buffer.charCodeAt(this.index - this.offset) === c) {\n                return true;\n            }\n        }\n        /*\n         * We increment the index at the end of the `parse` loop,\n         * so set it to `buffer.length - 1` here.\n         *\n         * TODO: Refactor `parse` to increment index before calling states.\n         */ this.index = this.buffer.length + this.offset - 1;\n        return false;\n    };\n    /**\n     * Comments and CDATA end with `-->` and `]]>`.\n     *\n     * Their common qualities are:\n     * - Their end sequences have a distinct character they start with.\n     * - That character is then repeated, so we have to check multiple repeats.\n     * - All characters but the start character of the sequence can be skipped.\n     */ Tokenizer.prototype.stateInCommentLike = function(c) {\n        if (c === this.currentSequence[this.sequenceIndex]) {\n            if (++this.sequenceIndex === this.currentSequence.length) {\n                if (this.currentSequence === Sequences.CdataEnd) {\n                    this.cbs.oncdata(this.sectionStart, this.index, 2);\n                } else {\n                    this.cbs.oncomment(this.sectionStart, this.index, 2);\n                }\n                this.sequenceIndex = 0;\n                this.sectionStart = this.index + 1;\n                this.state = State.Text;\n            }\n        } else if (this.sequenceIndex === 0) {\n            // Fast-forward to the first character of the sequence\n            if (this.fastForwardTo(this.currentSequence[0])) {\n                this.sequenceIndex = 1;\n            }\n        } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {\n            // Allow long sequences, eg. --->, ]]]>\n            this.sequenceIndex = 0;\n        }\n    };\n    /**\n     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n     *\n     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n     * We allow anything that wouldn't end the tag.\n     */ Tokenizer.prototype.isTagStartChar = function(c) {\n        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);\n    };\n    Tokenizer.prototype.startSpecial = function(sequence, offset) {\n        this.isSpecial = true;\n        this.currentSequence = sequence;\n        this.sequenceIndex = offset;\n        this.state = State.SpecialStartSequence;\n    };\n    Tokenizer.prototype.stateBeforeTagName = function(c) {\n        if (c === CharCodes.ExclamationMark) {\n            this.state = State.BeforeDeclaration;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.Questionmark) {\n            this.state = State.InProcessingInstruction;\n            this.sectionStart = this.index + 1;\n        } else if (this.isTagStartChar(c)) {\n            var lower = c | 0x20;\n            this.sectionStart = this.index;\n            if (!this.xmlMode && lower === Sequences.TitleEnd[2]) {\n                this.startSpecial(Sequences.TitleEnd, 3);\n            } else {\n                this.state = !this.xmlMode && lower === Sequences.ScriptEnd[2] ? State.BeforeSpecialS : State.InTagName;\n            }\n        } else if (c === CharCodes.Slash) {\n            this.state = State.BeforeClosingTagName;\n        } else {\n            this.state = State.Text;\n            this.stateText(c);\n        }\n    };\n    Tokenizer.prototype.stateInTagName = function(c) {\n        if (isEndOfTagSection(c)) {\n            this.cbs.onopentagname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateBeforeClosingTagName = function(c) {\n        if (isWhitespace(c)) {\n        // Ignore\n        } else if (c === CharCodes.Gt) {\n            this.state = State.Text;\n        } else {\n            this.state = this.isTagStartChar(c) ? State.InClosingTagName : State.InSpecialComment;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateInClosingTagName = function(c) {\n        if (c === CharCodes.Gt || isWhitespace(c)) {\n            this.cbs.onclosetag(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterClosingTagName;\n            this.stateAfterClosingTagName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterClosingTagName = function(c) {\n        // Skip everything until \">\"\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.state = State.Text;\n            this.baseState = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeName = function(c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onopentagend(this.index);\n            if (this.isSpecial) {\n                this.state = State.InSpecialTag;\n                this.sequenceIndex = 0;\n            } else {\n                this.state = State.Text;\n            }\n            this.baseState = this.state;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.Slash) {\n            this.state = State.InSelfClosingTag;\n        } else if (!isWhitespace(c)) {\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateInSelfClosingTag = function(c) {\n        if (c === CharCodes.Gt) {\n            this.cbs.onselfclosingtag(this.index);\n            this.state = State.Text;\n            this.baseState = State.Text;\n            this.sectionStart = this.index + 1;\n            this.isSpecial = false; // Reset special state, in case of self-closing special tags\n        } else if (!isWhitespace(c)) {\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateInAttributeName = function(c) {\n        if (c === CharCodes.Eq || isEndOfTagSection(c)) {\n            this.cbs.onattribname(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.state = State.AfterAttributeName;\n            this.stateAfterAttributeName(c);\n        }\n    };\n    Tokenizer.prototype.stateAfterAttributeName = function(c) {\n        if (c === CharCodes.Eq) {\n            this.state = State.BeforeAttributeValue;\n        } else if (c === CharCodes.Slash || c === CharCodes.Gt) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        } else if (!isWhitespace(c)) {\n            this.cbs.onattribend(QuoteType.NoValue, this.index);\n            this.state = State.InAttributeName;\n            this.sectionStart = this.index;\n        }\n    };\n    Tokenizer.prototype.stateBeforeAttributeValue = function(c) {\n        if (c === CharCodes.DoubleQuote) {\n            this.state = State.InAttributeValueDq;\n            this.sectionStart = this.index + 1;\n        } else if (c === CharCodes.SingleQuote) {\n            this.state = State.InAttributeValueSq;\n            this.sectionStart = this.index + 1;\n        } else if (!isWhitespace(c)) {\n            this.sectionStart = this.index;\n            this.state = State.InAttributeValueNq;\n            this.stateInAttributeValueNoQuotes(c); // Reconsume token\n        }\n    };\n    Tokenizer.prototype.handleInAttributeValue = function(c, quote) {\n        if (c === quote || !this.decodeEntities && this.fastForwardTo(quote)) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(quote === CharCodes.DoubleQuote ? QuoteType.Double : QuoteType.Single, this.index);\n            this.state = State.BeforeAttributeName;\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function(c) {\n        this.handleInAttributeValue(c, CharCodes.DoubleQuote);\n    };\n    Tokenizer.prototype.stateInAttributeValueSingleQuotes = function(c) {\n        this.handleInAttributeValue(c, CharCodes.SingleQuote);\n    };\n    Tokenizer.prototype.stateInAttributeValueNoQuotes = function(c) {\n        if (isWhitespace(c) || c === CharCodes.Gt) {\n            this.cbs.onattribdata(this.sectionStart, this.index);\n            this.sectionStart = -1;\n            this.cbs.onattribend(QuoteType.Unquoted, this.index);\n            this.state = State.BeforeAttributeName;\n            this.stateBeforeAttributeName(c);\n        } else if (this.decodeEntities && c === CharCodes.Amp) {\n            this.baseState = this.state;\n            this.state = State.BeforeEntity;\n        }\n    };\n    Tokenizer.prototype.stateBeforeDeclaration = function(c) {\n        if (c === CharCodes.OpeningSquareBracket) {\n            this.state = State.CDATASequence;\n            this.sequenceIndex = 0;\n        } else {\n            this.state = c === CharCodes.Dash ? State.BeforeComment : State.InDeclaration;\n        }\n    };\n    Tokenizer.prototype.stateInDeclaration = function(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.ondeclaration(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateInProcessingInstruction = function(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.onprocessinginstruction(this.sectionStart, this.index);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeComment = function(c) {\n        if (c === CharCodes.Dash) {\n            this.state = State.InCommentLike;\n            this.currentSequence = Sequences.CommentEnd;\n            // Allow short comments (eg. <!-->)\n            this.sequenceIndex = 2;\n            this.sectionStart = this.index + 1;\n        } else {\n            this.state = State.InDeclaration;\n        }\n    };\n    Tokenizer.prototype.stateInSpecialComment = function(c) {\n        if (c === CharCodes.Gt || this.fastForwardTo(CharCodes.Gt)) {\n            this.cbs.oncomment(this.sectionStart, this.index, 0);\n            this.state = State.Text;\n            this.sectionStart = this.index + 1;\n        }\n    };\n    Tokenizer.prototype.stateBeforeSpecialS = function(c) {\n        var lower = c | 0x20;\n        if (lower === Sequences.ScriptEnd[3]) {\n            this.startSpecial(Sequences.ScriptEnd, 4);\n        } else if (lower === Sequences.StyleEnd[3]) {\n            this.startSpecial(Sequences.StyleEnd, 4);\n        } else {\n            this.state = State.InTagName;\n            this.stateInTagName(c); // Consume the token again\n        }\n    };\n    Tokenizer.prototype.stateBeforeEntity = function(c) {\n        // Start excess with 1 to include the '&'\n        this.entityExcess = 1;\n        this.entityResult = 0;\n        if (c === CharCodes.Number) {\n            this.state = State.BeforeNumericEntity;\n        } else if (c === CharCodes.Amp) {\n        // We have two `&` characters in a row. Stay in the current state.\n        } else {\n            this.trieIndex = 0;\n            this.trieCurrent = this.entityTrie[0];\n            this.state = State.InNamedEntity;\n            this.stateInNamedEntity(c);\n        }\n    };\n    Tokenizer.prototype.stateInNamedEntity = function(c) {\n        this.entityExcess += 1;\n        this.trieIndex = (0, decode_js_1.determineBranch)(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);\n        if (this.trieIndex < 0) {\n            this.emitNamedEntity();\n            this.index--;\n            return;\n        }\n        this.trieCurrent = this.entityTrie[this.trieIndex];\n        var masked = this.trieCurrent & decode_js_1.BinTrieFlags.VALUE_LENGTH;\n        // If the branch is a value, store it and continue\n        if (masked) {\n            // The mask is the number of bytes of the value, including the current byte.\n            var valueLength = (masked >> 14) - 1;\n            // If we have a legacy entity while parsing strictly, just skip the number of bytes\n            if (!this.allowLegacyEntity() && c !== CharCodes.Semi) {\n                this.trieIndex += valueLength;\n            } else {\n                // Add 1 as we have already incremented the excess\n                var entityStart = this.index - this.entityExcess + 1;\n                if (entityStart > this.sectionStart) {\n                    this.emitPartial(this.sectionStart, entityStart);\n                }\n                // If this is a surrogate pair, consume the next two bytes\n                this.entityResult = this.trieIndex;\n                this.trieIndex += valueLength;\n                this.entityExcess = 0;\n                this.sectionStart = this.index + 1;\n                if (valueLength === 0) {\n                    this.emitNamedEntity();\n                }\n            }\n        }\n    };\n    Tokenizer.prototype.emitNamedEntity = function() {\n        this.state = this.baseState;\n        if (this.entityResult === 0) {\n            return;\n        }\n        var valueLength = (this.entityTrie[this.entityResult] & decode_js_1.BinTrieFlags.VALUE_LENGTH) >> 14;\n        switch(valueLength){\n            case 1:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH);\n                    break;\n                }\n            case 2:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                    break;\n                }\n            case 3:\n                {\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 1]);\n                    this.emitCodePoint(this.entityTrie[this.entityResult + 2]);\n                }\n        }\n    };\n    Tokenizer.prototype.stateBeforeNumericEntity = function(c) {\n        if ((c | 0x20) === CharCodes.LowerX) {\n            this.entityExcess++;\n            this.state = State.InHexEntity;\n        } else {\n            this.state = State.InNumericEntity;\n            this.stateInNumericEntity(c);\n        }\n    };\n    Tokenizer.prototype.emitNumericEntity = function(strict) {\n        var entityStart = this.index - this.entityExcess - 1;\n        var numberStart = entityStart + 2 + Number(this.state === State.InHexEntity);\n        if (numberStart !== this.index) {\n            // Emit leading data if any\n            if (entityStart > this.sectionStart) {\n                this.emitPartial(this.sectionStart, entityStart);\n            }\n            this.sectionStart = this.index + Number(strict);\n            this.emitCodePoint((0, decode_js_1.replaceCodePoint)(this.entityResult));\n        }\n        this.state = this.baseState;\n    };\n    Tokenizer.prototype.stateInNumericEntity = function(c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        } else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 10 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        } else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            } else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    };\n    Tokenizer.prototype.stateInHexEntity = function(c) {\n        if (c === CharCodes.Semi) {\n            this.emitNumericEntity(true);\n        } else if (isNumber(c)) {\n            this.entityResult = this.entityResult * 16 + (c - CharCodes.Zero);\n            this.entityExcess++;\n        } else if (isHexDigit(c)) {\n            this.entityResult = this.entityResult * 16 + ((c | 0x20) - CharCodes.LowerA + 10);\n            this.entityExcess++;\n        } else {\n            if (this.allowLegacyEntity()) {\n                this.emitNumericEntity(false);\n            } else {\n                this.state = this.baseState;\n            }\n            this.index--;\n        }\n    };\n    Tokenizer.prototype.allowLegacyEntity = function() {\n        return !this.xmlMode && (this.baseState === State.Text || this.baseState === State.InSpecialTag);\n    };\n    /**\n     * Remove data that has already been consumed from the buffer.\n     */ Tokenizer.prototype.cleanup = function() {\n        // If we are inside of text or attributes, emit what we already have.\n        if (this.running && this.sectionStart !== this.index) {\n            if (this.state === State.Text || this.state === State.InSpecialTag && this.sequenceIndex === 0) {\n                this.cbs.ontext(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            } else if (this.state === State.InAttributeValueDq || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueNq) {\n                this.cbs.onattribdata(this.sectionStart, this.index);\n                this.sectionStart = this.index;\n            }\n        }\n    };\n    Tokenizer.prototype.shouldContinue = function() {\n        return this.index < this.buffer.length + this.offset && this.running;\n    };\n    /**\n     * Iterates through the buffer, calling the function corresponding to the current state.\n     *\n     * States that are more likely to be hit are higher up, as a performance improvement.\n     */ Tokenizer.prototype.parse = function() {\n        while(this.shouldContinue()){\n            var c = this.buffer.charCodeAt(this.index - this.offset);\n            switch(this.state){\n                case State.Text:\n                    {\n                        this.stateText(c);\n                        break;\n                    }\n                case State.SpecialStartSequence:\n                    {\n                        this.stateSpecialStartSequence(c);\n                        break;\n                    }\n                case State.InSpecialTag:\n                    {\n                        this.stateInSpecialTag(c);\n                        break;\n                    }\n                case State.CDATASequence:\n                    {\n                        this.stateCDATASequence(c);\n                        break;\n                    }\n                case State.InAttributeValueDq:\n                    {\n                        this.stateInAttributeValueDoubleQuotes(c);\n                        break;\n                    }\n                case State.InAttributeName:\n                    {\n                        this.stateInAttributeName(c);\n                        break;\n                    }\n                case State.InCommentLike:\n                    {\n                        this.stateInCommentLike(c);\n                        break;\n                    }\n                case State.InSpecialComment:\n                    {\n                        this.stateInSpecialComment(c);\n                        break;\n                    }\n                case State.BeforeAttributeName:\n                    {\n                        this.stateBeforeAttributeName(c);\n                        break;\n                    }\n                case State.InTagName:\n                    {\n                        this.stateInTagName(c);\n                        break;\n                    }\n                case State.InClosingTagName:\n                    {\n                        this.stateInClosingTagName(c);\n                        break;\n                    }\n                case State.BeforeTagName:\n                    {\n                        this.stateBeforeTagName(c);\n                        break;\n                    }\n                case State.AfterAttributeName:\n                    {\n                        this.stateAfterAttributeName(c);\n                        break;\n                    }\n                case State.InAttributeValueSq:\n                    {\n                        this.stateInAttributeValueSingleQuotes(c);\n                        break;\n                    }\n                case State.BeforeAttributeValue:\n                    {\n                        this.stateBeforeAttributeValue(c);\n                        break;\n                    }\n                case State.BeforeClosingTagName:\n                    {\n                        this.stateBeforeClosingTagName(c);\n                        break;\n                    }\n                case State.AfterClosingTagName:\n                    {\n                        this.stateAfterClosingTagName(c);\n                        break;\n                    }\n                case State.BeforeSpecialS:\n                    {\n                        this.stateBeforeSpecialS(c);\n                        break;\n                    }\n                case State.InAttributeValueNq:\n                    {\n                        this.stateInAttributeValueNoQuotes(c);\n                        break;\n                    }\n                case State.InSelfClosingTag:\n                    {\n                        this.stateInSelfClosingTag(c);\n                        break;\n                    }\n                case State.InDeclaration:\n                    {\n                        this.stateInDeclaration(c);\n                        break;\n                    }\n                case State.BeforeDeclaration:\n                    {\n                        this.stateBeforeDeclaration(c);\n                        break;\n                    }\n                case State.BeforeComment:\n                    {\n                        this.stateBeforeComment(c);\n                        break;\n                    }\n                case State.InProcessingInstruction:\n                    {\n                        this.stateInProcessingInstruction(c);\n                        break;\n                    }\n                case State.InNamedEntity:\n                    {\n                        this.stateInNamedEntity(c);\n                        break;\n                    }\n                case State.BeforeEntity:\n                    {\n                        this.stateBeforeEntity(c);\n                        break;\n                    }\n                case State.InHexEntity:\n                    {\n                        this.stateInHexEntity(c);\n                        break;\n                    }\n                case State.InNumericEntity:\n                    {\n                        this.stateInNumericEntity(c);\n                        break;\n                    }\n                default:\n                    {\n                        // `this._state === State.BeforeNumericEntity`\n                        this.stateBeforeNumericEntity(c);\n                    }\n            }\n            this.index++;\n        }\n        this.cleanup();\n    };\n    Tokenizer.prototype.finish = function() {\n        if (this.state === State.InNamedEntity) {\n            this.emitNamedEntity();\n        }\n        // If there is remaining data, emit it in a reasonable way\n        if (this.sectionStart < this.index) {\n            this.handleTrailingData();\n        }\n        this.cbs.onend();\n    };\n    /** Handle any trailing data. */ Tokenizer.prototype.handleTrailingData = function() {\n        var endIndex = this.buffer.length + this.offset;\n        if (this.state === State.InCommentLike) {\n            if (this.currentSequence === Sequences.CdataEnd) {\n                this.cbs.oncdata(this.sectionStart, endIndex, 0);\n            } else {\n                this.cbs.oncomment(this.sectionStart, endIndex, 0);\n            }\n        } else if (this.state === State.InNumericEntity && this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n        // All trailing data will have been consumed\n        } else if (this.state === State.InHexEntity && this.allowLegacyEntity()) {\n            this.emitNumericEntity(false);\n        // All trailing data will have been consumed\n        } else if (this.state === State.InTagName || this.state === State.BeforeAttributeName || this.state === State.BeforeAttributeValue || this.state === State.AfterAttributeName || this.state === State.InAttributeName || this.state === State.InAttributeValueSq || this.state === State.InAttributeValueDq || this.state === State.InAttributeValueNq || this.state === State.InClosingTagName) {\n        /*\n             * If we are currently in an opening or closing tag, us not calling the\n             * respective callback signals that the tag should be ignored.\n             */ } else {\n            this.cbs.ontext(this.sectionStart, endIndex);\n        }\n    };\n    Tokenizer.prototype.emitPartial = function(start, endIndex) {\n        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribdata(start, endIndex);\n        } else {\n            this.cbs.ontext(start, endIndex);\n        }\n    };\n    Tokenizer.prototype.emitCodePoint = function(cp) {\n        if (this.baseState !== State.Text && this.baseState !== State.InSpecialTag) {\n            this.cbs.onattribentity(cp);\n        } else {\n            this.cbs.ontextentity(cp);\n        }\n    };\n    return Tokenizer;\n}();\nexports[\"default\"] = Tokenizer; //# sourceMappingURL=Tokenizer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/htmlparser2/lib/Tokenizer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/htmlparser2/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/htmlparser2/lib/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DomUtils = exports.parseFeed = exports.getFeed = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DefaultHandler = exports.DomHandler = exports.Parser = void 0;\nvar Parser_js_1 = __webpack_require__(/*! ./Parser.js */ \"(app-pages-browser)/./node_modules/htmlparser2/lib/Parser.js\");\nvar Parser_js_2 = __webpack_require__(/*! ./Parser.js */ \"(app-pages-browser)/./node_modules/htmlparser2/lib/Parser.js\");\nObject.defineProperty(exports, \"Parser\", ({\n    enumerable: true,\n    get: function() {\n        return Parser_js_2.Parser;\n    }\n}));\nvar domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nvar domhandler_2 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nObject.defineProperty(exports, \"DomHandler\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_2.DomHandler;\n    }\n}));\n// Old name for DomHandler\nObject.defineProperty(exports, \"DefaultHandler\", ({\n    enumerable: true,\n    get: function() {\n        return domhandler_2.DomHandler;\n    }\n}));\n// Helper methods\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */ function parseDocument(data, options) {\n    var handler = new domhandler_1.DomHandler(undefined, options);\n    new Parser_js_1.Parser(handler, options).end(data);\n    return handler.root;\n}\nexports.parseDocument = parseDocument;\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */ function parseDOM(data, options) {\n    return parseDocument(data, options).children;\n}\nexports.parseDOM = parseDOM;\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */ function createDomStream(callback, options, elementCallback) {\n    var handler = new domhandler_1.DomHandler(callback, options, elementCallback);\n    return new Parser_js_1.Parser(handler, options);\n}\nexports.createDomStream = createDomStream;\nvar Tokenizer_js_1 = __webpack_require__(/*! ./Tokenizer.js */ \"(app-pages-browser)/./node_modules/htmlparser2/lib/Tokenizer.js\");\nObject.defineProperty(exports, \"Tokenizer\", ({\n    enumerable: true,\n    get: function() {\n        return __importDefault(Tokenizer_js_1).default;\n    }\n}));\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */ exports.ElementType = __importStar(__webpack_require__(/*! domelementtype */ \"(app-pages-browser)/./node_modules/domelementtype/lib/index.js\"));\nvar domutils_1 = __webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\");\nvar domutils_2 = __webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\");\nObject.defineProperty(exports, \"getFeed\", ({\n    enumerable: true,\n    get: function() {\n        return domutils_2.getFeed;\n    }\n}));\nvar parseFeedDefaultOptions = {\n    xmlMode: true\n};\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */ function parseFeed(feed, options) {\n    if (options === void 0) {\n        options = parseFeedDefaultOptions;\n    }\n    return (0, domutils_1.getFeed)(parseDOM(feed, options));\n}\nexports.parseFeed = parseFeed;\nexports.DomUtils = __importStar(__webpack_require__(/*! domutils */ \"(app-pages-browser)/./node_modules/domutils/lib/index.js\")); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/htmlparser2/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/compiled/buffer/index.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("var __dirname = \"/\";\n\n(function() {\n    var e = {\n        675: function(e, r) {\n            \"use strict\";\n            r.byteLength = byteLength;\n            r.toByteArray = toByteArray;\n            r.fromByteArray = fromByteArray;\n            var t = [];\n            var f = [];\n            var n = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n            var i = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n            for(var o = 0, u = i.length; o < u; ++o){\n                t[o] = i[o];\n                f[i.charCodeAt(o)] = o;\n            }\n            f[\"-\".charCodeAt(0)] = 62;\n            f[\"_\".charCodeAt(0)] = 63;\n            function getLens(e) {\n                var r = e.length;\n                if (r % 4 > 0) {\n                    throw new Error(\"Invalid string. Length must be a multiple of 4\");\n                }\n                var t = e.indexOf(\"=\");\n                if (t === -1) t = r;\n                var f = t === r ? 0 : 4 - t % 4;\n                return [\n                    t,\n                    f\n                ];\n            }\n            function byteLength(e) {\n                var r = getLens(e);\n                var t = r[0];\n                var f = r[1];\n                return (t + f) * 3 / 4 - f;\n            }\n            function _byteLength(e, r, t) {\n                return (r + t) * 3 / 4 - t;\n            }\n            function toByteArray(e) {\n                var r;\n                var t = getLens(e);\n                var i = t[0];\n                var o = t[1];\n                var u = new n(_byteLength(e, i, o));\n                var a = 0;\n                var s = o > 0 ? i - 4 : i;\n                var h;\n                for(h = 0; h < s; h += 4){\n                    r = f[e.charCodeAt(h)] << 18 | f[e.charCodeAt(h + 1)] << 12 | f[e.charCodeAt(h + 2)] << 6 | f[e.charCodeAt(h + 3)];\n                    u[a++] = r >> 16 & 255;\n                    u[a++] = r >> 8 & 255;\n                    u[a++] = r & 255;\n                }\n                if (o === 2) {\n                    r = f[e.charCodeAt(h)] << 2 | f[e.charCodeAt(h + 1)] >> 4;\n                    u[a++] = r & 255;\n                }\n                if (o === 1) {\n                    r = f[e.charCodeAt(h)] << 10 | f[e.charCodeAt(h + 1)] << 4 | f[e.charCodeAt(h + 2)] >> 2;\n                    u[a++] = r >> 8 & 255;\n                    u[a++] = r & 255;\n                }\n                return u;\n            }\n            function tripletToBase64(e) {\n                return t[e >> 18 & 63] + t[e >> 12 & 63] + t[e >> 6 & 63] + t[e & 63];\n            }\n            function encodeChunk(e, r, t) {\n                var f;\n                var n = [];\n                for(var i = r; i < t; i += 3){\n                    f = (e[i] << 16 & 16711680) + (e[i + 1] << 8 & 65280) + (e[i + 2] & 255);\n                    n.push(tripletToBase64(f));\n                }\n                return n.join(\"\");\n            }\n            function fromByteArray(e) {\n                var r;\n                var f = e.length;\n                var n = f % 3;\n                var i = [];\n                var o = 16383;\n                for(var u = 0, a = f - n; u < a; u += o){\n                    i.push(encodeChunk(e, u, u + o > a ? a : u + o));\n                }\n                if (n === 1) {\n                    r = e[f - 1];\n                    i.push(t[r >> 2] + t[r << 4 & 63] + \"==\");\n                } else if (n === 2) {\n                    r = (e[f - 2] << 8) + e[f - 1];\n                    i.push(t[r >> 10] + t[r >> 4 & 63] + t[r << 2 & 63] + \"=\");\n                }\n                return i.join(\"\");\n            }\n        },\n        72: function(e, r, t) {\n            \"use strict\";\n            /*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */ var f = t(675);\n            var n = t(783);\n            var i = typeof Symbol === \"function\" && typeof Symbol.for === \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null;\n            r.Buffer = Buffer;\n            r.SlowBuffer = SlowBuffer;\n            r.INSPECT_MAX_BYTES = 50;\n            var o = 2147483647;\n            r.kMaxLength = o;\n            Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== \"undefined\" && typeof console.error === \"function\") {\n                console.error(\"This browser lacks typed array (Uint8Array) support which is required by \" + \"`buffer` v5.x. Use `buffer` v4.x if you require old browser support.\");\n            }\n            function typedArraySupport() {\n                try {\n                    var e = new Uint8Array(1);\n                    var r = {\n                        foo: function() {\n                            return 42;\n                        }\n                    };\n                    Object.setPrototypeOf(r, Uint8Array.prototype);\n                    Object.setPrototypeOf(e, r);\n                    return e.foo() === 42;\n                } catch (e) {\n                    return false;\n                }\n            }\n            Object.defineProperty(Buffer.prototype, \"parent\", {\n                enumerable: true,\n                get: function() {\n                    if (!Buffer.isBuffer(this)) return undefined;\n                    return this.buffer;\n                }\n            });\n            Object.defineProperty(Buffer.prototype, \"offset\", {\n                enumerable: true,\n                get: function() {\n                    if (!Buffer.isBuffer(this)) return undefined;\n                    return this.byteOffset;\n                }\n            });\n            function createBuffer(e) {\n                if (e > o) {\n                    throw new RangeError('The value \"' + e + '\" is invalid for option \"size\"');\n                }\n                var r = new Uint8Array(e);\n                Object.setPrototypeOf(r, Buffer.prototype);\n                return r;\n            }\n            function Buffer(e, r, t) {\n                if (typeof e === \"number\") {\n                    if (typeof r === \"string\") {\n                        throw new TypeError('The \"string\" argument must be of type string. Received type number');\n                    }\n                    return allocUnsafe(e);\n                }\n                return from(e, r, t);\n            }\n            Buffer.poolSize = 8192;\n            function from(e, r, t) {\n                if (typeof e === \"string\") {\n                    return fromString(e, r);\n                }\n                if (ArrayBuffer.isView(e)) {\n                    return fromArrayLike(e);\n                }\n                if (e == null) {\n                    throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof e);\n                }\n                if (isInstance(e, ArrayBuffer) || e && isInstance(e.buffer, ArrayBuffer)) {\n                    return fromArrayBuffer(e, r, t);\n                }\n                if (typeof SharedArrayBuffer !== \"undefined\" && (isInstance(e, SharedArrayBuffer) || e && isInstance(e.buffer, SharedArrayBuffer))) {\n                    return fromArrayBuffer(e, r, t);\n                }\n                if (typeof e === \"number\") {\n                    throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n                }\n                var f = e.valueOf && e.valueOf();\n                if (f != null && f !== e) {\n                    return Buffer.from(f, r, t);\n                }\n                var n = fromObject(e);\n                if (n) return n;\n                if (typeof Symbol !== \"undefined\" && Symbol.toPrimitive != null && typeof e[Symbol.toPrimitive] === \"function\") {\n                    return Buffer.from(e[Symbol.toPrimitive](\"string\"), r, t);\n                }\n                throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, \" + \"or Array-like Object. Received type \" + typeof e);\n            }\n            Buffer.from = function(e, r, t) {\n                return from(e, r, t);\n            };\n            Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\n            Object.setPrototypeOf(Buffer, Uint8Array);\n            function assertSize(e) {\n                if (typeof e !== \"number\") {\n                    throw new TypeError('\"size\" argument must be of type number');\n                } else if (e < 0) {\n                    throw new RangeError('The value \"' + e + '\" is invalid for option \"size\"');\n                }\n            }\n            function alloc(e, r, t) {\n                assertSize(e);\n                if (e <= 0) {\n                    return createBuffer(e);\n                }\n                if (r !== undefined) {\n                    return typeof t === \"string\" ? createBuffer(e).fill(r, t) : createBuffer(e).fill(r);\n                }\n                return createBuffer(e);\n            }\n            Buffer.alloc = function(e, r, t) {\n                return alloc(e, r, t);\n            };\n            function allocUnsafe(e) {\n                assertSize(e);\n                return createBuffer(e < 0 ? 0 : checked(e) | 0);\n            }\n            Buffer.allocUnsafe = function(e) {\n                return allocUnsafe(e);\n            };\n            Buffer.allocUnsafeSlow = function(e) {\n                return allocUnsafe(e);\n            };\n            function fromString(e, r) {\n                if (typeof r !== \"string\" || r === \"\") {\n                    r = \"utf8\";\n                }\n                if (!Buffer.isEncoding(r)) {\n                    throw new TypeError(\"Unknown encoding: \" + r);\n                }\n                var t = byteLength(e, r) | 0;\n                var f = createBuffer(t);\n                var n = f.write(e, r);\n                if (n !== t) {\n                    f = f.slice(0, n);\n                }\n                return f;\n            }\n            function fromArrayLike(e) {\n                var r = e.length < 0 ? 0 : checked(e.length) | 0;\n                var t = createBuffer(r);\n                for(var f = 0; f < r; f += 1){\n                    t[f] = e[f] & 255;\n                }\n                return t;\n            }\n            function fromArrayBuffer(e, r, t) {\n                if (r < 0 || e.byteLength < r) {\n                    throw new RangeError('\"offset\" is outside of buffer bounds');\n                }\n                if (e.byteLength < r + (t || 0)) {\n                    throw new RangeError('\"length\" is outside of buffer bounds');\n                }\n                var f;\n                if (r === undefined && t === undefined) {\n                    f = new Uint8Array(e);\n                } else if (t === undefined) {\n                    f = new Uint8Array(e, r);\n                } else {\n                    f = new Uint8Array(e, r, t);\n                }\n                Object.setPrototypeOf(f, Buffer.prototype);\n                return f;\n            }\n            function fromObject(e) {\n                if (Buffer.isBuffer(e)) {\n                    var r = checked(e.length) | 0;\n                    var t = createBuffer(r);\n                    if (t.length === 0) {\n                        return t;\n                    }\n                    e.copy(t, 0, 0, r);\n                    return t;\n                }\n                if (e.length !== undefined) {\n                    if (typeof e.length !== \"number\" || numberIsNaN(e.length)) {\n                        return createBuffer(0);\n                    }\n                    return fromArrayLike(e);\n                }\n                if (e.type === \"Buffer\" && Array.isArray(e.data)) {\n                    return fromArrayLike(e.data);\n                }\n            }\n            function checked(e) {\n                if (e >= o) {\n                    throw new RangeError(\"Attempt to allocate Buffer larger than maximum \" + \"size: 0x\" + o.toString(16) + \" bytes\");\n                }\n                return e | 0;\n            }\n            function SlowBuffer(e) {\n                if (+e != e) {\n                    e = 0;\n                }\n                return Buffer.alloc(+e);\n            }\n            Buffer.isBuffer = function isBuffer(e) {\n                return e != null && e._isBuffer === true && e !== Buffer.prototype;\n            };\n            Buffer.compare = function compare(e, r) {\n                if (isInstance(e, Uint8Array)) e = Buffer.from(e, e.offset, e.byteLength);\n                if (isInstance(r, Uint8Array)) r = Buffer.from(r, r.offset, r.byteLength);\n                if (!Buffer.isBuffer(e) || !Buffer.isBuffer(r)) {\n                    throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n                }\n                if (e === r) return 0;\n                var t = e.length;\n                var f = r.length;\n                for(var n = 0, i = Math.min(t, f); n < i; ++n){\n                    if (e[n] !== r[n]) {\n                        t = e[n];\n                        f = r[n];\n                        break;\n                    }\n                }\n                if (t < f) return -1;\n                if (f < t) return 1;\n                return 0;\n            };\n            Buffer.isEncoding = function isEncoding(e) {\n                switch(String(e).toLowerCase()){\n                    case \"hex\":\n                    case \"utf8\":\n                    case \"utf-8\":\n                    case \"ascii\":\n                    case \"latin1\":\n                    case \"binary\":\n                    case \"base64\":\n                    case \"ucs2\":\n                    case \"ucs-2\":\n                    case \"utf16le\":\n                    case \"utf-16le\":\n                        return true;\n                    default:\n                        return false;\n                }\n            };\n            Buffer.concat = function concat(e, r) {\n                if (!Array.isArray(e)) {\n                    throw new TypeError('\"list\" argument must be an Array of Buffers');\n                }\n                if (e.length === 0) {\n                    return Buffer.alloc(0);\n                }\n                var t;\n                if (r === undefined) {\n                    r = 0;\n                    for(t = 0; t < e.length; ++t){\n                        r += e[t].length;\n                    }\n                }\n                var f = Buffer.allocUnsafe(r);\n                var n = 0;\n                for(t = 0; t < e.length; ++t){\n                    var i = e[t];\n                    if (isInstance(i, Uint8Array)) {\n                        i = Buffer.from(i);\n                    }\n                    if (!Buffer.isBuffer(i)) {\n                        throw new TypeError('\"list\" argument must be an Array of Buffers');\n                    }\n                    i.copy(f, n);\n                    n += i.length;\n                }\n                return f;\n            };\n            function byteLength(e, r) {\n                if (Buffer.isBuffer(e)) {\n                    return e.length;\n                }\n                if (ArrayBuffer.isView(e) || isInstance(e, ArrayBuffer)) {\n                    return e.byteLength;\n                }\n                if (typeof e !== \"string\") {\n                    throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + \"Received type \" + typeof e);\n                }\n                var t = e.length;\n                var f = arguments.length > 2 && arguments[2] === true;\n                if (!f && t === 0) return 0;\n                var n = false;\n                for(;;){\n                    switch(r){\n                        case \"ascii\":\n                        case \"latin1\":\n                        case \"binary\":\n                            return t;\n                        case \"utf8\":\n                        case \"utf-8\":\n                            return utf8ToBytes(e).length;\n                        case \"ucs2\":\n                        case \"ucs-2\":\n                        case \"utf16le\":\n                        case \"utf-16le\":\n                            return t * 2;\n                        case \"hex\":\n                            return t >>> 1;\n                        case \"base64\":\n                            return base64ToBytes(e).length;\n                        default:\n                            if (n) {\n                                return f ? -1 : utf8ToBytes(e).length;\n                            }\n                            r = (\"\" + r).toLowerCase();\n                            n = true;\n                    }\n                }\n            }\n            Buffer.byteLength = byteLength;\n            function slowToString(e, r, t) {\n                var f = false;\n                if (r === undefined || r < 0) {\n                    r = 0;\n                }\n                if (r > this.length) {\n                    return \"\";\n                }\n                if (t === undefined || t > this.length) {\n                    t = this.length;\n                }\n                if (t <= 0) {\n                    return \"\";\n                }\n                t >>>= 0;\n                r >>>= 0;\n                if (t <= r) {\n                    return \"\";\n                }\n                if (!e) e = \"utf8\";\n                while(true){\n                    switch(e){\n                        case \"hex\":\n                            return hexSlice(this, r, t);\n                        case \"utf8\":\n                        case \"utf-8\":\n                            return utf8Slice(this, r, t);\n                        case \"ascii\":\n                            return asciiSlice(this, r, t);\n                        case \"latin1\":\n                        case \"binary\":\n                            return latin1Slice(this, r, t);\n                        case \"base64\":\n                            return base64Slice(this, r, t);\n                        case \"ucs2\":\n                        case \"ucs-2\":\n                        case \"utf16le\":\n                        case \"utf-16le\":\n                            return utf16leSlice(this, r, t);\n                        default:\n                            if (f) throw new TypeError(\"Unknown encoding: \" + e);\n                            e = (e + \"\").toLowerCase();\n                            f = true;\n                    }\n                }\n            }\n            Buffer.prototype._isBuffer = true;\n            function swap(e, r, t) {\n                var f = e[r];\n                e[r] = e[t];\n                e[t] = f;\n            }\n            Buffer.prototype.swap16 = function swap16() {\n                var e = this.length;\n                if (e % 2 !== 0) {\n                    throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n                }\n                for(var r = 0; r < e; r += 2){\n                    swap(this, r, r + 1);\n                }\n                return this;\n            };\n            Buffer.prototype.swap32 = function swap32() {\n                var e = this.length;\n                if (e % 4 !== 0) {\n                    throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n                }\n                for(var r = 0; r < e; r += 4){\n                    swap(this, r, r + 3);\n                    swap(this, r + 1, r + 2);\n                }\n                return this;\n            };\n            Buffer.prototype.swap64 = function swap64() {\n                var e = this.length;\n                if (e % 8 !== 0) {\n                    throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n                }\n                for(var r = 0; r < e; r += 8){\n                    swap(this, r, r + 7);\n                    swap(this, r + 1, r + 6);\n                    swap(this, r + 2, r + 5);\n                    swap(this, r + 3, r + 4);\n                }\n                return this;\n            };\n            Buffer.prototype.toString = function toString() {\n                var e = this.length;\n                if (e === 0) return \"\";\n                if (arguments.length === 0) return utf8Slice(this, 0, e);\n                return slowToString.apply(this, arguments);\n            };\n            Buffer.prototype.toLocaleString = Buffer.prototype.toString;\n            Buffer.prototype.equals = function equals(e) {\n                if (!Buffer.isBuffer(e)) throw new TypeError(\"Argument must be a Buffer\");\n                if (this === e) return true;\n                return Buffer.compare(this, e) === 0;\n            };\n            Buffer.prototype.inspect = function inspect() {\n                var e = \"\";\n                var t = r.INSPECT_MAX_BYTES;\n                e = this.toString(\"hex\", 0, t).replace(/(.{2})/g, \"$1 \").trim();\n                if (this.length > t) e += \" ... \";\n                return \"<Buffer \" + e + \">\";\n            };\n            if (i) {\n                Buffer.prototype[i] = Buffer.prototype.inspect;\n            }\n            Buffer.prototype.compare = function compare(e, r, t, f, n) {\n                if (isInstance(e, Uint8Array)) {\n                    e = Buffer.from(e, e.offset, e.byteLength);\n                }\n                if (!Buffer.isBuffer(e)) {\n                    throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + \"Received type \" + typeof e);\n                }\n                if (r === undefined) {\n                    r = 0;\n                }\n                if (t === undefined) {\n                    t = e ? e.length : 0;\n                }\n                if (f === undefined) {\n                    f = 0;\n                }\n                if (n === undefined) {\n                    n = this.length;\n                }\n                if (r < 0 || t > e.length || f < 0 || n > this.length) {\n                    throw new RangeError(\"out of range index\");\n                }\n                if (f >= n && r >= t) {\n                    return 0;\n                }\n                if (f >= n) {\n                    return -1;\n                }\n                if (r >= t) {\n                    return 1;\n                }\n                r >>>= 0;\n                t >>>= 0;\n                f >>>= 0;\n                n >>>= 0;\n                if (this === e) return 0;\n                var i = n - f;\n                var o = t - r;\n                var u = Math.min(i, o);\n                var a = this.slice(f, n);\n                var s = e.slice(r, t);\n                for(var h = 0; h < u; ++h){\n                    if (a[h] !== s[h]) {\n                        i = a[h];\n                        o = s[h];\n                        break;\n                    }\n                }\n                if (i < o) return -1;\n                if (o < i) return 1;\n                return 0;\n            };\n            function bidirectionalIndexOf(e, r, t, f, n) {\n                if (e.length === 0) return -1;\n                if (typeof t === \"string\") {\n                    f = t;\n                    t = 0;\n                } else if (t > 2147483647) {\n                    t = 2147483647;\n                } else if (t < -2147483648) {\n                    t = -2147483648;\n                }\n                t = +t;\n                if (numberIsNaN(t)) {\n                    t = n ? 0 : e.length - 1;\n                }\n                if (t < 0) t = e.length + t;\n                if (t >= e.length) {\n                    if (n) return -1;\n                    else t = e.length - 1;\n                } else if (t < 0) {\n                    if (n) t = 0;\n                    else return -1;\n                }\n                if (typeof r === \"string\") {\n                    r = Buffer.from(r, f);\n                }\n                if (Buffer.isBuffer(r)) {\n                    if (r.length === 0) {\n                        return -1;\n                    }\n                    return arrayIndexOf(e, r, t, f, n);\n                } else if (typeof r === \"number\") {\n                    r = r & 255;\n                    if (typeof Uint8Array.prototype.indexOf === \"function\") {\n                        if (n) {\n                            return Uint8Array.prototype.indexOf.call(e, r, t);\n                        } else {\n                            return Uint8Array.prototype.lastIndexOf.call(e, r, t);\n                        }\n                    }\n                    return arrayIndexOf(e, [\n                        r\n                    ], t, f, n);\n                }\n                throw new TypeError(\"val must be string, number or Buffer\");\n            }\n            function arrayIndexOf(e, r, t, f, n) {\n                var i = 1;\n                var o = e.length;\n                var u = r.length;\n                if (f !== undefined) {\n                    f = String(f).toLowerCase();\n                    if (f === \"ucs2\" || f === \"ucs-2\" || f === \"utf16le\" || f === \"utf-16le\") {\n                        if (e.length < 2 || r.length < 2) {\n                            return -1;\n                        }\n                        i = 2;\n                        o /= 2;\n                        u /= 2;\n                        t /= 2;\n                    }\n                }\n                function read(e, r) {\n                    if (i === 1) {\n                        return e[r];\n                    } else {\n                        return e.readUInt16BE(r * i);\n                    }\n                }\n                var a;\n                if (n) {\n                    var s = -1;\n                    for(a = t; a < o; a++){\n                        if (read(e, a) === read(r, s === -1 ? 0 : a - s)) {\n                            if (s === -1) s = a;\n                            if (a - s + 1 === u) return s * i;\n                        } else {\n                            if (s !== -1) a -= a - s;\n                            s = -1;\n                        }\n                    }\n                } else {\n                    if (t + u > o) t = o - u;\n                    for(a = t; a >= 0; a--){\n                        var h = true;\n                        for(var c = 0; c < u; c++){\n                            if (read(e, a + c) !== read(r, c)) {\n                                h = false;\n                                break;\n                            }\n                        }\n                        if (h) return a;\n                    }\n                }\n                return -1;\n            }\n            Buffer.prototype.includes = function includes(e, r, t) {\n                return this.indexOf(e, r, t) !== -1;\n            };\n            Buffer.prototype.indexOf = function indexOf(e, r, t) {\n                return bidirectionalIndexOf(this, e, r, t, true);\n            };\n            Buffer.prototype.lastIndexOf = function lastIndexOf(e, r, t) {\n                return bidirectionalIndexOf(this, e, r, t, false);\n            };\n            function hexWrite(e, r, t, f) {\n                t = Number(t) || 0;\n                var n = e.length - t;\n                if (!f) {\n                    f = n;\n                } else {\n                    f = Number(f);\n                    if (f > n) {\n                        f = n;\n                    }\n                }\n                var i = r.length;\n                if (f > i / 2) {\n                    f = i / 2;\n                }\n                for(var o = 0; o < f; ++o){\n                    var u = parseInt(r.substr(o * 2, 2), 16);\n                    if (numberIsNaN(u)) return o;\n                    e[t + o] = u;\n                }\n                return o;\n            }\n            function utf8Write(e, r, t, f) {\n                return blitBuffer(utf8ToBytes(r, e.length - t), e, t, f);\n            }\n            function asciiWrite(e, r, t, f) {\n                return blitBuffer(asciiToBytes(r), e, t, f);\n            }\n            function latin1Write(e, r, t, f) {\n                return asciiWrite(e, r, t, f);\n            }\n            function base64Write(e, r, t, f) {\n                return blitBuffer(base64ToBytes(r), e, t, f);\n            }\n            function ucs2Write(e, r, t, f) {\n                return blitBuffer(utf16leToBytes(r, e.length - t), e, t, f);\n            }\n            Buffer.prototype.write = function write(e, r, t, f) {\n                if (r === undefined) {\n                    f = \"utf8\";\n                    t = this.length;\n                    r = 0;\n                } else if (t === undefined && typeof r === \"string\") {\n                    f = r;\n                    t = this.length;\n                    r = 0;\n                } else if (isFinite(r)) {\n                    r = r >>> 0;\n                    if (isFinite(t)) {\n                        t = t >>> 0;\n                        if (f === undefined) f = \"utf8\";\n                    } else {\n                        f = t;\n                        t = undefined;\n                    }\n                } else {\n                    throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n                }\n                var n = this.length - r;\n                if (t === undefined || t > n) t = n;\n                if (e.length > 0 && (t < 0 || r < 0) || r > this.length) {\n                    throw new RangeError(\"Attempt to write outside buffer bounds\");\n                }\n                if (!f) f = \"utf8\";\n                var i = false;\n                for(;;){\n                    switch(f){\n                        case \"hex\":\n                            return hexWrite(this, e, r, t);\n                        case \"utf8\":\n                        case \"utf-8\":\n                            return utf8Write(this, e, r, t);\n                        case \"ascii\":\n                            return asciiWrite(this, e, r, t);\n                        case \"latin1\":\n                        case \"binary\":\n                            return latin1Write(this, e, r, t);\n                        case \"base64\":\n                            return base64Write(this, e, r, t);\n                        case \"ucs2\":\n                        case \"ucs-2\":\n                        case \"utf16le\":\n                        case \"utf-16le\":\n                            return ucs2Write(this, e, r, t);\n                        default:\n                            if (i) throw new TypeError(\"Unknown encoding: \" + f);\n                            f = (\"\" + f).toLowerCase();\n                            i = true;\n                    }\n                }\n            };\n            Buffer.prototype.toJSON = function toJSON() {\n                return {\n                    type: \"Buffer\",\n                    data: Array.prototype.slice.call(this._arr || this, 0)\n                };\n            };\n            function base64Slice(e, r, t) {\n                if (r === 0 && t === e.length) {\n                    return f.fromByteArray(e);\n                } else {\n                    return f.fromByteArray(e.slice(r, t));\n                }\n            }\n            function utf8Slice(e, r, t) {\n                t = Math.min(e.length, t);\n                var f = [];\n                var n = r;\n                while(n < t){\n                    var i = e[n];\n                    var o = null;\n                    var u = i > 239 ? 4 : i > 223 ? 3 : i > 191 ? 2 : 1;\n                    if (n + u <= t) {\n                        var a, s, h, c;\n                        switch(u){\n                            case 1:\n                                if (i < 128) {\n                                    o = i;\n                                }\n                                break;\n                            case 2:\n                                a = e[n + 1];\n                                if ((a & 192) === 128) {\n                                    c = (i & 31) << 6 | a & 63;\n                                    if (c > 127) {\n                                        o = c;\n                                    }\n                                }\n                                break;\n                            case 3:\n                                a = e[n + 1];\n                                s = e[n + 2];\n                                if ((a & 192) === 128 && (s & 192) === 128) {\n                                    c = (i & 15) << 12 | (a & 63) << 6 | s & 63;\n                                    if (c > 2047 && (c < 55296 || c > 57343)) {\n                                        o = c;\n                                    }\n                                }\n                                break;\n                            case 4:\n                                a = e[n + 1];\n                                s = e[n + 2];\n                                h = e[n + 3];\n                                if ((a & 192) === 128 && (s & 192) === 128 && (h & 192) === 128) {\n                                    c = (i & 15) << 18 | (a & 63) << 12 | (s & 63) << 6 | h & 63;\n                                    if (c > 65535 && c < 1114112) {\n                                        o = c;\n                                    }\n                                }\n                        }\n                    }\n                    if (o === null) {\n                        o = 65533;\n                        u = 1;\n                    } else if (o > 65535) {\n                        o -= 65536;\n                        f.push(o >>> 10 & 1023 | 55296);\n                        o = 56320 | o & 1023;\n                    }\n                    f.push(o);\n                    n += u;\n                }\n                return decodeCodePointsArray(f);\n            }\n            var u = 4096;\n            function decodeCodePointsArray(e) {\n                var r = e.length;\n                if (r <= u) {\n                    return String.fromCharCode.apply(String, e);\n                }\n                var t = \"\";\n                var f = 0;\n                while(f < r){\n                    t += String.fromCharCode.apply(String, e.slice(f, f += u));\n                }\n                return t;\n            }\n            function asciiSlice(e, r, t) {\n                var f = \"\";\n                t = Math.min(e.length, t);\n                for(var n = r; n < t; ++n){\n                    f += String.fromCharCode(e[n] & 127);\n                }\n                return f;\n            }\n            function latin1Slice(e, r, t) {\n                var f = \"\";\n                t = Math.min(e.length, t);\n                for(var n = r; n < t; ++n){\n                    f += String.fromCharCode(e[n]);\n                }\n                return f;\n            }\n            function hexSlice(e, r, t) {\n                var f = e.length;\n                if (!r || r < 0) r = 0;\n                if (!t || t < 0 || t > f) t = f;\n                var n = \"\";\n                for(var i = r; i < t; ++i){\n                    n += s[e[i]];\n                }\n                return n;\n            }\n            function utf16leSlice(e, r, t) {\n                var f = e.slice(r, t);\n                var n = \"\";\n                for(var i = 0; i < f.length; i += 2){\n                    n += String.fromCharCode(f[i] + f[i + 1] * 256);\n                }\n                return n;\n            }\n            Buffer.prototype.slice = function slice(e, r) {\n                var t = this.length;\n                e = ~~e;\n                r = r === undefined ? t : ~~r;\n                if (e < 0) {\n                    e += t;\n                    if (e < 0) e = 0;\n                } else if (e > t) {\n                    e = t;\n                }\n                if (r < 0) {\n                    r += t;\n                    if (r < 0) r = 0;\n                } else if (r > t) {\n                    r = t;\n                }\n                if (r < e) r = e;\n                var f = this.subarray(e, r);\n                Object.setPrototypeOf(f, Buffer.prototype);\n                return f;\n            };\n            function checkOffset(e, r, t) {\n                if (e % 1 !== 0 || e < 0) throw new RangeError(\"offset is not uint\");\n                if (e + r > t) throw new RangeError(\"Trying to access beyond buffer length\");\n            }\n            Buffer.prototype.readUIntLE = function readUIntLE(e, r, t) {\n                e = e >>> 0;\n                r = r >>> 0;\n                if (!t) checkOffset(e, r, this.length);\n                var f = this[e];\n                var n = 1;\n                var i = 0;\n                while(++i < r && (n *= 256)){\n                    f += this[e + i] * n;\n                }\n                return f;\n            };\n            Buffer.prototype.readUIntBE = function readUIntBE(e, r, t) {\n                e = e >>> 0;\n                r = r >>> 0;\n                if (!t) {\n                    checkOffset(e, r, this.length);\n                }\n                var f = this[e + --r];\n                var n = 1;\n                while(r > 0 && (n *= 256)){\n                    f += this[e + --r] * n;\n                }\n                return f;\n            };\n            Buffer.prototype.readUInt8 = function readUInt8(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 1, this.length);\n                return this[e];\n            };\n            Buffer.prototype.readUInt16LE = function readUInt16LE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 2, this.length);\n                return this[e] | this[e + 1] << 8;\n            };\n            Buffer.prototype.readUInt16BE = function readUInt16BE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 2, this.length);\n                return this[e] << 8 | this[e + 1];\n            };\n            Buffer.prototype.readUInt32LE = function readUInt32LE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;\n            };\n            Buffer.prototype.readUInt32BE = function readUInt32BE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n            };\n            Buffer.prototype.readIntLE = function readIntLE(e, r, t) {\n                e = e >>> 0;\n                r = r >>> 0;\n                if (!t) checkOffset(e, r, this.length);\n                var f = this[e];\n                var n = 1;\n                var i = 0;\n                while(++i < r && (n *= 256)){\n                    f += this[e + i] * n;\n                }\n                n *= 128;\n                if (f >= n) f -= Math.pow(2, 8 * r);\n                return f;\n            };\n            Buffer.prototype.readIntBE = function readIntBE(e, r, t) {\n                e = e >>> 0;\n                r = r >>> 0;\n                if (!t) checkOffset(e, r, this.length);\n                var f = r;\n                var n = 1;\n                var i = this[e + --f];\n                while(f > 0 && (n *= 256)){\n                    i += this[e + --f] * n;\n                }\n                n *= 128;\n                if (i >= n) i -= Math.pow(2, 8 * r);\n                return i;\n            };\n            Buffer.prototype.readInt8 = function readInt8(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 1, this.length);\n                if (!(this[e] & 128)) return this[e];\n                return (255 - this[e] + 1) * -1;\n            };\n            Buffer.prototype.readInt16LE = function readInt16LE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 2, this.length);\n                var t = this[e] | this[e + 1] << 8;\n                return t & 32768 ? t | 4294901760 : t;\n            };\n            Buffer.prototype.readInt16BE = function readInt16BE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 2, this.length);\n                var t = this[e + 1] | this[e] << 8;\n                return t & 32768 ? t | 4294901760 : t;\n            };\n            Buffer.prototype.readInt32LE = function readInt32LE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n            };\n            Buffer.prototype.readInt32BE = function readInt32BE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n            };\n            Buffer.prototype.readFloatLE = function readFloatLE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return n.read(this, e, true, 23, 4);\n            };\n            Buffer.prototype.readFloatBE = function readFloatBE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 4, this.length);\n                return n.read(this, e, false, 23, 4);\n            };\n            Buffer.prototype.readDoubleLE = function readDoubleLE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 8, this.length);\n                return n.read(this, e, true, 52, 8);\n            };\n            Buffer.prototype.readDoubleBE = function readDoubleBE(e, r) {\n                e = e >>> 0;\n                if (!r) checkOffset(e, 8, this.length);\n                return n.read(this, e, false, 52, 8);\n            };\n            function checkInt(e, r, t, f, n, i) {\n                if (!Buffer.isBuffer(e)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n                if (r > n || r < i) throw new RangeError('\"value\" argument is out of bounds');\n                if (t + f > e.length) throw new RangeError(\"Index out of range\");\n            }\n            Buffer.prototype.writeUIntLE = function writeUIntLE(e, r, t, f) {\n                e = +e;\n                r = r >>> 0;\n                t = t >>> 0;\n                if (!f) {\n                    var n = Math.pow(2, 8 * t) - 1;\n                    checkInt(this, e, r, t, n, 0);\n                }\n                var i = 1;\n                var o = 0;\n                this[r] = e & 255;\n                while(++o < t && (i *= 256)){\n                    this[r + o] = e / i & 255;\n                }\n                return r + t;\n            };\n            Buffer.prototype.writeUIntBE = function writeUIntBE(e, r, t, f) {\n                e = +e;\n                r = r >>> 0;\n                t = t >>> 0;\n                if (!f) {\n                    var n = Math.pow(2, 8 * t) - 1;\n                    checkInt(this, e, r, t, n, 0);\n                }\n                var i = t - 1;\n                var o = 1;\n                this[r + i] = e & 255;\n                while(--i >= 0 && (o *= 256)){\n                    this[r + i] = e / o & 255;\n                }\n                return r + t;\n            };\n            Buffer.prototype.writeUInt8 = function writeUInt8(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 1, 255, 0);\n                this[r] = e & 255;\n                return r + 1;\n            };\n            Buffer.prototype.writeUInt16LE = function writeUInt16LE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 2, 65535, 0);\n                this[r] = e & 255;\n                this[r + 1] = e >>> 8;\n                return r + 2;\n            };\n            Buffer.prototype.writeUInt16BE = function writeUInt16BE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 2, 65535, 0);\n                this[r] = e >>> 8;\n                this[r + 1] = e & 255;\n                return r + 2;\n            };\n            Buffer.prototype.writeUInt32LE = function writeUInt32LE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 4, 4294967295, 0);\n                this[r + 3] = e >>> 24;\n                this[r + 2] = e >>> 16;\n                this[r + 1] = e >>> 8;\n                this[r] = e & 255;\n                return r + 4;\n            };\n            Buffer.prototype.writeUInt32BE = function writeUInt32BE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 4, 4294967295, 0);\n                this[r] = e >>> 24;\n                this[r + 1] = e >>> 16;\n                this[r + 2] = e >>> 8;\n                this[r + 3] = e & 255;\n                return r + 4;\n            };\n            Buffer.prototype.writeIntLE = function writeIntLE(e, r, t, f) {\n                e = +e;\n                r = r >>> 0;\n                if (!f) {\n                    var n = Math.pow(2, 8 * t - 1);\n                    checkInt(this, e, r, t, n - 1, -n);\n                }\n                var i = 0;\n                var o = 1;\n                var u = 0;\n                this[r] = e & 255;\n                while(++i < t && (o *= 256)){\n                    if (e < 0 && u === 0 && this[r + i - 1] !== 0) {\n                        u = 1;\n                    }\n                    this[r + i] = (e / o >> 0) - u & 255;\n                }\n                return r + t;\n            };\n            Buffer.prototype.writeIntBE = function writeIntBE(e, r, t, f) {\n                e = +e;\n                r = r >>> 0;\n                if (!f) {\n                    var n = Math.pow(2, 8 * t - 1);\n                    checkInt(this, e, r, t, n - 1, -n);\n                }\n                var i = t - 1;\n                var o = 1;\n                var u = 0;\n                this[r + i] = e & 255;\n                while(--i >= 0 && (o *= 256)){\n                    if (e < 0 && u === 0 && this[r + i + 1] !== 0) {\n                        u = 1;\n                    }\n                    this[r + i] = (e / o >> 0) - u & 255;\n                }\n                return r + t;\n            };\n            Buffer.prototype.writeInt8 = function writeInt8(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 1, 127, -128);\n                if (e < 0) e = 255 + e + 1;\n                this[r] = e & 255;\n                return r + 1;\n            };\n            Buffer.prototype.writeInt16LE = function writeInt16LE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 2, 32767, -32768);\n                this[r] = e & 255;\n                this[r + 1] = e >>> 8;\n                return r + 2;\n            };\n            Buffer.prototype.writeInt16BE = function writeInt16BE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 2, 32767, -32768);\n                this[r] = e >>> 8;\n                this[r + 1] = e & 255;\n                return r + 2;\n            };\n            Buffer.prototype.writeInt32LE = function writeInt32LE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 4, 2147483647, -2147483648);\n                this[r] = e & 255;\n                this[r + 1] = e >>> 8;\n                this[r + 2] = e >>> 16;\n                this[r + 3] = e >>> 24;\n                return r + 4;\n            };\n            Buffer.prototype.writeInt32BE = function writeInt32BE(e, r, t) {\n                e = +e;\n                r = r >>> 0;\n                if (!t) checkInt(this, e, r, 4, 2147483647, -2147483648);\n                if (e < 0) e = 4294967295 + e + 1;\n                this[r] = e >>> 24;\n                this[r + 1] = e >>> 16;\n                this[r + 2] = e >>> 8;\n                this[r + 3] = e & 255;\n                return r + 4;\n            };\n            function checkIEEE754(e, r, t, f, n, i) {\n                if (t + f > e.length) throw new RangeError(\"Index out of range\");\n                if (t < 0) throw new RangeError(\"Index out of range\");\n            }\n            function writeFloat(e, r, t, f, i) {\n                r = +r;\n                t = t >>> 0;\n                if (!i) {\n                    checkIEEE754(e, r, t, 4, 34028234663852886e22, -34028234663852886e22);\n                }\n                n.write(e, r, t, f, 23, 4);\n                return t + 4;\n            }\n            Buffer.prototype.writeFloatLE = function writeFloatLE(e, r, t) {\n                return writeFloat(this, e, r, true, t);\n            };\n            Buffer.prototype.writeFloatBE = function writeFloatBE(e, r, t) {\n                return writeFloat(this, e, r, false, t);\n            };\n            function writeDouble(e, r, t, f, i) {\n                r = +r;\n                t = t >>> 0;\n                if (!i) {\n                    checkIEEE754(e, r, t, 8, 17976931348623157e292, -17976931348623157e292);\n                }\n                n.write(e, r, t, f, 52, 8);\n                return t + 8;\n            }\n            Buffer.prototype.writeDoubleLE = function writeDoubleLE(e, r, t) {\n                return writeDouble(this, e, r, true, t);\n            };\n            Buffer.prototype.writeDoubleBE = function writeDoubleBE(e, r, t) {\n                return writeDouble(this, e, r, false, t);\n            };\n            Buffer.prototype.copy = function copy(e, r, t, f) {\n                if (!Buffer.isBuffer(e)) throw new TypeError(\"argument should be a Buffer\");\n                if (!t) t = 0;\n                if (!f && f !== 0) f = this.length;\n                if (r >= e.length) r = e.length;\n                if (!r) r = 0;\n                if (f > 0 && f < t) f = t;\n                if (f === t) return 0;\n                if (e.length === 0 || this.length === 0) return 0;\n                if (r < 0) {\n                    throw new RangeError(\"targetStart out of bounds\");\n                }\n                if (t < 0 || t >= this.length) throw new RangeError(\"Index out of range\");\n                if (f < 0) throw new RangeError(\"sourceEnd out of bounds\");\n                if (f > this.length) f = this.length;\n                if (e.length - r < f - t) {\n                    f = e.length - r + t;\n                }\n                var n = f - t;\n                if (this === e && typeof Uint8Array.prototype.copyWithin === \"function\") {\n                    this.copyWithin(r, t, f);\n                } else if (this === e && t < r && r < f) {\n                    for(var i = n - 1; i >= 0; --i){\n                        e[i + r] = this[i + t];\n                    }\n                } else {\n                    Uint8Array.prototype.set.call(e, this.subarray(t, f), r);\n                }\n                return n;\n            };\n            Buffer.prototype.fill = function fill(e, r, t, f) {\n                if (typeof e === \"string\") {\n                    if (typeof r === \"string\") {\n                        f = r;\n                        r = 0;\n                        t = this.length;\n                    } else if (typeof t === \"string\") {\n                        f = t;\n                        t = this.length;\n                    }\n                    if (f !== undefined && typeof f !== \"string\") {\n                        throw new TypeError(\"encoding must be a string\");\n                    }\n                    if (typeof f === \"string\" && !Buffer.isEncoding(f)) {\n                        throw new TypeError(\"Unknown encoding: \" + f);\n                    }\n                    if (e.length === 1) {\n                        var n = e.charCodeAt(0);\n                        if (f === \"utf8\" && n < 128 || f === \"latin1\") {\n                            e = n;\n                        }\n                    }\n                } else if (typeof e === \"number\") {\n                    e = e & 255;\n                } else if (typeof e === \"boolean\") {\n                    e = Number(e);\n                }\n                if (r < 0 || this.length < r || this.length < t) {\n                    throw new RangeError(\"Out of range index\");\n                }\n                if (t <= r) {\n                    return this;\n                }\n                r = r >>> 0;\n                t = t === undefined ? this.length : t >>> 0;\n                if (!e) e = 0;\n                var i;\n                if (typeof e === \"number\") {\n                    for(i = r; i < t; ++i){\n                        this[i] = e;\n                    }\n                } else {\n                    var o = Buffer.isBuffer(e) ? e : Buffer.from(e, f);\n                    var u = o.length;\n                    if (u === 0) {\n                        throw new TypeError('The value \"' + e + '\" is invalid for argument \"value\"');\n                    }\n                    for(i = 0; i < t - r; ++i){\n                        this[i + r] = o[i % u];\n                    }\n                }\n                return this;\n            };\n            var a = /[^+/0-9A-Za-z-_]/g;\n            function base64clean(e) {\n                e = e.split(\"=\")[0];\n                e = e.trim().replace(a, \"\");\n                if (e.length < 2) return \"\";\n                while(e.length % 4 !== 0){\n                    e = e + \"=\";\n                }\n                return e;\n            }\n            function utf8ToBytes(e, r) {\n                r = r || Infinity;\n                var t;\n                var f = e.length;\n                var n = null;\n                var i = [];\n                for(var o = 0; o < f; ++o){\n                    t = e.charCodeAt(o);\n                    if (t > 55295 && t < 57344) {\n                        if (!n) {\n                            if (t > 56319) {\n                                if ((r -= 3) > -1) i.push(239, 191, 189);\n                                continue;\n                            } else if (o + 1 === f) {\n                                if ((r -= 3) > -1) i.push(239, 191, 189);\n                                continue;\n                            }\n                            n = t;\n                            continue;\n                        }\n                        if (t < 56320) {\n                            if ((r -= 3) > -1) i.push(239, 191, 189);\n                            n = t;\n                            continue;\n                        }\n                        t = (n - 55296 << 10 | t - 56320) + 65536;\n                    } else if (n) {\n                        if ((r -= 3) > -1) i.push(239, 191, 189);\n                    }\n                    n = null;\n                    if (t < 128) {\n                        if ((r -= 1) < 0) break;\n                        i.push(t);\n                    } else if (t < 2048) {\n                        if ((r -= 2) < 0) break;\n                        i.push(t >> 6 | 192, t & 63 | 128);\n                    } else if (t < 65536) {\n                        if ((r -= 3) < 0) break;\n                        i.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);\n                    } else if (t < 1114112) {\n                        if ((r -= 4) < 0) break;\n                        i.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);\n                    } else {\n                        throw new Error(\"Invalid code point\");\n                    }\n                }\n                return i;\n            }\n            function asciiToBytes(e) {\n                var r = [];\n                for(var t = 0; t < e.length; ++t){\n                    r.push(e.charCodeAt(t) & 255);\n                }\n                return r;\n            }\n            function utf16leToBytes(e, r) {\n                var t, f, n;\n                var i = [];\n                for(var o = 0; o < e.length; ++o){\n                    if ((r -= 2) < 0) break;\n                    t = e.charCodeAt(o);\n                    f = t >> 8;\n                    n = t % 256;\n                    i.push(n);\n                    i.push(f);\n                }\n                return i;\n            }\n            function base64ToBytes(e) {\n                return f.toByteArray(base64clean(e));\n            }\n            function blitBuffer(e, r, t, f) {\n                for(var n = 0; n < f; ++n){\n                    if (n + t >= r.length || n >= e.length) break;\n                    r[n + t] = e[n];\n                }\n                return n;\n            }\n            function isInstance(e, r) {\n                return e instanceof r || e != null && e.constructor != null && e.constructor.name != null && e.constructor.name === r.name;\n            }\n            function numberIsNaN(e) {\n                return e !== e;\n            }\n            var s = function() {\n                var e = \"0123456789abcdef\";\n                var r = new Array(256);\n                for(var t = 0; t < 16; ++t){\n                    var f = t * 16;\n                    for(var n = 0; n < 16; ++n){\n                        r[f + n] = e[t] + e[n];\n                    }\n                }\n                return r;\n            }();\n        },\n        783: function(e, r) {\n            /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ r.read = function(e, r, t, f, n) {\n                var i, o;\n                var u = n * 8 - f - 1;\n                var a = (1 << u) - 1;\n                var s = a >> 1;\n                var h = -7;\n                var c = t ? n - 1 : 0;\n                var l = t ? -1 : 1;\n                var p = e[r + c];\n                c += l;\n                i = p & (1 << -h) - 1;\n                p >>= -h;\n                h += u;\n                for(; h > 0; i = i * 256 + e[r + c], c += l, h -= 8){}\n                o = i & (1 << -h) - 1;\n                i >>= -h;\n                h += f;\n                for(; h > 0; o = o * 256 + e[r + c], c += l, h -= 8){}\n                if (i === 0) {\n                    i = 1 - s;\n                } else if (i === a) {\n                    return o ? NaN : (p ? -1 : 1) * Infinity;\n                } else {\n                    o = o + Math.pow(2, f);\n                    i = i - s;\n                }\n                return (p ? -1 : 1) * o * Math.pow(2, i - f);\n            };\n            r.write = function(e, r, t, f, n, i) {\n                var o, u, a;\n                var s = i * 8 - n - 1;\n                var h = (1 << s) - 1;\n                var c = h >> 1;\n                var l = n === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n                var p = f ? 0 : i - 1;\n                var y = f ? 1 : -1;\n                var g = r < 0 || r === 0 && 1 / r < 0 ? 1 : 0;\n                r = Math.abs(r);\n                if (isNaN(r) || r === Infinity) {\n                    u = isNaN(r) ? 1 : 0;\n                    o = h;\n                } else {\n                    o = Math.floor(Math.log(r) / Math.LN2);\n                    if (r * (a = Math.pow(2, -o)) < 1) {\n                        o--;\n                        a *= 2;\n                    }\n                    if (o + c >= 1) {\n                        r += l / a;\n                    } else {\n                        r += l * Math.pow(2, 1 - c);\n                    }\n                    if (r * a >= 2) {\n                        o++;\n                        a /= 2;\n                    }\n                    if (o + c >= h) {\n                        u = 0;\n                        o = h;\n                    } else if (o + c >= 1) {\n                        u = (r * a - 1) * Math.pow(2, n);\n                        o = o + c;\n                    } else {\n                        u = r * Math.pow(2, c - 1) * Math.pow(2, n);\n                        o = 0;\n                    }\n                }\n                for(; n >= 8; e[t + p] = u & 255, p += y, u /= 256, n -= 8){}\n                o = o << n | u;\n                s += n;\n                for(; s > 0; e[t + p] = o & 255, p += y, o /= 256, s -= 8){}\n                e[t + p - y] |= g * 128;\n            };\n        }\n    };\n    var r = {};\n    function __nccwpck_require__(t) {\n        var f = r[t];\n        if (f !== undefined) {\n            return f.exports;\n        }\n        var n = r[t] = {\n            exports: {}\n        };\n        var i = true;\n        try {\n            e[t](n, n.exports, __nccwpck_require__);\n            i = false;\n        } finally{\n            if (i) delete r[t];\n        }\n        return n.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var t = __nccwpck_require__(72);\n    module.exports = t;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/buffer/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/nth-check/lib/compile.js":
/*!***********************************************!*\
  !*** ./node_modules/nth-check/lib/compile.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.generate = exports.compile = void 0;\nvar boolbase_1 = __importDefault(__webpack_require__(/*! boolbase */ \"(app-pages-browser)/./node_modules/boolbase/index.js\"));\n/**\n * Returns a function that checks if an elements index matches the given rule\n * highly optimized to return the fastest solution.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A highly optimized function that returns whether an index matches the nth-check.\n * @example\n *\n * ```js\n * const check = nthCheck.compile([2, 3]);\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n * ```\n */ function compile(parsed) {\n    var a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    var b = parsed[1] - 1;\n    /*\n     * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.\n     * Besides, the specification states that no elements are\n     * matched when `a` and `b` are 0.\n     *\n     * `b < 0` here as we subtracted 1 from `b` above.\n     */ if (b < 0 && a <= 0) return boolbase_1.default.falseFunc;\n    // When `a` is in the range -1..1, it matches any element (so only `b` is checked).\n    if (a === -1) return function(index) {\n        return index <= b;\n    };\n    if (a === 0) return function(index) {\n        return index === b;\n    };\n    // When `b <= 0` and `a === 1`, they match any element.\n    if (a === 1) return b < 0 ? boolbase_1.default.trueFunc : function(index) {\n        return index >= b;\n    };\n    /*\n     * Otherwise, modulo can be used to check if there is a match.\n     *\n     * Modulo doesn't care about the sign, so let's use `a`s absolute value.\n     */ var absA = Math.abs(a);\n    // Get `b mod a`, + a if this is negative.\n    var bMod = (b % absA + absA) % absA;\n    return a > 1 ? function(index) {\n        return index >= b && index % absA === bMod;\n    } : function(index) {\n        return index <= b && index % absA === bMod;\n    };\n}\nexports.compile = compile;\n/**\n * Returns a function that produces a monotonously increasing sequence of indices.\n *\n * If the sequence has an end, the returned function will return `null` after\n * the last index in the sequence.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A function that produces a sequence of indices.\n * @example <caption>Always increasing (2n+3)</caption>\n *\n * ```js\n * const gen = nthCheck.generate([2, 3])\n *\n * gen() // `1`\n * gen() // `3`\n * gen() // `5`\n * gen() // `8`\n * gen() // `11`\n * ```\n *\n * @example <caption>With end value (-2n+10)</caption>\n *\n * ```js\n *\n * const gen = nthCheck.generate([-2, 5]);\n *\n * gen() // 0\n * gen() // 2\n * gen() // 4\n * gen() // null\n * ```\n */ function generate(parsed) {\n    var a = parsed[0];\n    // Subtract 1 from `b`, to convert from one- to zero-indexed.\n    var b = parsed[1] - 1;\n    var n = 0;\n    // Make sure to always return an increasing sequence\n    if (a < 0) {\n        var aPos_1 = -a;\n        // Get `b mod a`\n        var minValue_1 = (b % aPos_1 + aPos_1) % aPos_1;\n        return function() {\n            var val = minValue_1 + aPos_1 * n++;\n            return val > b ? null : val;\n        };\n    }\n    if (a === 0) return b < 0 ? function() {\n        return null;\n    } : function() {\n        return n++ === 0 ? b : null;\n    };\n    if (b < 0) {\n        b += a * Math.ceil(-b / a);\n    }\n    return function() {\n        return a * n++ + b;\n    };\n}\nexports.generate = generate; //# sourceMappingURL=compile.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9udGgtY2hlY2svbGliL2NvbXBpbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHQSxlQUFlLEdBQUcsS0FBSztBQUMxQyxJQUFJSSxhQUFhVCxnQkFBZ0JVLG1CQUFPQSxDQUFDLHNFQUFVO0FBQ25EOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBbUJDLEdBQ0QsU0FBU0YsUUFBUUcsTUFBTTtJQUNuQixJQUFJQyxJQUFJRCxNQUFNLENBQUMsRUFBRTtJQUNqQiw2REFBNkQ7SUFDN0QsSUFBSUUsSUFBSUYsTUFBTSxDQUFDLEVBQUUsR0FBRztJQUNwQjs7Ozs7O0tBTUMsR0FDRCxJQUFJRSxJQUFJLEtBQUtELEtBQUssR0FDZCxPQUFPSCxXQUFXSyxPQUFPLENBQUNDLFNBQVM7SUFDdkMsbUZBQW1GO0lBQ25GLElBQUlILE1BQU0sQ0FBQyxHQUNQLE9BQU8sU0FBVUksS0FBSztRQUFJLE9BQU9BLFNBQVNIO0lBQUc7SUFDakQsSUFBSUQsTUFBTSxHQUNOLE9BQU8sU0FBVUksS0FBSztRQUFJLE9BQU9BLFVBQVVIO0lBQUc7SUFDbEQsdURBQXVEO0lBQ3ZELElBQUlELE1BQU0sR0FDTixPQUFPQyxJQUFJLElBQUlKLFdBQVdLLE9BQU8sQ0FBQ0csUUFBUSxHQUFHLFNBQVVELEtBQUs7UUFBSSxPQUFPQSxTQUFTSDtJQUFHO0lBQ3ZGOzs7O0tBSUMsR0FDRCxJQUFJSyxPQUFPQyxLQUFLQyxHQUFHLENBQUNSO0lBQ3BCLDBDQUEwQztJQUMxQyxJQUFJUyxPQUFPLENBQUMsSUFBS0gsT0FBUUEsSUFBRyxJQUFLQTtJQUNqQyxPQUFPTixJQUFJLElBQ0wsU0FBVUksS0FBSztRQUFJLE9BQU9BLFNBQVNILEtBQUtHLFFBQVFFLFNBQVNHO0lBQU0sSUFDL0QsU0FBVUwsS0FBSztRQUFJLE9BQU9BLFNBQVNILEtBQUtHLFFBQVFFLFNBQVNHO0lBQU07QUFDekU7QUFDQWhCLGVBQWUsR0FBR0c7QUFDbEI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0ErQkMsR0FDRCxTQUFTRCxTQUFTSSxNQUFNO0lBQ3BCLElBQUlDLElBQUlELE1BQU0sQ0FBQyxFQUFFO0lBQ2pCLDZEQUE2RDtJQUM3RCxJQUFJRSxJQUFJRixNQUFNLENBQUMsRUFBRSxHQUFHO0lBQ3BCLElBQUlXLElBQUk7SUFDUixvREFBb0Q7SUFDcEQsSUFBSVYsSUFBSSxHQUFHO1FBQ1AsSUFBSVcsU0FBUyxDQUFDWDtRQUNkLGdCQUFnQjtRQUNoQixJQUFJWSxhQUFhLENBQUMsSUFBS0QsU0FBVUEsTUFBSyxJQUFLQTtRQUMzQyxPQUFPO1lBQ0gsSUFBSUUsTUFBTUQsYUFBYUQsU0FBU0Q7WUFDaEMsT0FBT0csTUFBTVosSUFBSSxPQUFPWTtRQUM1QjtJQUNKO0lBQ0EsSUFBSWIsTUFBTSxHQUNOLE9BQU9DLElBQUksSUFFSDtRQUFjLE9BQU87SUFBTSxJQUUzQjtRQUFjLE9BQVFTLFFBQVEsSUFBSVQsSUFBSTtJQUFPO0lBQ3pELElBQUlBLElBQUksR0FBRztRQUNQQSxLQUFLRCxJQUFJTyxLQUFLTyxJQUFJLENBQUMsQ0FBQ2IsSUFBSUQ7SUFDNUI7SUFDQSxPQUFPO1FBQWMsT0FBT0EsSUFBSVUsTUFBTVQ7SUFBRztBQUM3QztBQUNBUixnQkFBZ0IsR0FBR0UsVUFDbkIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9udGgtY2hlY2svbGliL2NvbXBpbGUuanM/ZTJjMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhdGUgPSBleHBvcnRzLmNvbXBpbGUgPSB2b2lkIDA7XG52YXIgYm9vbGJhc2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYm9vbGJhc2VcIikpO1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgYW4gZWxlbWVudHMgaW5kZXggbWF0Y2hlcyB0aGUgZ2l2ZW4gcnVsZVxuICogaGlnaGx5IG9wdGltaXplZCB0byByZXR1cm4gdGhlIGZhc3Rlc3Qgc29sdXRpb24uXG4gKlxuICogQHBhcmFtIHBhcnNlZCBBIHR1cGxlIFthLCBiXSwgYXMgcmV0dXJuZWQgYnkgYHBhcnNlYC5cbiAqIEByZXR1cm5zIEEgaGlnaGx5IG9wdGltaXplZCBmdW5jdGlvbiB0aGF0IHJldHVybnMgd2hldGhlciBhbiBpbmRleCBtYXRjaGVzIHRoZSBudGgtY2hlY2suXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBjaGVjayA9IG50aENoZWNrLmNvbXBpbGUoWzIsIDNdKTtcbiAqXG4gKiBjaGVjaygwKTsgLy8gYGZhbHNlYFxuICogY2hlY2soMSk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDIpOyAvLyBgdHJ1ZWBcbiAqIGNoZWNrKDMpOyAvLyBgZmFsc2VgXG4gKiBjaGVjayg0KTsgLy8gYHRydWVgXG4gKiBjaGVjayg1KTsgLy8gYGZhbHNlYFxuICogY2hlY2soNik7IC8vIGB0cnVlYFxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUocGFyc2VkKSB7XG4gICAgdmFyIGEgPSBwYXJzZWRbMF07XG4gICAgLy8gU3VidHJhY3QgMSBmcm9tIGBiYCwgdG8gY29udmVydCBmcm9tIG9uZS0gdG8gemVyby1pbmRleGVkLlxuICAgIHZhciBiID0gcGFyc2VkWzFdIC0gMTtcbiAgICAvKlxuICAgICAqIFdoZW4gYGIgPD0gMGAsIGBhICogbmAgd29uJ3QgYmUgbGVhZCB0byBhbnkgbWF0Y2hlcyBmb3IgYGEgPCAwYC5cbiAgICAgKiBCZXNpZGVzLCB0aGUgc3BlY2lmaWNhdGlvbiBzdGF0ZXMgdGhhdCBubyBlbGVtZW50cyBhcmVcbiAgICAgKiBtYXRjaGVkIHdoZW4gYGFgIGFuZCBgYmAgYXJlIDAuXG4gICAgICpcbiAgICAgKiBgYiA8IDBgIGhlcmUgYXMgd2Ugc3VidHJhY3RlZCAxIGZyb20gYGJgIGFib3ZlLlxuICAgICAqL1xuICAgIGlmIChiIDwgMCAmJiBhIDw9IDApXG4gICAgICAgIHJldHVybiBib29sYmFzZV8xLmRlZmF1bHQuZmFsc2VGdW5jO1xuICAgIC8vIFdoZW4gYGFgIGlzIGluIHRoZSByYW5nZSAtMS4uMSwgaXQgbWF0Y2hlcyBhbnkgZWxlbWVudCAoc28gb25seSBgYmAgaXMgY2hlY2tlZCkuXG4gICAgaWYgKGEgPT09IC0xKVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBpbmRleCA8PSBiOyB9O1xuICAgIGlmIChhID09PSAwKVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBpbmRleCA9PT0gYjsgfTtcbiAgICAvLyBXaGVuIGBiIDw9IDBgIGFuZCBgYSA9PT0gMWAsIHRoZXkgbWF0Y2ggYW55IGVsZW1lbnQuXG4gICAgaWYgKGEgPT09IDEpXG4gICAgICAgIHJldHVybiBiIDwgMCA/IGJvb2xiYXNlXzEuZGVmYXVsdC50cnVlRnVuYyA6IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gaW5kZXggPj0gYjsgfTtcbiAgICAvKlxuICAgICAqIE90aGVyd2lzZSwgbW9kdWxvIGNhbiBiZSB1c2VkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgbWF0Y2guXG4gICAgICpcbiAgICAgKiBNb2R1bG8gZG9lc24ndCBjYXJlIGFib3V0IHRoZSBzaWduLCBzbyBsZXQncyB1c2UgYGFgcyBhYnNvbHV0ZSB2YWx1ZS5cbiAgICAgKi9cbiAgICB2YXIgYWJzQSA9IE1hdGguYWJzKGEpO1xuICAgIC8vIEdldCBgYiBtb2QgYWAsICsgYSBpZiB0aGlzIGlzIG5lZ2F0aXZlLlxuICAgIHZhciBiTW9kID0gKChiICUgYWJzQSkgKyBhYnNBKSAlIGFic0E7XG4gICAgcmV0dXJuIGEgPiAxXG4gICAgICAgID8gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBpbmRleCA+PSBiICYmIGluZGV4ICUgYWJzQSA9PT0gYk1vZDsgfVxuICAgICAgICA6IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gaW5kZXggPD0gYiAmJiBpbmRleCAlIGFic0EgPT09IGJNb2Q7IH07XG59XG5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlO1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhIG1vbm90b25vdXNseSBpbmNyZWFzaW5nIHNlcXVlbmNlIG9mIGluZGljZXMuXG4gKlxuICogSWYgdGhlIHNlcXVlbmNlIGhhcyBhbiBlbmQsIHRoZSByZXR1cm5lZCBmdW5jdGlvbiB3aWxsIHJldHVybiBgbnVsbGAgYWZ0ZXJcbiAqIHRoZSBsYXN0IGluZGV4IGluIHRoZSBzZXF1ZW5jZS5cbiAqXG4gKiBAcGFyYW0gcGFyc2VkIEEgdHVwbGUgW2EsIGJdLCBhcyByZXR1cm5lZCBieSBgcGFyc2VgLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGEgc2VxdWVuY2Ugb2YgaW5kaWNlcy5cbiAqIEBleGFtcGxlIDxjYXB0aW9uPkFsd2F5cyBpbmNyZWFzaW5nICgybiszKTwvY2FwdGlvbj5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VuID0gbnRoQ2hlY2suZ2VuZXJhdGUoWzIsIDNdKVxuICpcbiAqIGdlbigpIC8vIGAxYFxuICogZ2VuKCkgLy8gYDNgXG4gKiBnZW4oKSAvLyBgNWBcbiAqIGdlbigpIC8vIGA4YFxuICogZ2VuKCkgLy8gYDExYFxuICogYGBgXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+V2l0aCBlbmQgdmFsdWUgKC0ybisxMCk8L2NhcHRpb24+XG4gKlxuICogYGBganNcbiAqXG4gKiBjb25zdCBnZW4gPSBudGhDaGVjay5nZW5lcmF0ZShbLTIsIDVdKTtcbiAqXG4gKiBnZW4oKSAvLyAwXG4gKiBnZW4oKSAvLyAyXG4gKiBnZW4oKSAvLyA0XG4gKiBnZW4oKSAvLyBudWxsXG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGUocGFyc2VkKSB7XG4gICAgdmFyIGEgPSBwYXJzZWRbMF07XG4gICAgLy8gU3VidHJhY3QgMSBmcm9tIGBiYCwgdG8gY29udmVydCBmcm9tIG9uZS0gdG8gemVyby1pbmRleGVkLlxuICAgIHZhciBiID0gcGFyc2VkWzFdIC0gMTtcbiAgICB2YXIgbiA9IDA7XG4gICAgLy8gTWFrZSBzdXJlIHRvIGFsd2F5cyByZXR1cm4gYW4gaW5jcmVhc2luZyBzZXF1ZW5jZVxuICAgIGlmIChhIDwgMCkge1xuICAgICAgICB2YXIgYVBvc18xID0gLWE7XG4gICAgICAgIC8vIEdldCBgYiBtb2QgYWBcbiAgICAgICAgdmFyIG1pblZhbHVlXzEgPSAoKGIgJSBhUG9zXzEpICsgYVBvc18xKSAlIGFQb3NfMTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBtaW5WYWx1ZV8xICsgYVBvc18xICogbisrO1xuICAgICAgICAgICAgcmV0dXJuIHZhbCA+IGIgPyBudWxsIDogdmFsO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoYSA9PT0gMClcbiAgICAgICAgcmV0dXJuIGIgPCAwXG4gICAgICAgICAgICA/IC8vIFRoZXJlIGFyZSBubyByZXN1bHQg4oCUIGFsd2F5cyByZXR1cm4gYG51bGxgXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgOiAvLyBSZXR1cm4gYGJgIGV4YWN0bHkgb25jZVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIChuKysgPT09IDAgPyBiIDogbnVsbCk7IH07XG4gICAgaWYgKGIgPCAwKSB7XG4gICAgICAgIGIgKz0gYSAqIE1hdGguY2VpbCgtYiAvIGEpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gYSAqIG4rKyArIGI7IH07XG59XG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21waWxlLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZW5lcmF0ZSIsImNvbXBpbGUiLCJib29sYmFzZV8xIiwicmVxdWlyZSIsInBhcnNlZCIsImEiLCJiIiwiZGVmYXVsdCIsImZhbHNlRnVuYyIsImluZGV4IiwidHJ1ZUZ1bmMiLCJhYnNBIiwiTWF0aCIsImFicyIsImJNb2QiLCJuIiwiYVBvc18xIiwibWluVmFsdWVfMSIsInZhbCIsImNlaWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/nth-check/lib/compile.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/nth-check/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/nth-check/lib/index.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sequence = exports.generate = exports.compile = exports.parse = void 0;\nvar parse_js_1 = __webpack_require__(/*! ./parse.js */ \"(app-pages-browser)/./node_modules/nth-check/lib/parse.js\");\nObject.defineProperty(exports, \"parse\", ({\n    enumerable: true,\n    get: function() {\n        return parse_js_1.parse;\n    }\n}));\nvar compile_js_1 = __webpack_require__(/*! ./compile.js */ \"(app-pages-browser)/./node_modules/nth-check/lib/compile.js\");\nObject.defineProperty(exports, \"compile\", ({\n    enumerable: true,\n    get: function() {\n        return compile_js_1.compile;\n    }\n}));\nObject.defineProperty(exports, \"generate\", ({\n    enumerable: true,\n    get: function() {\n        return compile_js_1.generate;\n    }\n}));\n/**\n * Parses and compiles a formula to a highly optimized function.\n * Combination of {@link parse} and {@link compile}.\n *\n * If the formula doesn't match any elements,\n * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\n * Otherwise, a function accepting an _index_ is returned, which returns\n * whether or not the passed _index_ matches the formula.\n *\n * Note: The nth-rule starts counting at `1`, the returned function at `0`.\n *\n * @param formula The formula to compile.\n * @example\n * const check = nthCheck(\"2n+3\");\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n */ function nthCheck(formula) {\n    return (0, compile_js_1.compile)((0, parse_js_1.parse)(formula));\n}\nexports[\"default\"] = nthCheck;\n/**\n * Parses and compiles a formula to a generator that produces a sequence of indices.\n * Combination of {@link parse} and {@link generate}.\n *\n * @param formula The formula to compile.\n * @returns A function that produces a sequence of indices.\n * @example <caption>Always increasing</caption>\n *\n * ```js\n * const gen = nthCheck.sequence('2n+3')\n *\n * gen() // `1`\n * gen() // `3`\n * gen() // `5`\n * gen() // `8`\n * gen() // `11`\n * ```\n *\n * @example <caption>With end value</caption>\n *\n * ```js\n *\n * const gen = nthCheck.sequence('-2n+5');\n *\n * gen() // 0\n * gen() // 2\n * gen() // 4\n * gen() // null\n * ```\n */ function sequence(formula) {\n    return (0, compile_js_1.generate)((0, parse_js_1.parse)(formula));\n}\nexports.sequence = sequence; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9udGgtY2hlY2svbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQkFBZ0IsR0FBR0EsZ0JBQWdCLEdBQUdBLGVBQWUsR0FBR0EsYUFBYSxHQUFHLEtBQUs7QUFDN0UsSUFBSU0sYUFBYUMsbUJBQU9BLENBQUMsNkVBQVk7QUFDckNULHlDQUF3QztJQUFFVSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPSCxXQUFXRCxLQUFLO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDNUcsSUFBSUssZUFBZUgsbUJBQU9BLENBQUMsaUZBQWM7QUFDekNULDJDQUEwQztJQUFFVSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxhQUFhTixPQUFPO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDbEhOLDRDQUEyQztJQUFFVSxZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxhQUFhUCxRQUFRO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEg7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FzQkMsR0FDRCxTQUFTUSxTQUFTQyxPQUFPO0lBQ3JCLE9BQU8sQ0FBQyxHQUFHRixhQUFhTixPQUFPLEVBQUUsQ0FBQyxHQUFHRSxXQUFXRCxLQUFLLEVBQUVPO0FBQzNEO0FBQ0FaLGtCQUFlLEdBQUdXO0FBQ2xCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQTZCQyxHQUNELFNBQVNULFNBQVNVLE9BQU87SUFDckIsT0FBTyxDQUFDLEdBQUdGLGFBQWFQLFFBQVEsRUFBRSxDQUFDLEdBQUdHLFdBQVdELEtBQUssRUFBRU87QUFDNUQ7QUFDQVosZ0JBQWdCLEdBQUdFLFVBQ25CLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbnRoLWNoZWNrL2xpYi9pbmRleC5qcz85ZGQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXF1ZW5jZSA9IGV4cG9ydHMuZ2VuZXJhdGUgPSBleHBvcnRzLmNvbXBpbGUgPSBleHBvcnRzLnBhcnNlID0gdm9pZCAwO1xudmFyIHBhcnNlX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJzZV9qc18xLnBhcnNlOyB9IH0pO1xudmFyIGNvbXBpbGVfanNfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21waWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21waWxlX2pzXzEuY29tcGlsZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdlbmVyYXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21waWxlX2pzXzEuZ2VuZXJhdGU7IH0gfSk7XG4vKipcbiAqIFBhcnNlcyBhbmQgY29tcGlsZXMgYSBmb3JtdWxhIHRvIGEgaGlnaGx5IG9wdGltaXplZCBmdW5jdGlvbi5cbiAqIENvbWJpbmF0aW9uIG9mIHtAbGluayBwYXJzZX0gYW5kIHtAbGluayBjb21waWxlfS5cbiAqXG4gKiBJZiB0aGUgZm9ybXVsYSBkb2Vzbid0IG1hdGNoIGFueSBlbGVtZW50cyxcbiAqIGl0IHJldHVybnMgW2Bib29sYmFzZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYjU1L2Jvb2xiYXNlKSdzIGBmYWxzZUZ1bmNgLlxuICogT3RoZXJ3aXNlLCBhIGZ1bmN0aW9uIGFjY2VwdGluZyBhbiBfaW5kZXhfIGlzIHJldHVybmVkLCB3aGljaCByZXR1cm5zXG4gKiB3aGV0aGVyIG9yIG5vdCB0aGUgcGFzc2VkIF9pbmRleF8gbWF0Y2hlcyB0aGUgZm9ybXVsYS5cbiAqXG4gKiBOb3RlOiBUaGUgbnRoLXJ1bGUgc3RhcnRzIGNvdW50aW5nIGF0IGAxYCwgdGhlIHJldHVybmVkIGZ1bmN0aW9uIGF0IGAwYC5cbiAqXG4gKiBAcGFyYW0gZm9ybXVsYSBUaGUgZm9ybXVsYSB0byBjb21waWxlLlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGNoZWNrID0gbnRoQ2hlY2soXCIybiszXCIpO1xuICpcbiAqIGNoZWNrKDApOyAvLyBgZmFsc2VgXG4gKiBjaGVjaygxKTsgLy8gYGZhbHNlYFxuICogY2hlY2soMik7IC8vIGB0cnVlYFxuICogY2hlY2soMyk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDQpOyAvLyBgdHJ1ZWBcbiAqIGNoZWNrKDUpOyAvLyBgZmFsc2VgXG4gKiBjaGVjayg2KTsgLy8gYHRydWVgXG4gKi9cbmZ1bmN0aW9uIG50aENoZWNrKGZvcm11bGEpIHtcbiAgICByZXR1cm4gKDAsIGNvbXBpbGVfanNfMS5jb21waWxlKSgoMCwgcGFyc2VfanNfMS5wYXJzZSkoZm9ybXVsYSkpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gbnRoQ2hlY2s7XG4vKipcbiAqIFBhcnNlcyBhbmQgY29tcGlsZXMgYSBmb3JtdWxhIHRvIGEgZ2VuZXJhdG9yIHRoYXQgcHJvZHVjZXMgYSBzZXF1ZW5jZSBvZiBpbmRpY2VzLlxuICogQ29tYmluYXRpb24gb2Yge0BsaW5rIHBhcnNlfSBhbmQge0BsaW5rIGdlbmVyYXRlfS5cbiAqXG4gKiBAcGFyYW0gZm9ybXVsYSBUaGUgZm9ybXVsYSB0byBjb21waWxlLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGEgc2VxdWVuY2Ugb2YgaW5kaWNlcy5cbiAqIEBleGFtcGxlIDxjYXB0aW9uPkFsd2F5cyBpbmNyZWFzaW5nPC9jYXB0aW9uPlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBnZW4gPSBudGhDaGVjay5zZXF1ZW5jZSgnMm4rMycpXG4gKlxuICogZ2VuKCkgLy8gYDFgXG4gKiBnZW4oKSAvLyBgM2BcbiAqIGdlbigpIC8vIGA1YFxuICogZ2VuKCkgLy8gYDhgXG4gKiBnZW4oKSAvLyBgMTFgXG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRoIGVuZCB2YWx1ZTwvY2FwdGlvbj5cbiAqXG4gKiBgYGBqc1xuICpcbiAqIGNvbnN0IGdlbiA9IG50aENoZWNrLnNlcXVlbmNlKCctMm4rNScpO1xuICpcbiAqIGdlbigpIC8vIDBcbiAqIGdlbigpIC8vIDJcbiAqIGdlbigpIC8vIDRcbiAqIGdlbigpIC8vIG51bGxcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBzZXF1ZW5jZShmb3JtdWxhKSB7XG4gICAgcmV0dXJuICgwLCBjb21waWxlX2pzXzEuZ2VuZXJhdGUpKCgwLCBwYXJzZV9qc18xLnBhcnNlKShmb3JtdWxhKSk7XG59XG5leHBvcnRzLnNlcXVlbmNlID0gc2VxdWVuY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJzZXF1ZW5jZSIsImdlbmVyYXRlIiwiY29tcGlsZSIsInBhcnNlIiwicGFyc2VfanNfMSIsInJlcXVpcmUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiY29tcGlsZV9qc18xIiwibnRoQ2hlY2siLCJmb3JtdWxhIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/nth-check/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/nth-check/lib/parse.js":
/*!*********************************************!*\
  !*** ./node_modules/nth-check/lib/parse.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n// Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parse = void 0;\n// Whitespace as per https://www.w3.org/TR/selectors-3/#lex is \" \\t\\r\\n\\f\"\nvar whitespace = new Set([\n    9,\n    10,\n    12,\n    13,\n    32\n]);\nvar ZERO = \"0\".charCodeAt(0);\nvar NINE = \"9\".charCodeAt(0);\n/**\n * Parses an expression.\n *\n * @throws An `Error` if parsing fails.\n * @returns An array containing the integer step size and the integer offset of the nth rule.\n * @example nthCheck.parse(\"2n+3\"); // returns [2, 3]\n */ function parse(formula) {\n    formula = formula.trim().toLowerCase();\n    if (formula === \"even\") {\n        return [\n            2,\n            0\n        ];\n    } else if (formula === \"odd\") {\n        return [\n            2,\n            1\n        ];\n    }\n    // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?\n    var idx = 0;\n    var a = 0;\n    var sign = readSign();\n    var number = readNumber();\n    if (idx < formula.length && formula.charAt(idx) === \"n\") {\n        idx++;\n        a = sign * (number !== null && number !== void 0 ? number : 1);\n        skipWhitespace();\n        if (idx < formula.length) {\n            sign = readSign();\n            skipWhitespace();\n            number = readNumber();\n        } else {\n            sign = number = 0;\n        }\n    }\n    // Throw if there is anything else\n    if (number === null || idx < formula.length) {\n        throw new Error(\"n-th rule couldn't be parsed ('\".concat(formula, \"')\"));\n    }\n    return [\n        a,\n        sign * number\n    ];\n    function readSign() {\n        if (formula.charAt(idx) === \"-\") {\n            idx++;\n            return -1;\n        }\n        if (formula.charAt(idx) === \"+\") {\n            idx++;\n        }\n        return 1;\n    }\n    function readNumber() {\n        var start = idx;\n        var value = 0;\n        while(idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE){\n            value = value * 10 + (formula.charCodeAt(idx) - ZERO);\n            idx++;\n        }\n        // Return `null` if we didn't read anything.\n        return idx === start ? null : value;\n    }\n    function skipWhitespace() {\n        while(idx < formula.length && whitespace.has(formula.charCodeAt(idx))){\n            idx++;\n        }\n    }\n}\nexports.parse = parse; //# sourceMappingURL=parse.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9udGgtY2hlY2svbGliL3BhcnNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2Isa0VBQWtFO0FBQ2xFQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHLEtBQUs7QUFDckIsMEVBQTBFO0FBQzFFLElBQUlHLGFBQWEsSUFBSUMsSUFBSTtJQUFDO0lBQUc7SUFBSTtJQUFJO0lBQUk7Q0FBRztBQUM1QyxJQUFJQyxPQUFPLElBQUlDLFVBQVUsQ0FBQztBQUMxQixJQUFJQyxPQUFPLElBQUlELFVBQVUsQ0FBQztBQUMxQjs7Ozs7O0NBTUMsR0FDRCxTQUFTSixNQUFNTSxPQUFPO0lBQ2xCQSxVQUFVQSxRQUFRQyxJQUFJLEdBQUdDLFdBQVc7SUFDcEMsSUFBSUYsWUFBWSxRQUFRO1FBQ3BCLE9BQU87WUFBQztZQUFHO1NBQUU7SUFDakIsT0FDSyxJQUFJQSxZQUFZLE9BQU87UUFDeEIsT0FBTztZQUFDO1lBQUc7U0FBRTtJQUNqQjtJQUNBLCtEQUErRDtJQUMvRCxJQUFJRyxNQUFNO0lBQ1YsSUFBSUMsSUFBSTtJQUNSLElBQUlDLE9BQU9DO0lBQ1gsSUFBSUMsU0FBU0M7SUFDYixJQUFJTCxNQUFNSCxRQUFRUyxNQUFNLElBQUlULFFBQVFVLE1BQU0sQ0FBQ1AsU0FBUyxLQUFLO1FBQ3JEQTtRQUNBQyxJQUFJQyxPQUFRRSxDQUFBQSxXQUFXLFFBQVFBLFdBQVcsS0FBSyxJQUFJQSxTQUFTO1FBQzVESTtRQUNBLElBQUlSLE1BQU1ILFFBQVFTLE1BQU0sRUFBRTtZQUN0QkosT0FBT0M7WUFDUEs7WUFDQUosU0FBU0M7UUFDYixPQUNLO1lBQ0RILE9BQU9FLFNBQVM7UUFDcEI7SUFDSjtJQUNBLGtDQUFrQztJQUNsQyxJQUFJQSxXQUFXLFFBQVFKLE1BQU1ILFFBQVFTLE1BQU0sRUFBRTtRQUN6QyxNQUFNLElBQUlHLE1BQU0sa0NBQWtDQyxNQUFNLENBQUNiLFNBQVM7SUFDdEU7SUFDQSxPQUFPO1FBQUNJO1FBQUdDLE9BQU9FO0tBQU87SUFDekIsU0FBU0Q7UUFDTCxJQUFJTixRQUFRVSxNQUFNLENBQUNQLFNBQVMsS0FBSztZQUM3QkE7WUFDQSxPQUFPLENBQUM7UUFDWjtRQUNBLElBQUlILFFBQVFVLE1BQU0sQ0FBQ1AsU0FBUyxLQUFLO1lBQzdCQTtRQUNKO1FBQ0EsT0FBTztJQUNYO0lBQ0EsU0FBU0s7UUFDTCxJQUFJTSxRQUFRWDtRQUNaLElBQUlWLFFBQVE7UUFDWixNQUFPVSxNQUFNSCxRQUFRUyxNQUFNLElBQ3ZCVCxRQUFRRixVQUFVLENBQUNLLFFBQVFOLFFBQzNCRyxRQUFRRixVQUFVLENBQUNLLFFBQVFKLEtBQU07WUFDakNOLFFBQVFBLFFBQVEsS0FBTU8sQ0FBQUEsUUFBUUYsVUFBVSxDQUFDSyxPQUFPTixJQUFHO1lBQ25ETTtRQUNKO1FBQ0EsNENBQTRDO1FBQzVDLE9BQU9BLFFBQVFXLFFBQVEsT0FBT3JCO0lBQ2xDO0lBQ0EsU0FBU2tCO1FBQ0wsTUFBT1IsTUFBTUgsUUFBUVMsTUFBTSxJQUN2QmQsV0FBV29CLEdBQUcsQ0FBQ2YsUUFBUUYsVUFBVSxDQUFDSyxNQUFPO1lBQ3pDQTtRQUNKO0lBQ0o7QUFDSjtBQUNBWCxhQUFhLEdBQUdFLE9BQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbnRoLWNoZWNrL2xpYi9wYXJzZS5qcz8xZTI4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gRm9sbG93aW5nIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyNudGgtY2hpbGQtcHNldWRvXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlID0gdm9pZCAwO1xuLy8gV2hpdGVzcGFjZSBhcyBwZXIgaHR0cHM6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy0zLyNsZXggaXMgXCIgXFx0XFxyXFxuXFxmXCJcbnZhciB3aGl0ZXNwYWNlID0gbmV3IFNldChbOSwgMTAsIDEyLCAxMywgMzJdKTtcbnZhciBaRVJPID0gXCIwXCIuY2hhckNvZGVBdCgwKTtcbnZhciBOSU5FID0gXCI5XCIuY2hhckNvZGVBdCgwKTtcbi8qKlxuICogUGFyc2VzIGFuIGV4cHJlc3Npb24uXG4gKlxuICogQHRocm93cyBBbiBgRXJyb3JgIGlmIHBhcnNpbmcgZmFpbHMuXG4gKiBAcmV0dXJucyBBbiBhcnJheSBjb250YWluaW5nIHRoZSBpbnRlZ2VyIHN0ZXAgc2l6ZSBhbmQgdGhlIGludGVnZXIgb2Zmc2V0IG9mIHRoZSBudGggcnVsZS5cbiAqIEBleGFtcGxlIG50aENoZWNrLnBhcnNlKFwiMm4rM1wiKTsgLy8gcmV0dXJucyBbMiwgM11cbiAqL1xuZnVuY3Rpb24gcGFyc2UoZm9ybXVsYSkge1xuICAgIGZvcm11bGEgPSBmb3JtdWxhLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChmb3JtdWxhID09PSBcImV2ZW5cIikge1xuICAgICAgICByZXR1cm4gWzIsIDBdO1xuICAgIH1cbiAgICBlbHNlIGlmIChmb3JtdWxhID09PSBcIm9kZFwiKSB7XG4gICAgICAgIHJldHVybiBbMiwgMV07XG4gICAgfVxuICAgIC8vIFBhcnNlIFsgWyctJ3wnKyddPyBJTlRFR0VSPyB7Tn0gWyBTKiBbJy0nfCcrJ10gUyogSU5URUdFUiBdP1xuICAgIHZhciBpZHggPSAwO1xuICAgIHZhciBhID0gMDtcbiAgICB2YXIgc2lnbiA9IHJlYWRTaWduKCk7XG4gICAgdmFyIG51bWJlciA9IHJlYWROdW1iZXIoKTtcbiAgICBpZiAoaWR4IDwgZm9ybXVsYS5sZW5ndGggJiYgZm9ybXVsYS5jaGFyQXQoaWR4KSA9PT0gXCJuXCIpIHtcbiAgICAgICAgaWR4Kys7XG4gICAgICAgIGEgPSBzaWduICogKG51bWJlciAhPT0gbnVsbCAmJiBudW1iZXIgIT09IHZvaWQgMCA/IG51bWJlciA6IDEpO1xuICAgICAgICBza2lwV2hpdGVzcGFjZSgpO1xuICAgICAgICBpZiAoaWR4IDwgZm9ybXVsYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNpZ24gPSByZWFkU2lnbigpO1xuICAgICAgICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgIG51bWJlciA9IHJlYWROdW1iZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNpZ24gPSBudW1iZXIgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRocm93IGlmIHRoZXJlIGlzIGFueXRoaW5nIGVsc2VcbiAgICBpZiAobnVtYmVyID09PSBudWxsIHx8IGlkeCA8IGZvcm11bGEubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm4tdGggcnVsZSBjb3VsZG4ndCBiZSBwYXJzZWQgKCdcIi5jb25jYXQoZm9ybXVsYSwgXCInKVwiKSk7XG4gICAgfVxuICAgIHJldHVybiBbYSwgc2lnbiAqIG51bWJlcl07XG4gICAgZnVuY3Rpb24gcmVhZFNpZ24oKSB7XG4gICAgICAgIGlmIChmb3JtdWxhLmNoYXJBdChpZHgpID09PSBcIi1cIikge1xuICAgICAgICAgICAgaWR4Kys7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm11bGEuY2hhckF0KGlkeCkgPT09IFwiK1wiKSB7XG4gICAgICAgICAgICBpZHgrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhZE51bWJlcigpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gaWR4O1xuICAgICAgICB2YXIgdmFsdWUgPSAwO1xuICAgICAgICB3aGlsZSAoaWR4IDwgZm9ybXVsYS5sZW5ndGggJiZcbiAgICAgICAgICAgIGZvcm11bGEuY2hhckNvZGVBdChpZHgpID49IFpFUk8gJiZcbiAgICAgICAgICAgIGZvcm11bGEuY2hhckNvZGVBdChpZHgpIDw9IE5JTkUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKiAxMCArIChmb3JtdWxhLmNoYXJDb2RlQXQoaWR4KSAtIFpFUk8pO1xuICAgICAgICAgICAgaWR4Kys7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmV0dXJuIGBudWxsYCBpZiB3ZSBkaWRuJ3QgcmVhZCBhbnl0aGluZy5cbiAgICAgICAgcmV0dXJuIGlkeCA9PT0gc3RhcnQgPyBudWxsIDogdmFsdWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNraXBXaGl0ZXNwYWNlKCkge1xuICAgICAgICB3aGlsZSAoaWR4IDwgZm9ybXVsYS5sZW5ndGggJiZcbiAgICAgICAgICAgIHdoaXRlc3BhY2UuaGFzKGZvcm11bGEuY2hhckNvZGVBdChpZHgpKSkge1xuICAgICAgICAgICAgaWR4Kys7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZSIsIndoaXRlc3BhY2UiLCJTZXQiLCJaRVJPIiwiY2hhckNvZGVBdCIsIk5JTkUiLCJmb3JtdWxhIiwidHJpbSIsInRvTG93ZXJDYXNlIiwiaWR4IiwiYSIsInNpZ24iLCJyZWFkU2lnbiIsIm51bWJlciIsInJlYWROdW1iZXIiLCJsZW5ndGgiLCJjaGFyQXQiLCJza2lwV2hpdGVzcGFjZSIsIkVycm9yIiwiY29uY2F0Iiwic3RhcnQiLCJoYXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/nth-check/lib/parse.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/(home)/page.tsx":
/*!*****************************!*\
  !*** ./app/(home)/page.tsx ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Page; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nconst cheerio = __webpack_require__(/*! cheerio */ \"(app-pages-browser)/./node_modules/cheerio/lib/index.js\");\n// export const metadata = {\n//     title: 'Home',\n// }\nfunction Page() {\n    _s();\n    /* const getHtml = async () => {\r\n        try {\r\n            return await axios.get('https://search.naver.com/search.naver?ssc=tab.blog.all&sm=tab_jum&query=%EC%84%9C%EC%9A%B8%EC%8A%A4%EB%A7%88%EC%9D%BC%EB%9D%BC%EC%8B%9D');\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    getHtml().then((html) => {\r\n        const $ = cheerio.load(html.data);\r\n        const data = $('#main_pack > section > div.api_subject_bx > ul > li:nth-child(1)');\r\n        const dataText = data.text();\r\n\r\n        // #main_pack > section > div.api_subject_bx > ul > li:nth-child(1) > div > div.detail_box\r\n        // #main_pack > section > div.api_subject_bx > ul > li:nth-child(2) > div > div.detail_box\r\n        // #main_pack > section > div.api_subject_bx > ul > li:nth-child(4) > div > div.detail_box\r\n\r\n        const ulList = $('#main_pack > section > div.api_subject_bx > ul > li');\r\n        ulList.map((i, element) => {\r\n            console.log('i ::: ' + i);\r\n            console.log('element ::: ' + element);\r\n            console.log('=====================');\r\n        })\r\n\r\n        return data;\r\n    }); */ const [movies, setMovies] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();\n    const getMovies = async ()=>{\n        const response = await fetch(\"https://nomad-movies.nomadcoders.workers.dev/movies\");\n        const json = await response.json();\n        setMovies(json);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        getMovies();\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: JSON.stringify(movies)\n    }, void 0, false, {\n        fileName: \"C:\\\\workspace\\\\LEARN-NEXTJS\\\\app\\\\(home)\\\\page.tsx\",\n        lineNumber: 52,\n        columnNumber: 5\n    }, this);\n}\n_s(Page, \"DsXWz4eQ6qRZ9Cx7rzTltn/5uKY=\");\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC8oaG9tZSkvcGFnZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBSTRDO0FBQzVDLE1BQU1FLFVBQVVDLG1CQUFPQSxDQUFDO0FBRXhCLDRCQUE0QjtBQUM1QixxQkFBcUI7QUFDckIsSUFBSTtBQUVXLFNBQVNDOztJQUVwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQXlCSSxHQUVKLE1BQU0sQ0FBQ0MsUUFBUUMsVUFBVSxHQUFHTCwrQ0FBUUE7SUFDcEMsTUFBTU0sWUFBWTtRQUNkLE1BQU1DLFdBQVcsTUFBTUMsTUFBTTtRQUM3QixNQUFNQyxPQUFPLE1BQU1GLFNBQVNFLElBQUk7UUFDaENKLFVBQVVJO0lBQ2Q7SUFDQVYsZ0RBQVNBLENBQUM7UUFDTk87SUFDSixHQUFHLEVBQUU7SUFFTCxxQkFDQSw4REFBQ0k7a0JBQ0lDLEtBQUtDLFNBQVMsQ0FBQ1I7Ozs7OztBQUd4QjtHQTVDd0JEO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC8oaG9tZSkvcGFnZS50c3g/MjUzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIlxyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL25hdmlnYXRpb25cIjtcclxuaW1wb3J0IHsgZGF0YSB9IGZyb20gXCJjaGVlcmlvL2xpYi9hcGkvYXR0cmlidXRlc1wiO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmNvbnN0IGNoZWVyaW8gPSByZXF1aXJlKCdjaGVlcmlvJyk7XHJcblxyXG4vLyBleHBvcnQgY29uc3QgbWV0YWRhdGEgPSB7XHJcbi8vICAgICB0aXRsZTogJ0hvbWUnLFxyXG4vLyB9XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYWdlKCkge1xyXG5cclxuICAgIC8qIGNvbnN0IGdldEh0bWwgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGF4aW9zLmdldCgnaHR0cHM6Ly9zZWFyY2gubmF2ZXIuY29tL3NlYXJjaC5uYXZlcj9zc2M9dGFiLmJsb2cuYWxsJnNtPXRhYl9qdW0mcXVlcnk9JUVDJTg0JTlDJUVDJTlBJUI4JUVDJThBJUE0JUVCJUE3JTg4JUVDJTlEJUJDJUVCJTlEJUJDJUVDJThCJTlEJyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEh0bWwoKS50aGVuKChodG1sKSA9PiB7XHJcbiAgICAgICAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChodG1sLmRhdGEpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSAkKCcjbWFpbl9wYWNrID4gc2VjdGlvbiA+IGRpdi5hcGlfc3ViamVjdF9ieCA+IHVsID4gbGk6bnRoLWNoaWxkKDEpJyk7XHJcbiAgICAgICAgY29uc3QgZGF0YVRleHQgPSBkYXRhLnRleHQoKTtcclxuXHJcbiAgICAgICAgLy8gI21haW5fcGFjayA+IHNlY3Rpb24gPiBkaXYuYXBpX3N1YmplY3RfYnggPiB1bCA+IGxpOm50aC1jaGlsZCgxKSA+IGRpdiA+IGRpdi5kZXRhaWxfYm94XHJcbiAgICAgICAgLy8gI21haW5fcGFjayA+IHNlY3Rpb24gPiBkaXYuYXBpX3N1YmplY3RfYnggPiB1bCA+IGxpOm50aC1jaGlsZCgyKSA+IGRpdiA+IGRpdi5kZXRhaWxfYm94XHJcbiAgICAgICAgLy8gI21haW5fcGFjayA+IHNlY3Rpb24gPiBkaXYuYXBpX3N1YmplY3RfYnggPiB1bCA+IGxpOm50aC1jaGlsZCg0KSA+IGRpdiA+IGRpdi5kZXRhaWxfYm94XHJcblxyXG4gICAgICAgIGNvbnN0IHVsTGlzdCA9ICQoJyNtYWluX3BhY2sgPiBzZWN0aW9uID4gZGl2LmFwaV9zdWJqZWN0X2J4ID4gdWwgPiBsaScpO1xyXG4gICAgICAgIHVsTGlzdC5tYXAoKGksIGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2kgOjo6ICcgKyBpKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2VsZW1lbnQgOjo6ICcgKyBlbGVtZW50KTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT09PT09PT09PT09PT09PT09PScpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSk7ICovXHJcblxyXG4gICAgY29uc3QgW21vdmllcywgc2V0TW92aWVzXSA9IHVzZVN0YXRlKCk7XHJcbiAgICBjb25zdCBnZXRNb3ZpZXMgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcImh0dHBzOi8vbm9tYWQtbW92aWVzLm5vbWFkY29kZXJzLndvcmtlcnMuZGV2L21vdmllc1wiKTtcclxuICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIHNldE1vdmllcyhqc29uKTtcclxuICAgIH1cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgZ2V0TW92aWVzKCk7XHJcbiAgICB9LCBbXSk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgIDxkaXY+XHJcbiAgICAgICAge0pTT04uc3RyaW5naWZ5KG1vdmllcyl9XHJcbiAgICA8L2Rpdj5cclxuICAgIClcclxufSJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsImNoZWVyaW8iLCJyZXF1aXJlIiwiUGFnZSIsIm1vdmllcyIsInNldE1vdmllcyIsImdldE1vdmllcyIsInJlc3BvbnNlIiwiZmV0Y2giLCJqc29uIiwiZGl2IiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/(home)/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5-htmlparser2-tree-adapter/dist/cjs/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/parse5-htmlparser2-tree-adapter/dist/cjs/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.adapter = exports.serializeDoctypeContent = void 0;\nconst parse5_1 = __webpack_require__(/*! parse5 */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/index.js\");\nconst domhandler_1 = __webpack_require__(/*! domhandler */ \"(app-pages-browser)/./node_modules/domhandler/lib/index.js\");\nfunction createTextNode(value) {\n    return new domhandler_1.Text(value);\n}\nfunction enquoteDoctypeId(id) {\n    const quote = id.includes('\"') ? \"'\" : '\"';\n    return quote + id + quote;\n}\n/** @internal */ function serializeDoctypeContent(name, publicId, systemId) {\n    let str = \"!DOCTYPE \";\n    if (name) {\n        str += name;\n    }\n    if (publicId) {\n        str += \" PUBLIC \".concat(enquoteDoctypeId(publicId));\n    } else if (systemId) {\n        str += \" SYSTEM\";\n    }\n    if (systemId) {\n        str += \" \".concat(enquoteDoctypeId(systemId));\n    }\n    return str;\n}\nexports.serializeDoctypeContent = serializeDoctypeContent;\nexports.adapter = {\n    // Re-exports from domhandler\n    isCommentNode: domhandler_1.isComment,\n    isElementNode: domhandler_1.isTag,\n    isTextNode: domhandler_1.isText,\n    //Node construction\n    createDocument () {\n        const node = new domhandler_1.Document([]);\n        node[\"x-mode\"] = parse5_1.html.DOCUMENT_MODE.NO_QUIRKS;\n        return node;\n    },\n    createDocumentFragment () {\n        return new domhandler_1.Document([]);\n    },\n    createElement (tagName, namespaceURI, attrs) {\n        const attribs = Object.create(null);\n        const attribsNamespace = Object.create(null);\n        const attribsPrefix = Object.create(null);\n        for(let i = 0; i < attrs.length; i++){\n            const attrName = attrs[i].name;\n            attribs[attrName] = attrs[i].value;\n            attribsNamespace[attrName] = attrs[i].namespace;\n            attribsPrefix[attrName] = attrs[i].prefix;\n        }\n        const node = new domhandler_1.Element(tagName, attribs, []);\n        node.namespace = namespaceURI;\n        node[\"x-attribsNamespace\"] = attribsNamespace;\n        node[\"x-attribsPrefix\"] = attribsPrefix;\n        return node;\n    },\n    createCommentNode (data) {\n        return new domhandler_1.Comment(data);\n    },\n    //Tree mutation\n    appendChild (parentNode, newNode) {\n        const prev = parentNode.children[parentNode.children.length - 1];\n        if (prev) {\n            prev.next = newNode;\n            newNode.prev = prev;\n        }\n        parentNode.children.push(newNode);\n        newNode.parent = parentNode;\n    },\n    insertBefore (parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.children.indexOf(referenceNode);\n        const { prev } = referenceNode;\n        if (prev) {\n            prev.next = newNode;\n            newNode.prev = prev;\n        }\n        referenceNode.prev = newNode;\n        newNode.next = referenceNode;\n        parentNode.children.splice(insertionIdx, 0, newNode);\n        newNode.parent = parentNode;\n    },\n    setTemplateContent (templateElement, contentElement) {\n        exports.adapter.appendChild(templateElement, contentElement);\n    },\n    getTemplateContent (templateElement) {\n        return templateElement.children[0];\n    },\n    setDocumentType (document, name, publicId, systemId) {\n        const data = serializeDoctypeContent(name, publicId, systemId);\n        let doctypeNode = document.children.find((node)=>(0, domhandler_1.isDirective)(node) && node.name === \"!doctype\");\n        if (doctypeNode) {\n            doctypeNode.data = data !== null && data !== void 0 ? data : null;\n        } else {\n            doctypeNode = new domhandler_1.ProcessingInstruction(\"!doctype\", data);\n            exports.adapter.appendChild(document, doctypeNode);\n        }\n        doctypeNode[\"x-name\"] = name !== null && name !== void 0 ? name : undefined;\n        doctypeNode[\"x-publicId\"] = publicId !== null && publicId !== void 0 ? publicId : undefined;\n        doctypeNode[\"x-systemId\"] = systemId !== null && systemId !== void 0 ? systemId : undefined;\n    },\n    setDocumentMode (document, mode) {\n        document[\"x-mode\"] = mode;\n    },\n    getDocumentMode (document) {\n        return document[\"x-mode\"];\n    },\n    detachNode (node) {\n        if (node.parent) {\n            const idx = node.parent.children.indexOf(node);\n            const { prev, next } = node;\n            node.prev = null;\n            node.next = null;\n            if (prev) {\n                prev.next = next;\n            }\n            if (next) {\n                next.prev = prev;\n            }\n            node.parent.children.splice(idx, 1);\n            node.parent = null;\n        }\n    },\n    insertText (parentNode, text) {\n        const lastChild = parentNode.children[parentNode.children.length - 1];\n        if (lastChild && (0, domhandler_1.isText)(lastChild)) {\n            lastChild.data += text;\n        } else {\n            exports.adapter.appendChild(parentNode, createTextNode(text));\n        }\n    },\n    insertTextBefore (parentNode, text, referenceNode) {\n        const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];\n        if (prevNode && (0, domhandler_1.isText)(prevNode)) {\n            prevNode.data += text;\n        } else {\n            exports.adapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes (recipient, attrs) {\n        for(let i = 0; i < attrs.length; i++){\n            const attrName = attrs[i].name;\n            if (typeof recipient.attribs[attrName] === \"undefined\") {\n                recipient.attribs[attrName] = attrs[i].value;\n                recipient[\"x-attribsNamespace\"][attrName] = attrs[i].namespace;\n                recipient[\"x-attribsPrefix\"][attrName] = attrs[i].prefix;\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild (node) {\n        return node.children[0];\n    },\n    getChildNodes (node) {\n        return node.children;\n    },\n    getParentNode (node) {\n        return node.parent;\n    },\n    getAttrList (element) {\n        return element.attributes;\n    },\n    //Node data\n    getTagName (element) {\n        return element.name;\n    },\n    getNamespaceURI (element) {\n        return element.namespace;\n    },\n    getTextNodeContent (textNode) {\n        return textNode.data;\n    },\n    getCommentNodeContent (commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName (doctypeNode) {\n        var _a;\n        return (_a = doctypeNode[\"x-name\"]) !== null && _a !== void 0 ? _a : \"\";\n    },\n    getDocumentTypeNodePublicId (doctypeNode) {\n        var _a;\n        return (_a = doctypeNode[\"x-publicId\"]) !== null && _a !== void 0 ? _a : \"\";\n    },\n    getDocumentTypeNodeSystemId (doctypeNode) {\n        var _a;\n        return (_a = doctypeNode[\"x-systemId\"]) !== null && _a !== void 0 ? _a : \"\";\n    },\n    //Node types\n    isDocumentTypeNode (node) {\n        return (0, domhandler_1.isDirective)(node) && node.name === \"!doctype\";\n    },\n    // Source code location\n    setNodeSourceCodeLocation (node, location) {\n        if (location) {\n            node.startIndex = location.startOffset;\n            node.endIndex = location.endOffset;\n        }\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation (node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation (node, endLocation) {\n        if (endLocation.endOffset != null) node.endIndex = endLocation.endOffset;\n        node.sourceCodeLocation = Object.assign(Object.assign({}, node.sourceCodeLocation), endLocation);\n    }\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wYXJzZTUtaHRtbHBhcnNlcjItdHJlZS1hZGFwdGVyL2Rpc3QvY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUdBLCtCQUErQixHQUFHLEtBQUs7QUFDekQsTUFBTUksV0FBV0MsbUJBQU9BLENBQUMsMkVBQVE7QUFDakMsTUFBTUMsZUFBZUQsbUJBQU9BLENBQUMsOEVBQVk7QUFDekMsU0FBU0UsZUFBZU4sS0FBSztJQUN6QixPQUFPLElBQUlLLGFBQWFFLElBQUksQ0FBQ1A7QUFDakM7QUFDQSxTQUFTUSxpQkFBaUJDLEVBQUU7SUFDeEIsTUFBTUMsUUFBUUQsR0FBR0UsUUFBUSxDQUFDLE9BQU8sTUFBTTtJQUN2QyxPQUFPRCxRQUFRRCxLQUFLQztBQUN4QjtBQUNBLGNBQWMsR0FDZCxTQUFTUix3QkFBd0JVLElBQUksRUFBRUMsUUFBUSxFQUFFQyxRQUFRO0lBQ3JELElBQUlDLE1BQU07SUFDVixJQUFJSCxNQUFNO1FBQ05HLE9BQU9IO0lBQ1g7SUFDQSxJQUFJQyxVQUFVO1FBQ1ZFLE9BQU8sV0FBc0MsT0FBM0JQLGlCQUFpQks7SUFDdkMsT0FDSyxJQUFJQyxVQUFVO1FBQ2ZDLE9BQU87SUFDWDtJQUNBLElBQUlELFVBQVU7UUFDVkMsT0FBTyxJQUErQixPQUEzQlAsaUJBQWlCTTtJQUNoQztJQUNBLE9BQU9DO0FBQ1g7QUFDQWhCLCtCQUErQixHQUFHRztBQUNsQ0gsZUFBZSxHQUFHO0lBQ2QsNkJBQTZCO0lBQzdCaUIsZUFBZVgsYUFBYVksU0FBUztJQUNyQ0MsZUFBZWIsYUFBYWMsS0FBSztJQUNqQ0MsWUFBWWYsYUFBYWdCLE1BQU07SUFDL0IsbUJBQW1CO0lBQ25CQztRQUNJLE1BQU1DLE9BQU8sSUFBSWxCLGFBQWFtQixRQUFRLENBQUMsRUFBRTtRQUN6Q0QsSUFBSSxDQUFDLFNBQVMsR0FBR3BCLFNBQVNzQixJQUFJLENBQUNDLGFBQWEsQ0FBQ0MsU0FBUztRQUN0RCxPQUFPSjtJQUNYO0lBQ0FLO1FBQ0ksT0FBTyxJQUFJdkIsYUFBYW1CLFFBQVEsQ0FBQyxFQUFFO0lBQ3ZDO0lBQ0FLLGVBQWNDLE9BQU8sRUFBRUMsWUFBWSxFQUFFQyxLQUFLO1FBQ3RDLE1BQU1DLFVBQVVwQyxPQUFPcUMsTUFBTSxDQUFDO1FBQzlCLE1BQU1DLG1CQUFtQnRDLE9BQU9xQyxNQUFNLENBQUM7UUFDdkMsTUFBTUUsZ0JBQWdCdkMsT0FBT3FDLE1BQU0sQ0FBQztRQUNwQyxJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUwsTUFBTU0sTUFBTSxFQUFFRCxJQUFLO1lBQ25DLE1BQU1FLFdBQVdQLEtBQUssQ0FBQ0ssRUFBRSxDQUFDekIsSUFBSTtZQUM5QnFCLE9BQU8sQ0FBQ00sU0FBUyxHQUFHUCxLQUFLLENBQUNLLEVBQUUsQ0FBQ3JDLEtBQUs7WUFDbENtQyxnQkFBZ0IsQ0FBQ0ksU0FBUyxHQUFHUCxLQUFLLENBQUNLLEVBQUUsQ0FBQ0csU0FBUztZQUMvQ0osYUFBYSxDQUFDRyxTQUFTLEdBQUdQLEtBQUssQ0FBQ0ssRUFBRSxDQUFDSSxNQUFNO1FBQzdDO1FBQ0EsTUFBTWxCLE9BQU8sSUFBSWxCLGFBQWFxQyxPQUFPLENBQUNaLFNBQVNHLFNBQVMsRUFBRTtRQUMxRFYsS0FBS2lCLFNBQVMsR0FBR1Q7UUFDakJSLElBQUksQ0FBQyxxQkFBcUIsR0FBR1k7UUFDN0JaLElBQUksQ0FBQyxrQkFBa0IsR0FBR2E7UUFDMUIsT0FBT2I7SUFDWDtJQUNBb0IsbUJBQWtCQyxJQUFJO1FBQ2xCLE9BQU8sSUFBSXZDLGFBQWF3QyxPQUFPLENBQUNEO0lBQ3BDO0lBQ0EsZUFBZTtJQUNmRSxhQUFZQyxVQUFVLEVBQUVDLE9BQU87UUFDM0IsTUFBTUMsT0FBT0YsV0FBV0csUUFBUSxDQUFDSCxXQUFXRyxRQUFRLENBQUNaLE1BQU0sR0FBRyxFQUFFO1FBQ2hFLElBQUlXLE1BQU07WUFDTkEsS0FBS0UsSUFBSSxHQUFHSDtZQUNaQSxRQUFRQyxJQUFJLEdBQUdBO1FBQ25CO1FBQ0FGLFdBQVdHLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDSjtRQUN6QkEsUUFBUUssTUFBTSxHQUFHTjtJQUNyQjtJQUNBTyxjQUFhUCxVQUFVLEVBQUVDLE9BQU8sRUFBRU8sYUFBYTtRQUMzQyxNQUFNQyxlQUFlVCxXQUFXRyxRQUFRLENBQUNPLE9BQU8sQ0FBQ0Y7UUFDakQsTUFBTSxFQUFFTixJQUFJLEVBQUUsR0FBR007UUFDakIsSUFBSU4sTUFBTTtZQUNOQSxLQUFLRSxJQUFJLEdBQUdIO1lBQ1pBLFFBQVFDLElBQUksR0FBR0E7UUFDbkI7UUFDQU0sY0FBY04sSUFBSSxHQUFHRDtRQUNyQkEsUUFBUUcsSUFBSSxHQUFHSTtRQUNmUixXQUFXRyxRQUFRLENBQUNRLE1BQU0sQ0FBQ0YsY0FBYyxHQUFHUjtRQUM1Q0EsUUFBUUssTUFBTSxHQUFHTjtJQUNyQjtJQUNBWSxvQkFBbUJDLGVBQWUsRUFBRUMsY0FBYztRQUM5QzlELFFBQVFFLE9BQU8sQ0FBQzZDLFdBQVcsQ0FBQ2MsaUJBQWlCQztJQUNqRDtJQUNBQyxvQkFBbUJGLGVBQWU7UUFDOUIsT0FBT0EsZ0JBQWdCVixRQUFRLENBQUMsRUFBRTtJQUN0QztJQUNBYSxpQkFBZ0JDLFFBQVEsRUFBRXBELElBQUksRUFBRUMsUUFBUSxFQUFFQyxRQUFRO1FBQzlDLE1BQU04QixPQUFPMUMsd0JBQXdCVSxNQUFNQyxVQUFVQztRQUNyRCxJQUFJbUQsY0FBY0QsU0FBU2QsUUFBUSxDQUFDZ0IsSUFBSSxDQUFDLENBQUMzQyxPQUFTLENBQUMsR0FBR2xCLGFBQWE4RCxXQUFXLEVBQUU1QyxTQUFTQSxLQUFLWCxJQUFJLEtBQUs7UUFDeEcsSUFBSXFELGFBQWE7WUFDYkEsWUFBWXJCLElBQUksR0FBR0EsU0FBUyxRQUFRQSxTQUFTLEtBQUssSUFBSUEsT0FBTztRQUNqRSxPQUNLO1lBQ0RxQixjQUFjLElBQUk1RCxhQUFhK0QscUJBQXFCLENBQUMsWUFBWXhCO1lBQ2pFN0MsUUFBUUUsT0FBTyxDQUFDNkMsV0FBVyxDQUFDa0IsVUFBVUM7UUFDMUM7UUFDQUEsV0FBVyxDQUFDLFNBQVMsR0FBR3JELFNBQVMsUUFBUUEsU0FBUyxLQUFLLElBQUlBLE9BQU95RDtRQUNsRUosV0FBVyxDQUFDLGFBQWEsR0FBR3BELGFBQWEsUUFBUUEsYUFBYSxLQUFLLElBQUlBLFdBQVd3RDtRQUNsRkosV0FBVyxDQUFDLGFBQWEsR0FBR25ELGFBQWEsUUFBUUEsYUFBYSxLQUFLLElBQUlBLFdBQVd1RDtJQUN0RjtJQUNBQyxpQkFBZ0JOLFFBQVEsRUFBRU8sSUFBSTtRQUMxQlAsUUFBUSxDQUFDLFNBQVMsR0FBR087SUFDekI7SUFDQUMsaUJBQWdCUixRQUFRO1FBQ3BCLE9BQU9BLFFBQVEsQ0FBQyxTQUFTO0lBQzdCO0lBQ0FTLFlBQVdsRCxJQUFJO1FBQ1gsSUFBSUEsS0FBSzhCLE1BQU0sRUFBRTtZQUNiLE1BQU1xQixNQUFNbkQsS0FBSzhCLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDTyxPQUFPLENBQUNsQztZQUN6QyxNQUFNLEVBQUUwQixJQUFJLEVBQUVFLElBQUksRUFBRSxHQUFHNUI7WUFDdkJBLEtBQUswQixJQUFJLEdBQUc7WUFDWjFCLEtBQUs0QixJQUFJLEdBQUc7WUFDWixJQUFJRixNQUFNO2dCQUNOQSxLQUFLRSxJQUFJLEdBQUdBO1lBQ2hCO1lBQ0EsSUFBSUEsTUFBTTtnQkFDTkEsS0FBS0YsSUFBSSxHQUFHQTtZQUNoQjtZQUNBMUIsS0FBSzhCLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDUSxNQUFNLENBQUNnQixLQUFLO1lBQ2pDbkQsS0FBSzhCLE1BQU0sR0FBRztRQUNsQjtJQUNKO0lBQ0FzQixZQUFXNUIsVUFBVSxFQUFFNkIsSUFBSTtRQUN2QixNQUFNQyxZQUFZOUIsV0FBV0csUUFBUSxDQUFDSCxXQUFXRyxRQUFRLENBQUNaLE1BQU0sR0FBRyxFQUFFO1FBQ3JFLElBQUl1QyxhQUFhLENBQUMsR0FBR3hFLGFBQWFnQixNQUFNLEVBQUV3RCxZQUFZO1lBQ2xEQSxVQUFVakMsSUFBSSxJQUFJZ0M7UUFDdEIsT0FDSztZQUNEN0UsUUFBUUUsT0FBTyxDQUFDNkMsV0FBVyxDQUFDQyxZQUFZekMsZUFBZXNFO1FBQzNEO0lBQ0o7SUFDQUUsa0JBQWlCL0IsVUFBVSxFQUFFNkIsSUFBSSxFQUFFckIsYUFBYTtRQUM1QyxNQUFNd0IsV0FBV2hDLFdBQVdHLFFBQVEsQ0FBQ0gsV0FBV0csUUFBUSxDQUFDTyxPQUFPLENBQUNGLGlCQUFpQixFQUFFO1FBQ3BGLElBQUl3QixZQUFZLENBQUMsR0FBRzFFLGFBQWFnQixNQUFNLEVBQUUwRCxXQUFXO1lBQ2hEQSxTQUFTbkMsSUFBSSxJQUFJZ0M7UUFDckIsT0FDSztZQUNEN0UsUUFBUUUsT0FBTyxDQUFDcUQsWUFBWSxDQUFDUCxZQUFZekMsZUFBZXNFLE9BQU9yQjtRQUNuRTtJQUNKO0lBQ0F5QixpQkFBZ0JDLFNBQVMsRUFBRWpELEtBQUs7UUFDNUIsSUFBSyxJQUFJSyxJQUFJLEdBQUdBLElBQUlMLE1BQU1NLE1BQU0sRUFBRUQsSUFBSztZQUNuQyxNQUFNRSxXQUFXUCxLQUFLLENBQUNLLEVBQUUsQ0FBQ3pCLElBQUk7WUFDOUIsSUFBSSxPQUFPcUUsVUFBVWhELE9BQU8sQ0FBQ00sU0FBUyxLQUFLLGFBQWE7Z0JBQ3BEMEMsVUFBVWhELE9BQU8sQ0FBQ00sU0FBUyxHQUFHUCxLQUFLLENBQUNLLEVBQUUsQ0FBQ3JDLEtBQUs7Z0JBQzVDaUYsU0FBUyxDQUFDLHFCQUFxQixDQUFDMUMsU0FBUyxHQUFHUCxLQUFLLENBQUNLLEVBQUUsQ0FBQ0csU0FBUztnQkFDOUR5QyxTQUFTLENBQUMsa0JBQWtCLENBQUMxQyxTQUFTLEdBQUdQLEtBQUssQ0FBQ0ssRUFBRSxDQUFDSSxNQUFNO1lBQzVEO1FBQ0o7SUFDSjtJQUNBLGlCQUFpQjtJQUNqQnlDLGVBQWMzRCxJQUFJO1FBQ2QsT0FBT0EsS0FBSzJCLFFBQVEsQ0FBQyxFQUFFO0lBQzNCO0lBQ0FpQyxlQUFjNUQsSUFBSTtRQUNkLE9BQU9BLEtBQUsyQixRQUFRO0lBQ3hCO0lBQ0FrQyxlQUFjN0QsSUFBSTtRQUNkLE9BQU9BLEtBQUs4QixNQUFNO0lBQ3RCO0lBQ0FnQyxhQUFZQyxPQUFPO1FBQ2YsT0FBT0EsUUFBUUMsVUFBVTtJQUM3QjtJQUNBLFdBQVc7SUFDWEMsWUFBV0YsT0FBTztRQUNkLE9BQU9BLFFBQVExRSxJQUFJO0lBQ3ZCO0lBQ0E2RSxpQkFBZ0JILE9BQU87UUFDbkIsT0FBT0EsUUFBUTlDLFNBQVM7SUFDNUI7SUFDQWtELG9CQUFtQkMsUUFBUTtRQUN2QixPQUFPQSxTQUFTL0MsSUFBSTtJQUN4QjtJQUNBZ0QsdUJBQXNCQyxXQUFXO1FBQzdCLE9BQU9BLFlBQVlqRCxJQUFJO0lBQzNCO0lBQ0FrRCx5QkFBd0I3QixXQUFXO1FBQy9CLElBQUk4QjtRQUNKLE9BQU8sQ0FBQ0EsS0FBSzlCLFdBQVcsQ0FBQyxTQUFTLE1BQU0sUUFBUThCLE9BQU8sS0FBSyxJQUFJQSxLQUFLO0lBQ3pFO0lBQ0FDLDZCQUE0Qi9CLFdBQVc7UUFDbkMsSUFBSThCO1FBQ0osT0FBTyxDQUFDQSxLQUFLOUIsV0FBVyxDQUFDLGFBQWEsTUFBTSxRQUFROEIsT0FBTyxLQUFLLElBQUlBLEtBQUs7SUFDN0U7SUFDQUUsNkJBQTRCaEMsV0FBVztRQUNuQyxJQUFJOEI7UUFDSixPQUFPLENBQUNBLEtBQUs5QixXQUFXLENBQUMsYUFBYSxNQUFNLFFBQVE4QixPQUFPLEtBQUssSUFBSUEsS0FBSztJQUM3RTtJQUNBLFlBQVk7SUFDWkcsb0JBQW1CM0UsSUFBSTtRQUNuQixPQUFPLENBQUMsR0FBR2xCLGFBQWE4RCxXQUFXLEVBQUU1QyxTQUFTQSxLQUFLWCxJQUFJLEtBQUs7SUFDaEU7SUFDQSx1QkFBdUI7SUFDdkJ1RiwyQkFBMEI1RSxJQUFJLEVBQUU2RSxRQUFRO1FBQ3BDLElBQUlBLFVBQVU7WUFDVjdFLEtBQUs4RSxVQUFVLEdBQUdELFNBQVNFLFdBQVc7WUFDdEMvRSxLQUFLZ0YsUUFBUSxHQUFHSCxTQUFTSSxTQUFTO1FBQ3RDO1FBQ0FqRixLQUFLa0Ysa0JBQWtCLEdBQUdMO0lBQzlCO0lBQ0FNLDJCQUEwQm5GLElBQUk7UUFDMUIsT0FBT0EsS0FBS2tGLGtCQUFrQjtJQUNsQztJQUNBRSw4QkFBNkJwRixJQUFJLEVBQUVxRixXQUFXO1FBQzFDLElBQUlBLFlBQVlKLFNBQVMsSUFBSSxNQUN6QmpGLEtBQUtnRixRQUFRLEdBQUdLLFlBQVlKLFNBQVM7UUFDekNqRixLQUFLa0Ysa0JBQWtCLEdBQUc1RyxPQUFPZ0gsTUFBTSxDQUFDaEgsT0FBT2dILE1BQU0sQ0FBQyxDQUFDLEdBQUd0RixLQUFLa0Ysa0JBQWtCLEdBQUdHO0lBQ3hGO0FBQ0osR0FDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS1odG1scGFyc2VyMi10cmVlLWFkYXB0ZXIvZGlzdC9janMvaW5kZXguanM/MDYxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWRhcHRlciA9IGV4cG9ydHMuc2VyaWFsaXplRG9jdHlwZUNvbnRlbnQgPSB2b2lkIDA7XG5jb25zdCBwYXJzZTVfMSA9IHJlcXVpcmUoXCJwYXJzZTVcIik7XG5jb25zdCBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBkb21oYW5kbGVyXzEuVGV4dCh2YWx1ZSk7XG59XG5mdW5jdGlvbiBlbnF1b3RlRG9jdHlwZUlkKGlkKSB7XG4gICAgY29uc3QgcXVvdGUgPSBpZC5pbmNsdWRlcygnXCInKSA/IFwiJ1wiIDogJ1wiJztcbiAgICByZXR1cm4gcXVvdGUgKyBpZCArIHF1b3RlO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gc2VyaWFsaXplRG9jdHlwZUNvbnRlbnQobmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7XG4gICAgbGV0IHN0ciA9ICchRE9DVFlQRSAnO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHN0ciArPSBuYW1lO1xuICAgIH1cbiAgICBpZiAocHVibGljSWQpIHtcbiAgICAgICAgc3RyICs9IGAgUFVCTElDICR7ZW5xdW90ZURvY3R5cGVJZChwdWJsaWNJZCl9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAoc3lzdGVtSWQpIHtcbiAgICAgICAgc3RyICs9ICcgU1lTVEVNJztcbiAgICB9XG4gICAgaWYgKHN5c3RlbUlkKSB7XG4gICAgICAgIHN0ciArPSBgICR7ZW5xdW90ZURvY3R5cGVJZChzeXN0ZW1JZCl9YDtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmV4cG9ydHMuc2VyaWFsaXplRG9jdHlwZUNvbnRlbnQgPSBzZXJpYWxpemVEb2N0eXBlQ29udGVudDtcbmV4cG9ydHMuYWRhcHRlciA9IHtcbiAgICAvLyBSZS1leHBvcnRzIGZyb20gZG9taGFuZGxlclxuICAgIGlzQ29tbWVudE5vZGU6IGRvbWhhbmRsZXJfMS5pc0NvbW1lbnQsXG4gICAgaXNFbGVtZW50Tm9kZTogZG9taGFuZGxlcl8xLmlzVGFnLFxuICAgIGlzVGV4dE5vZGU6IGRvbWhhbmRsZXJfMS5pc1RleHQsXG4gICAgLy9Ob2RlIGNvbnN0cnVjdGlvblxuICAgIGNyZWF0ZURvY3VtZW50KCkge1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IGRvbWhhbmRsZXJfMS5Eb2N1bWVudChbXSk7XG4gICAgICAgIG5vZGVbJ3gtbW9kZSddID0gcGFyc2U1XzEuaHRtbC5ET0NVTUVOVF9NT0RFLk5PX1FVSVJLUztcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcbiAgICBjcmVhdGVEb2N1bWVudEZyYWdtZW50KCkge1xuICAgICAgICByZXR1cm4gbmV3IGRvbWhhbmRsZXJfMS5Eb2N1bWVudChbXSk7XG4gICAgfSxcbiAgICBjcmVhdGVFbGVtZW50KHRhZ05hbWUsIG5hbWVzcGFjZVVSSSwgYXR0cnMpIHtcbiAgICAgICAgY29uc3QgYXR0cmlicyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGNvbnN0IGF0dHJpYnNOYW1lc3BhY2UgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCBhdHRyaWJzUHJlZml4ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0ck5hbWUgPSBhdHRyc1tpXS5uYW1lO1xuICAgICAgICAgICAgYXR0cmlic1thdHRyTmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgICAgICAgICAgIGF0dHJpYnNOYW1lc3BhY2VbYXR0ck5hbWVdID0gYXR0cnNbaV0ubmFtZXNwYWNlO1xuICAgICAgICAgICAgYXR0cmlic1ByZWZpeFthdHRyTmFtZV0gPSBhdHRyc1tpXS5wcmVmaXg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBkb21oYW5kbGVyXzEuRWxlbWVudCh0YWdOYW1lLCBhdHRyaWJzLCBbXSk7XG4gICAgICAgIG5vZGUubmFtZXNwYWNlID0gbmFtZXNwYWNlVVJJO1xuICAgICAgICBub2RlWyd4LWF0dHJpYnNOYW1lc3BhY2UnXSA9IGF0dHJpYnNOYW1lc3BhY2U7XG4gICAgICAgIG5vZGVbJ3gtYXR0cmlic1ByZWZpeCddID0gYXR0cmlic1ByZWZpeDtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcbiAgICBjcmVhdGVDb21tZW50Tm9kZShkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcgZG9taGFuZGxlcl8xLkNvbW1lbnQoZGF0YSk7XG4gICAgfSxcbiAgICAvL1RyZWUgbXV0YXRpb25cbiAgICBhcHBlbmRDaGlsZChwYXJlbnROb2RlLCBuZXdOb2RlKSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBwYXJlbnROb2RlLmNoaWxkcmVuW3BhcmVudE5vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICBwcmV2Lm5leHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgbmV3Tm9kZS5wcmV2ID0gcHJldjtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnROb2RlLmNoaWxkcmVuLnB1c2gobmV3Tm9kZSk7XG4gICAgICAgIG5ld05vZGUucGFyZW50ID0gcGFyZW50Tm9kZTtcbiAgICB9LFxuICAgIGluc2VydEJlZm9yZShwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgICAgIGNvbnN0IGluc2VydGlvbklkeCA9IHBhcmVudE5vZGUuY2hpbGRyZW4uaW5kZXhPZihyZWZlcmVuY2VOb2RlKTtcbiAgICAgICAgY29uc3QgeyBwcmV2IH0gPSByZWZlcmVuY2VOb2RlO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgcHJldi5uZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIG5ld05vZGUucHJldiA9IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgcmVmZXJlbmNlTm9kZS5wcmV2ID0gbmV3Tm9kZTtcbiAgICAgICAgbmV3Tm9kZS5uZXh0ID0gcmVmZXJlbmNlTm9kZTtcbiAgICAgICAgcGFyZW50Tm9kZS5jaGlsZHJlbi5zcGxpY2UoaW5zZXJ0aW9uSWR4LCAwLCBuZXdOb2RlKTtcbiAgICAgICAgbmV3Tm9kZS5wYXJlbnQgPSBwYXJlbnROb2RlO1xuICAgIH0sXG4gICAgc2V0VGVtcGxhdGVDb250ZW50KHRlbXBsYXRlRWxlbWVudCwgY29udGVudEVsZW1lbnQpIHtcbiAgICAgICAgZXhwb3J0cy5hZGFwdGVyLmFwcGVuZENoaWxkKHRlbXBsYXRlRWxlbWVudCwgY29udGVudEVsZW1lbnQpO1xuICAgIH0sXG4gICAgZ2V0VGVtcGxhdGVDb250ZW50KHRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGVFbGVtZW50LmNoaWxkcmVuWzBdO1xuICAgIH0sXG4gICAgc2V0RG9jdW1lbnRUeXBlKGRvY3VtZW50LCBuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHNlcmlhbGl6ZURvY3R5cGVDb250ZW50KG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCk7XG4gICAgICAgIGxldCBkb2N0eXBlTm9kZSA9IGRvY3VtZW50LmNoaWxkcmVuLmZpbmQoKG5vZGUpID0+ICgwLCBkb21oYW5kbGVyXzEuaXNEaXJlY3RpdmUpKG5vZGUpICYmIG5vZGUubmFtZSA9PT0gJyFkb2N0eXBlJyk7XG4gICAgICAgIGlmIChkb2N0eXBlTm9kZSkge1xuICAgICAgICAgICAgZG9jdHlwZU5vZGUuZGF0YSA9IGRhdGEgIT09IG51bGwgJiYgZGF0YSAhPT0gdm9pZCAwID8gZGF0YSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkb2N0eXBlTm9kZSA9IG5ldyBkb21oYW5kbGVyXzEuUHJvY2Vzc2luZ0luc3RydWN0aW9uKCchZG9jdHlwZScsIGRhdGEpO1xuICAgICAgICAgICAgZXhwb3J0cy5hZGFwdGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LCBkb2N0eXBlTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdHlwZU5vZGVbJ3gtbmFtZSddID0gbmFtZSAhPT0gbnVsbCAmJiBuYW1lICE9PSB2b2lkIDAgPyBuYW1lIDogdW5kZWZpbmVkO1xuICAgICAgICBkb2N0eXBlTm9kZVsneC1wdWJsaWNJZCddID0gcHVibGljSWQgIT09IG51bGwgJiYgcHVibGljSWQgIT09IHZvaWQgMCA/IHB1YmxpY0lkIDogdW5kZWZpbmVkO1xuICAgICAgICBkb2N0eXBlTm9kZVsneC1zeXN0ZW1JZCddID0gc3lzdGVtSWQgIT09IG51bGwgJiYgc3lzdGVtSWQgIT09IHZvaWQgMCA/IHN5c3RlbUlkIDogdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgc2V0RG9jdW1lbnRNb2RlKGRvY3VtZW50LCBtb2RlKSB7XG4gICAgICAgIGRvY3VtZW50Wyd4LW1vZGUnXSA9IG1vZGU7XG4gICAgfSxcbiAgICBnZXREb2N1bWVudE1vZGUoZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50Wyd4LW1vZGUnXTtcbiAgICB9LFxuICAgIGRldGFjaE5vZGUobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5wYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IG5vZGUucGFyZW50LmNoaWxkcmVuLmluZGV4T2Yobm9kZSk7XG4gICAgICAgICAgICBjb25zdCB7IHByZXYsIG5leHQgfSA9IG5vZGU7XG4gICAgICAgICAgICBub2RlLnByZXYgPSBudWxsO1xuICAgICAgICAgICAgbm9kZS5uZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICAgICAgcHJldi5uZXh0ID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgbmV4dC5wcmV2ID0gcHJldjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGUucGFyZW50LmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgbm9kZS5wYXJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBpbnNlcnRUZXh0KHBhcmVudE5vZGUsIHRleHQpIHtcbiAgICAgICAgY29uc3QgbGFzdENoaWxkID0gcGFyZW50Tm9kZS5jaGlsZHJlbltwYXJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAobGFzdENoaWxkICYmICgwLCBkb21oYW5kbGVyXzEuaXNUZXh0KShsYXN0Q2hpbGQpKSB7XG4gICAgICAgICAgICBsYXN0Q2hpbGQuZGF0YSArPSB0ZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXhwb3J0cy5hZGFwdGVyLmFwcGVuZENoaWxkKHBhcmVudE5vZGUsIGNyZWF0ZVRleHROb2RlKHRleHQpKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaW5zZXJ0VGV4dEJlZm9yZShwYXJlbnROb2RlLCB0ZXh0LCByZWZlcmVuY2VOb2RlKSB7XG4gICAgICAgIGNvbnN0IHByZXZOb2RlID0gcGFyZW50Tm9kZS5jaGlsZHJlbltwYXJlbnROb2RlLmNoaWxkcmVuLmluZGV4T2YocmVmZXJlbmNlTm9kZSkgLSAxXTtcbiAgICAgICAgaWYgKHByZXZOb2RlICYmICgwLCBkb21oYW5kbGVyXzEuaXNUZXh0KShwcmV2Tm9kZSkpIHtcbiAgICAgICAgICAgIHByZXZOb2RlLmRhdGEgKz0gdGV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4cG9ydHMuYWRhcHRlci5pbnNlcnRCZWZvcmUocGFyZW50Tm9kZSwgY3JlYXRlVGV4dE5vZGUodGV4dCksIHJlZmVyZW5jZU5vZGUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZG9wdEF0dHJpYnV0ZXMocmVjaXBpZW50LCBhdHRycykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyTmFtZSA9IGF0dHJzW2ldLm5hbWU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlY2lwaWVudC5hdHRyaWJzW2F0dHJOYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICByZWNpcGllbnQuYXR0cmlic1thdHRyTmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgICAgICAgICAgICAgICByZWNpcGllbnRbJ3gtYXR0cmlic05hbWVzcGFjZSddW2F0dHJOYW1lXSA9IGF0dHJzW2ldLm5hbWVzcGFjZTtcbiAgICAgICAgICAgICAgICByZWNpcGllbnRbJ3gtYXR0cmlic1ByZWZpeCddW2F0dHJOYW1lXSA9IGF0dHJzW2ldLnByZWZpeDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy9UcmVlIHRyYXZlcnNpbmdcbiAgICBnZXRGaXJzdENoaWxkKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGRyZW5bMF07XG4gICAgfSxcbiAgICBnZXRDaGlsZE5vZGVzKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGRyZW47XG4gICAgfSxcbiAgICBnZXRQYXJlbnROb2RlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUucGFyZW50O1xuICAgIH0sXG4gICAgZ2V0QXR0ckxpc3QoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5hdHRyaWJ1dGVzO1xuICAgIH0sXG4gICAgLy9Ob2RlIGRhdGFcbiAgICBnZXRUYWdOYW1lKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQubmFtZTtcbiAgICB9LFxuICAgIGdldE5hbWVzcGFjZVVSSShlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50Lm5hbWVzcGFjZTtcbiAgICB9LFxuICAgIGdldFRleHROb2RlQ29udGVudCh0ZXh0Tm9kZSkge1xuICAgICAgICByZXR1cm4gdGV4dE5vZGUuZGF0YTtcbiAgICB9LFxuICAgIGdldENvbW1lbnROb2RlQ29udGVudChjb21tZW50Tm9kZSkge1xuICAgICAgICByZXR1cm4gY29tbWVudE5vZGUuZGF0YTtcbiAgICB9LFxuICAgIGdldERvY3VtZW50VHlwZU5vZGVOYW1lKGRvY3R5cGVOb2RlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IGRvY3R5cGVOb2RlWyd4LW5hbWUnXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgfSxcbiAgICBnZXREb2N1bWVudFR5cGVOb2RlUHVibGljSWQoZG9jdHlwZU5vZGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gZG9jdHlwZU5vZGVbJ3gtcHVibGljSWQnXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgfSxcbiAgICBnZXREb2N1bWVudFR5cGVOb2RlU3lzdGVtSWQoZG9jdHlwZU5vZGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gZG9jdHlwZU5vZGVbJ3gtc3lzdGVtSWQnXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgfSxcbiAgICAvL05vZGUgdHlwZXNcbiAgICBpc0RvY3VtZW50VHlwZU5vZGUobm9kZSkge1xuICAgICAgICByZXR1cm4gKDAsIGRvbWhhbmRsZXJfMS5pc0RpcmVjdGl2ZSkobm9kZSkgJiYgbm9kZS5uYW1lID09PSAnIWRvY3R5cGUnO1xuICAgIH0sXG4gICAgLy8gU291cmNlIGNvZGUgbG9jYXRpb25cbiAgICBzZXROb2RlU291cmNlQ29kZUxvY2F0aW9uKG5vZGUsIGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgICAgbm9kZS5zdGFydEluZGV4ID0gbG9jYXRpb24uc3RhcnRPZmZzZXQ7XG4gICAgICAgICAgICBub2RlLmVuZEluZGV4ID0gbG9jYXRpb24uZW5kT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuc291cmNlQ29kZUxvY2F0aW9uID0gbG9jYXRpb247XG4gICAgfSxcbiAgICBnZXROb2RlU291cmNlQ29kZUxvY2F0aW9uKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuc291cmNlQ29kZUxvY2F0aW9uO1xuICAgIH0sXG4gICAgdXBkYXRlTm9kZVNvdXJjZUNvZGVMb2NhdGlvbihub2RlLCBlbmRMb2NhdGlvbikge1xuICAgICAgICBpZiAoZW5kTG9jYXRpb24uZW5kT2Zmc2V0ICE9IG51bGwpXG4gICAgICAgICAgICBub2RlLmVuZEluZGV4ID0gZW5kTG9jYXRpb24uZW5kT2Zmc2V0O1xuICAgICAgICBub2RlLnNvdXJjZUNvZGVMb2NhdGlvbiA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbm9kZS5zb3VyY2VDb2RlTG9jYXRpb24pLCBlbmRMb2NhdGlvbik7XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhZGFwdGVyIiwic2VyaWFsaXplRG9jdHlwZUNvbnRlbnQiLCJwYXJzZTVfMSIsInJlcXVpcmUiLCJkb21oYW5kbGVyXzEiLCJjcmVhdGVUZXh0Tm9kZSIsIlRleHQiLCJlbnF1b3RlRG9jdHlwZUlkIiwiaWQiLCJxdW90ZSIsImluY2x1ZGVzIiwibmFtZSIsInB1YmxpY0lkIiwic3lzdGVtSWQiLCJzdHIiLCJpc0NvbW1lbnROb2RlIiwiaXNDb21tZW50IiwiaXNFbGVtZW50Tm9kZSIsImlzVGFnIiwiaXNUZXh0Tm9kZSIsImlzVGV4dCIsImNyZWF0ZURvY3VtZW50Iiwibm9kZSIsIkRvY3VtZW50IiwiaHRtbCIsIkRPQ1VNRU5UX01PREUiLCJOT19RVUlSS1MiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlRWxlbWVudCIsInRhZ05hbWUiLCJuYW1lc3BhY2VVUkkiLCJhdHRycyIsImF0dHJpYnMiLCJjcmVhdGUiLCJhdHRyaWJzTmFtZXNwYWNlIiwiYXR0cmlic1ByZWZpeCIsImkiLCJsZW5ndGgiLCJhdHRyTmFtZSIsIm5hbWVzcGFjZSIsInByZWZpeCIsIkVsZW1lbnQiLCJjcmVhdGVDb21tZW50Tm9kZSIsImRhdGEiLCJDb21tZW50IiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwibmV3Tm9kZSIsInByZXYiLCJjaGlsZHJlbiIsIm5leHQiLCJwdXNoIiwicGFyZW50IiwiaW5zZXJ0QmVmb3JlIiwicmVmZXJlbmNlTm9kZSIsImluc2VydGlvbklkeCIsImluZGV4T2YiLCJzcGxpY2UiLCJzZXRUZW1wbGF0ZUNvbnRlbnQiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJjb250ZW50RWxlbWVudCIsImdldFRlbXBsYXRlQ29udGVudCIsInNldERvY3VtZW50VHlwZSIsImRvY3VtZW50IiwiZG9jdHlwZU5vZGUiLCJmaW5kIiwiaXNEaXJlY3RpdmUiLCJQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJ1bmRlZmluZWQiLCJzZXREb2N1bWVudE1vZGUiLCJtb2RlIiwiZ2V0RG9jdW1lbnRNb2RlIiwiZGV0YWNoTm9kZSIsImlkeCIsImluc2VydFRleHQiLCJ0ZXh0IiwibGFzdENoaWxkIiwiaW5zZXJ0VGV4dEJlZm9yZSIsInByZXZOb2RlIiwiYWRvcHRBdHRyaWJ1dGVzIiwicmVjaXBpZW50IiwiZ2V0Rmlyc3RDaGlsZCIsImdldENoaWxkTm9kZXMiLCJnZXRQYXJlbnROb2RlIiwiZ2V0QXR0ckxpc3QiLCJlbGVtZW50IiwiYXR0cmlidXRlcyIsImdldFRhZ05hbWUiLCJnZXROYW1lc3BhY2VVUkkiLCJnZXRUZXh0Tm9kZUNvbnRlbnQiLCJ0ZXh0Tm9kZSIsImdldENvbW1lbnROb2RlQ29udGVudCIsImNvbW1lbnROb2RlIiwiZ2V0RG9jdW1lbnRUeXBlTm9kZU5hbWUiLCJfYSIsImdldERvY3VtZW50VHlwZU5vZGVQdWJsaWNJZCIsImdldERvY3VtZW50VHlwZU5vZGVTeXN0ZW1JZCIsImlzRG9jdW1lbnRUeXBlTm9kZSIsInNldE5vZGVTb3VyY2VDb2RlTG9jYXRpb24iLCJsb2NhdGlvbiIsInN0YXJ0SW5kZXgiLCJzdGFydE9mZnNldCIsImVuZEluZGV4IiwiZW5kT2Zmc2V0Iiwic291cmNlQ29kZUxvY2F0aW9uIiwiZ2V0Tm9kZVNvdXJjZUNvZGVMb2NhdGlvbiIsInVwZGF0ZU5vZGVTb3VyY2VDb2RlTG9jYXRpb24iLCJlbmRMb2NhdGlvbiIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5-htmlparser2-tree-adapter/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/common/doctype.js":
/*!********************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/common/doctype.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getDocumentMode = exports.isConforming = void 0;\nconst html_js_1 = __webpack_require__(/*! ./html.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js\");\n//Const\nconst VALID_DOCTYPE_NAME = \"html\";\nconst VALID_SYSTEM_ID = \"about:legacy-compat\";\nconst QUIRKS_MODE_SYSTEM_ID = \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\";\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    \"+//silmaril//dtd html pro v0r11 19970101//\",\n    \"-//as//dtd html 3.0 aswedit + extensions//\",\n    \"-//advasoft ltd//dtd html 3.0 aswedit + extensions//\",\n    \"-//ietf//dtd html 2.0 level 1//\",\n    \"-//ietf//dtd html 2.0 level 2//\",\n    \"-//ietf//dtd html 2.0 strict level 1//\",\n    \"-//ietf//dtd html 2.0 strict level 2//\",\n    \"-//ietf//dtd html 2.0 strict//\",\n    \"-//ietf//dtd html 2.0//\",\n    \"-//ietf//dtd html 2.1e//\",\n    \"-//ietf//dtd html 3.0//\",\n    \"-//ietf//dtd html 3.2 final//\",\n    \"-//ietf//dtd html 3.2//\",\n    \"-//ietf//dtd html 3//\",\n    \"-//ietf//dtd html level 0//\",\n    \"-//ietf//dtd html level 1//\",\n    \"-//ietf//dtd html level 2//\",\n    \"-//ietf//dtd html level 3//\",\n    \"-//ietf//dtd html strict level 0//\",\n    \"-//ietf//dtd html strict level 1//\",\n    \"-//ietf//dtd html strict level 2//\",\n    \"-//ietf//dtd html strict level 3//\",\n    \"-//ietf//dtd html strict//\",\n    \"-//ietf//dtd html//\",\n    \"-//metrius//dtd metrius presentational//\",\n    \"-//microsoft//dtd internet explorer 2.0 html strict//\",\n    \"-//microsoft//dtd internet explorer 2.0 html//\",\n    \"-//microsoft//dtd internet explorer 2.0 tables//\",\n    \"-//microsoft//dtd internet explorer 3.0 html strict//\",\n    \"-//microsoft//dtd internet explorer 3.0 html//\",\n    \"-//microsoft//dtd internet explorer 3.0 tables//\",\n    \"-//netscape comm. corp.//dtd html//\",\n    \"-//netscape comm. corp.//dtd strict html//\",\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    \"-//sq//dtd html 2.0 hotmetal + extensions//\",\n    \"-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//\",\n    \"-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//\",\n    \"-//spyglass//dtd html 2.0 extended//\",\n    \"-//sun microsystems corp.//dtd hotjava html//\",\n    \"-//sun microsystems corp.//dtd hotjava strict html//\",\n    \"-//w3c//dtd html 3 1995-03-24//\",\n    \"-//w3c//dtd html 3.2 draft//\",\n    \"-//w3c//dtd html 3.2 final//\",\n    \"-//w3c//dtd html 3.2//\",\n    \"-//w3c//dtd html 3.2s draft//\",\n    \"-//w3c//dtd html 4.0 frameset//\",\n    \"-//w3c//dtd html 4.0 transitional//\",\n    \"-//w3c//dtd html experimental 19960712//\",\n    \"-//w3c//dtd html experimental 970421//\",\n    \"-//w3c//dtd w3 html//\",\n    \"-//w3o//dtd w3 html 3.0//\",\n    \"-//webtechs//dtd mozilla html 2.0//\",\n    \"-//webtechs//dtd mozilla html//\"\n];\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,\n    \"-//w3c//dtd html 4.01 frameset//\",\n    \"-//w3c//dtd html 4.01 transitional//\"\n];\nconst QUIRKS_MODE_PUBLIC_IDS = new Set([\n    \"-//w3o//dtd w3 html strict 3.0//en//\",\n    \"-/w3c/dtd html 4.0 transitional/en\",\n    \"html\"\n]);\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = [\n    \"-//w3c//dtd xhtml 1.0 frameset//\",\n    \"-//w3c//dtd xhtml 1.0 transitional//\"\n];\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,\n    \"-//w3c//dtd html 4.01 frameset//\",\n    \"-//w3c//dtd html 4.01 transitional//\"\n];\n//Utils\nfunction hasPrefix(publicId, prefixes) {\n    return prefixes.some((prefix)=>publicId.startsWith(prefix));\n}\n//API\nfunction isConforming(token) {\n    return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);\n}\nexports.isConforming = isConforming;\nfunction getDocumentMode(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return html_js_1.DOCUMENT_MODE.QUIRKS;\n    }\n    const { systemId } = token;\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return html_js_1.DOCUMENT_MODE.QUIRKS;\n    }\n    let { publicId } = token;\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n        if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {\n            return html_js_1.DOCUMENT_MODE.QUIRKS;\n        }\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return html_js_1.DOCUMENT_MODE.QUIRKS;\n        }\n        prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return html_js_1.DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n    return html_js_1.DOCUMENT_MODE.NO_QUIRKS;\n}\nexports.getDocumentMode = getDocumentMode; //# sourceMappingURL=doctype.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/common/doctype.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/common/error-codes.js":
/*!************************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/common/error-codes.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ERR = void 0;\nvar ERR;\n(function(ERR) {\n    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n    ERR[\"unexpectedNullCharacter\"] = \"unexpected-null-character\";\n    ERR[\"unexpectedQuestionMarkInsteadOfTagName\"] = \"unexpected-question-mark-instead-of-tag-name\";\n    ERR[\"invalidFirstCharacterOfTagName\"] = \"invalid-first-character-of-tag-name\";\n    ERR[\"unexpectedEqualsSignBeforeAttributeName\"] = \"unexpected-equals-sign-before-attribute-name\";\n    ERR[\"missingEndTagName\"] = \"missing-end-tag-name\";\n    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    ERR[\"abruptDoctypeSystemIdentifier\"] = \"abrupt-doctype-system-identifier\";\n    ERR[\"cdataInHtmlContent\"] = \"cdata-in-html-content\";\n    ERR[\"incorrectlyOpenedComment\"] = \"incorrectly-opened-comment\";\n    ERR[\"eofInScriptHtmlCommentLikeText\"] = \"eof-in-script-html-comment-like-text\";\n    ERR[\"eofInDoctype\"] = \"eof-in-doctype\";\n    ERR[\"nestedComment\"] = \"nested-comment\";\n    ERR[\"abruptClosingOfEmptyComment\"] = \"abrupt-closing-of-empty-comment\";\n    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n    ERR[\"controlCharacterReference\"] = \"control-character-reference\";\n    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n    ERR[\"misplacedDoctype\"] = \"misplaced-doctype\";\n    ERR[\"endTagWithoutMatchingOpenElement\"] = \"end-tag-without-matching-open-element\";\n    ERR[\"closingOfElementWithOpenChildElements\"] = \"closing-of-element-with-open-child-elements\";\n    ERR[\"disallowedContentInNoscriptInHead\"] = \"disallowed-content-in-noscript-in-head\";\n    ERR[\"openElementsLeftAfterEof\"] = \"open-elements-left-after-eof\";\n    ERR[\"abandonedHeadElementChild\"] = \"abandoned-head-element-child\";\n    ERR[\"misplacedStartTagForHeadElement\"] = \"misplaced-start-tag-for-head-element\";\n    ERR[\"nestedNoscriptInHead\"] = \"nested-noscript-in-head\";\n    ERR[\"eofInElementThatCanContainOnlyText\"] = \"eof-in-element-that-can-contain-only-text\";\n})(ERR = exports.ERR || (exports.ERR = {})); //# sourceMappingURL=error-codes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvY29tbW9uL2Vycm9yLWNvZGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxXQUFXLEdBQUcsS0FBSztBQUNuQixJQUFJRTtBQUNILFVBQVVBLEdBQUc7SUFDVkEsR0FBRyxDQUFDLGdDQUFnQyxHQUFHO0lBQ3ZDQSxHQUFHLENBQUMsNEJBQTRCLEdBQUc7SUFDbkNBLEdBQUcsQ0FBQyx5QkFBeUIsR0FBRztJQUNoQ0EsR0FBRyxDQUFDLGdEQUFnRCxHQUFHO0lBQ3ZEQSxHQUFHLENBQUMsdUJBQXVCLEdBQUc7SUFDOUJBLEdBQUcsQ0FBQyw0QkFBNEIsR0FBRztJQUNuQ0EsR0FBRyxDQUFDLHlCQUF5QixHQUFHO0lBQ2hDQSxHQUFHLENBQUMsMEJBQTBCLEdBQUc7SUFDakNBLEdBQUcsQ0FBQyx5Q0FBeUMsR0FBRztJQUNoREEsR0FBRyxDQUFDLGlDQUFpQyxHQUFHO0lBQ3hDQSxHQUFHLENBQUMsMENBQTBDLEdBQUc7SUFDakRBLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRztJQUMzQkEsR0FBRyxDQUFDLHFDQUFxQyxHQUFHO0lBQzVDQSxHQUFHLENBQUMsaUNBQWlDLEdBQUc7SUFDeENBLEdBQUcsQ0FBQywwQ0FBMEMsR0FBRztJQUNqREEsR0FBRyxDQUFDLGtEQUFrRCxHQUFHO0lBQ3pEQSxHQUFHLENBQUMsOENBQThDLEdBQUc7SUFDckRBLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRztJQUMxQkEsR0FBRyxDQUFDLFdBQVcsR0FBRztJQUNsQkEsR0FBRyxDQUFDLHdCQUF3QixHQUFHO0lBQy9CQSxHQUFHLENBQUMscUNBQXFDLEdBQUc7SUFDNUNBLEdBQUcsQ0FBQyw2Q0FBNkMsR0FBRztJQUNwREEsR0FBRyxDQUFDLDREQUE0RCxHQUFHO0lBQ25FQSxHQUFHLENBQUMsNkNBQTZDLEdBQUc7SUFDcERBLEdBQUcsQ0FBQyw0Q0FBNEMsR0FBRztJQUNuREEsR0FBRyxDQUFDLDRDQUE0QyxHQUFHO0lBQ25EQSxHQUFHLENBQUMsaUNBQWlDLEdBQUc7SUFDeENBLEdBQUcsQ0FBQyxpQ0FBaUMsR0FBRztJQUN4Q0EsR0FBRyxDQUFDLGdDQUFnQyxHQUFHO0lBQ3ZDQSxHQUFHLENBQUMsZ0NBQWdDLEdBQUc7SUFDdkNBLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRztJQUM1QkEsR0FBRyxDQUFDLDJCQUEyQixHQUFHO0lBQ2xDQSxHQUFHLENBQUMsaUNBQWlDLEdBQUc7SUFDeENBLEdBQUcsQ0FBQyxlQUFlLEdBQUc7SUFDdEJBLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRztJQUN2QkEsR0FBRyxDQUFDLDhCQUE4QixHQUFHO0lBQ3JDQSxHQUFHLENBQUMsZUFBZSxHQUFHO0lBQ3RCQSxHQUFHLENBQUMsMkJBQTJCLEdBQUc7SUFDbENBLEdBQUcsQ0FBQyxhQUFhLEdBQUc7SUFDcEJBLEdBQUcsQ0FBQyw2Q0FBNkMsR0FBRztJQUNwREEsR0FBRyxDQUFDLHlCQUF5QixHQUFHO0lBQ2hDQSxHQUFHLENBQUMsOEJBQThCLEdBQUc7SUFDckNBLEdBQUcsQ0FBQyx3Q0FBd0MsR0FBRztJQUMvQ0EsR0FBRyxDQUFDLDRCQUE0QixHQUFHO0lBQ25DQSxHQUFHLENBQUMsaUNBQWlDLEdBQUc7SUFDeENBLEdBQUcsQ0FBQyxxQ0FBcUMsR0FBRztJQUM1Q0EsR0FBRyxDQUFDLHFCQUFxQixHQUFHO0lBQzVCQSxHQUFHLENBQUMsMkNBQTJDLEdBQUc7SUFDbERBLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRztJQUM1QkEsR0FBRyxDQUFDLHVCQUF1QixHQUFHO0lBQzlCQSxHQUFHLENBQUMsaUJBQWlCLEdBQUc7SUFDeEJBLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRztJQUMxQkEsR0FBRyxDQUFDLG1DQUFtQyxHQUFHO0lBQzFDQSxHQUFHLENBQUMsd0NBQXdDLEdBQUc7SUFDL0NBLEdBQUcsQ0FBQyxvQ0FBb0MsR0FBRztJQUMzQ0EsR0FBRyxDQUFDLDJCQUEyQixHQUFHO0lBQ2xDQSxHQUFHLENBQUMsNEJBQTRCLEdBQUc7SUFDbkNBLEdBQUcsQ0FBQyxrQ0FBa0MsR0FBRztJQUN6Q0EsR0FBRyxDQUFDLHVCQUF1QixHQUFHO0lBQzlCQSxHQUFHLENBQUMscUNBQXFDLEdBQUc7QUFDaEQsR0FBR0EsTUFBTUYsUUFBUUUsR0FBRyxJQUFLRixDQUFBQSxXQUFXLEdBQUcsQ0FBQyxLQUN4Qyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy9jb21tb24vZXJyb3ItY29kZXMuanM/ODYyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRVJSID0gdm9pZCAwO1xudmFyIEVSUjtcbihmdW5jdGlvbiAoRVJSKSB7XG4gICAgRVJSW1wiY29udHJvbENoYXJhY3RlckluSW5wdXRTdHJlYW1cIl0gPSBcImNvbnRyb2wtY2hhcmFjdGVyLWluLWlucHV0LXN0cmVhbVwiO1xuICAgIEVSUltcIm5vbmNoYXJhY3RlckluSW5wdXRTdHJlYW1cIl0gPSBcIm5vbmNoYXJhY3Rlci1pbi1pbnB1dC1zdHJlYW1cIjtcbiAgICBFUlJbXCJzdXJyb2dhdGVJbklucHV0U3RyZWFtXCJdID0gXCJzdXJyb2dhdGUtaW4taW5wdXQtc3RyZWFtXCI7XG4gICAgRVJSW1wibm9uVm9pZEh0bWxFbGVtZW50U3RhcnRUYWdXaXRoVHJhaWxpbmdTb2xpZHVzXCJdID0gXCJub24tdm9pZC1odG1sLWVsZW1lbnQtc3RhcnQtdGFnLXdpdGgtdHJhaWxpbmctc29saWR1c1wiO1xuICAgIEVSUltcImVuZFRhZ1dpdGhBdHRyaWJ1dGVzXCJdID0gXCJlbmQtdGFnLXdpdGgtYXR0cmlidXRlc1wiO1xuICAgIEVSUltcImVuZFRhZ1dpdGhUcmFpbGluZ1NvbGlkdXNcIl0gPSBcImVuZC10YWctd2l0aC10cmFpbGluZy1zb2xpZHVzXCI7XG4gICAgRVJSW1widW5leHBlY3RlZFNvbGlkdXNJblRhZ1wiXSA9IFwidW5leHBlY3RlZC1zb2xpZHVzLWluLXRhZ1wiO1xuICAgIEVSUltcInVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyXCJdID0gXCJ1bmV4cGVjdGVkLW51bGwtY2hhcmFjdGVyXCI7XG4gICAgRVJSW1widW5leHBlY3RlZFF1ZXN0aW9uTWFya0luc3RlYWRPZlRhZ05hbWVcIl0gPSBcInVuZXhwZWN0ZWQtcXVlc3Rpb24tbWFyay1pbnN0ZWFkLW9mLXRhZy1uYW1lXCI7XG4gICAgRVJSW1wiaW52YWxpZEZpcnN0Q2hhcmFjdGVyT2ZUYWdOYW1lXCJdID0gXCJpbnZhbGlkLWZpcnN0LWNoYXJhY3Rlci1vZi10YWctbmFtZVwiO1xuICAgIEVSUltcInVuZXhwZWN0ZWRFcXVhbHNTaWduQmVmb3JlQXR0cmlidXRlTmFtZVwiXSA9IFwidW5leHBlY3RlZC1lcXVhbHMtc2lnbi1iZWZvcmUtYXR0cmlidXRlLW5hbWVcIjtcbiAgICBFUlJbXCJtaXNzaW5nRW5kVGFnTmFtZVwiXSA9IFwibWlzc2luZy1lbmQtdGFnLW5hbWVcIjtcbiAgICBFUlJbXCJ1bmV4cGVjdGVkQ2hhcmFjdGVySW5BdHRyaWJ1dGVOYW1lXCJdID0gXCJ1bmV4cGVjdGVkLWNoYXJhY3Rlci1pbi1hdHRyaWJ1dGUtbmFtZVwiO1xuICAgIEVSUltcInVua25vd25OYW1lZENoYXJhY3RlclJlZmVyZW5jZVwiXSA9IFwidW5rbm93bi1uYW1lZC1jaGFyYWN0ZXItcmVmZXJlbmNlXCI7XG4gICAgRVJSW1wibWlzc2luZ1NlbWljb2xvbkFmdGVyQ2hhcmFjdGVyUmVmZXJlbmNlXCJdID0gXCJtaXNzaW5nLXNlbWljb2xvbi1hZnRlci1jaGFyYWN0ZXItcmVmZXJlbmNlXCI7XG4gICAgRVJSW1widW5leHBlY3RlZENoYXJhY3RlckFmdGVyRG9jdHlwZVN5c3RlbUlkZW50aWZpZXJcIl0gPSBcInVuZXhwZWN0ZWQtY2hhcmFjdGVyLWFmdGVyLWRvY3R5cGUtc3lzdGVtLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJ1bmV4cGVjdGVkQ2hhcmFjdGVySW5VbnF1b3RlZEF0dHJpYnV0ZVZhbHVlXCJdID0gXCJ1bmV4cGVjdGVkLWNoYXJhY3Rlci1pbi11bnF1b3RlZC1hdHRyaWJ1dGUtdmFsdWVcIjtcbiAgICBFUlJbXCJlb2ZCZWZvcmVUYWdOYW1lXCJdID0gXCJlb2YtYmVmb3JlLXRhZy1uYW1lXCI7XG4gICAgRVJSW1wiZW9mSW5UYWdcIl0gPSBcImVvZi1pbi10YWdcIjtcbiAgICBFUlJbXCJtaXNzaW5nQXR0cmlidXRlVmFsdWVcIl0gPSBcIm1pc3NpbmctYXR0cmlidXRlLXZhbHVlXCI7XG4gICAgRVJSW1wibWlzc2luZ1doaXRlc3BhY2VCZXR3ZWVuQXR0cmlidXRlc1wiXSA9IFwibWlzc2luZy13aGl0ZXNwYWNlLWJldHdlZW4tYXR0cmlidXRlc1wiO1xuICAgIEVSUltcIm1pc3NpbmdXaGl0ZXNwYWNlQWZ0ZXJEb2N0eXBlUHVibGljS2V5d29yZFwiXSA9IFwibWlzc2luZy13aGl0ZXNwYWNlLWFmdGVyLWRvY3R5cGUtcHVibGljLWtleXdvcmRcIjtcbiAgICBFUlJbXCJtaXNzaW5nV2hpdGVzcGFjZUJldHdlZW5Eb2N0eXBlUHVibGljQW5kU3lzdGVtSWRlbnRpZmllcnNcIl0gPSBcIm1pc3Npbmctd2hpdGVzcGFjZS1iZXR3ZWVuLWRvY3R5cGUtcHVibGljLWFuZC1zeXN0ZW0taWRlbnRpZmllcnNcIjtcbiAgICBFUlJbXCJtaXNzaW5nV2hpdGVzcGFjZUFmdGVyRG9jdHlwZVN5c3RlbUtleXdvcmRcIl0gPSBcIm1pc3Npbmctd2hpdGVzcGFjZS1hZnRlci1kb2N0eXBlLXN5c3RlbS1rZXl3b3JkXCI7XG4gICAgRVJSW1wibWlzc2luZ1F1b3RlQmVmb3JlRG9jdHlwZVB1YmxpY0lkZW50aWZpZXJcIl0gPSBcIm1pc3NpbmctcXVvdGUtYmVmb3JlLWRvY3R5cGUtcHVibGljLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJtaXNzaW5nUXVvdGVCZWZvcmVEb2N0eXBlU3lzdGVtSWRlbnRpZmllclwiXSA9IFwibWlzc2luZy1xdW90ZS1iZWZvcmUtZG9jdHlwZS1zeXN0ZW0taWRlbnRpZmllclwiO1xuICAgIEVSUltcIm1pc3NpbmdEb2N0eXBlUHVibGljSWRlbnRpZmllclwiXSA9IFwibWlzc2luZy1kb2N0eXBlLXB1YmxpYy1pZGVudGlmaWVyXCI7XG4gICAgRVJSW1wibWlzc2luZ0RvY3R5cGVTeXN0ZW1JZGVudGlmaWVyXCJdID0gXCJtaXNzaW5nLWRvY3R5cGUtc3lzdGVtLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJhYnJ1cHREb2N0eXBlUHVibGljSWRlbnRpZmllclwiXSA9IFwiYWJydXB0LWRvY3R5cGUtcHVibGljLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJhYnJ1cHREb2N0eXBlU3lzdGVtSWRlbnRpZmllclwiXSA9IFwiYWJydXB0LWRvY3R5cGUtc3lzdGVtLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJjZGF0YUluSHRtbENvbnRlbnRcIl0gPSBcImNkYXRhLWluLWh0bWwtY29udGVudFwiO1xuICAgIEVSUltcImluY29ycmVjdGx5T3BlbmVkQ29tbWVudFwiXSA9IFwiaW5jb3JyZWN0bHktb3BlbmVkLWNvbW1lbnRcIjtcbiAgICBFUlJbXCJlb2ZJblNjcmlwdEh0bWxDb21tZW50TGlrZVRleHRcIl0gPSBcImVvZi1pbi1zY3JpcHQtaHRtbC1jb21tZW50LWxpa2UtdGV4dFwiO1xuICAgIEVSUltcImVvZkluRG9jdHlwZVwiXSA9IFwiZW9mLWluLWRvY3R5cGVcIjtcbiAgICBFUlJbXCJuZXN0ZWRDb21tZW50XCJdID0gXCJuZXN0ZWQtY29tbWVudFwiO1xuICAgIEVSUltcImFicnVwdENsb3NpbmdPZkVtcHR5Q29tbWVudFwiXSA9IFwiYWJydXB0LWNsb3Npbmctb2YtZW1wdHktY29tbWVudFwiO1xuICAgIEVSUltcImVvZkluQ29tbWVudFwiXSA9IFwiZW9mLWluLWNvbW1lbnRcIjtcbiAgICBFUlJbXCJpbmNvcnJlY3RseUNsb3NlZENvbW1lbnRcIl0gPSBcImluY29ycmVjdGx5LWNsb3NlZC1jb21tZW50XCI7XG4gICAgRVJSW1wiZW9mSW5DZGF0YVwiXSA9IFwiZW9mLWluLWNkYXRhXCI7XG4gICAgRVJSW1wiYWJzZW5jZU9mRGlnaXRzSW5OdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlXCJdID0gXCJhYnNlbmNlLW9mLWRpZ2l0cy1pbi1udW1lcmljLWNoYXJhY3Rlci1yZWZlcmVuY2VcIjtcbiAgICBFUlJbXCJudWxsQ2hhcmFjdGVyUmVmZXJlbmNlXCJdID0gXCJudWxsLWNoYXJhY3Rlci1yZWZlcmVuY2VcIjtcbiAgICBFUlJbXCJzdXJyb2dhdGVDaGFyYWN0ZXJSZWZlcmVuY2VcIl0gPSBcInN1cnJvZ2F0ZS1jaGFyYWN0ZXItcmVmZXJlbmNlXCI7XG4gICAgRVJSW1wiY2hhcmFjdGVyUmVmZXJlbmNlT3V0c2lkZVVuaWNvZGVSYW5nZVwiXSA9IFwiY2hhcmFjdGVyLXJlZmVyZW5jZS1vdXRzaWRlLXVuaWNvZGUtcmFuZ2VcIjtcbiAgICBFUlJbXCJjb250cm9sQ2hhcmFjdGVyUmVmZXJlbmNlXCJdID0gXCJjb250cm9sLWNoYXJhY3Rlci1yZWZlcmVuY2VcIjtcbiAgICBFUlJbXCJub25jaGFyYWN0ZXJDaGFyYWN0ZXJSZWZlcmVuY2VcIl0gPSBcIm5vbmNoYXJhY3Rlci1jaGFyYWN0ZXItcmVmZXJlbmNlXCI7XG4gICAgRVJSW1wibWlzc2luZ1doaXRlc3BhY2VCZWZvcmVEb2N0eXBlTmFtZVwiXSA9IFwibWlzc2luZy13aGl0ZXNwYWNlLWJlZm9yZS1kb2N0eXBlLW5hbWVcIjtcbiAgICBFUlJbXCJtaXNzaW5nRG9jdHlwZU5hbWVcIl0gPSBcIm1pc3NpbmctZG9jdHlwZS1uYW1lXCI7XG4gICAgRVJSW1wiaW52YWxpZENoYXJhY3RlclNlcXVlbmNlQWZ0ZXJEb2N0eXBlTmFtZVwiXSA9IFwiaW52YWxpZC1jaGFyYWN0ZXItc2VxdWVuY2UtYWZ0ZXItZG9jdHlwZS1uYW1lXCI7XG4gICAgRVJSW1wiZHVwbGljYXRlQXR0cmlidXRlXCJdID0gXCJkdXBsaWNhdGUtYXR0cmlidXRlXCI7XG4gICAgRVJSW1wibm9uQ29uZm9ybWluZ0RvY3R5cGVcIl0gPSBcIm5vbi1jb25mb3JtaW5nLWRvY3R5cGVcIjtcbiAgICBFUlJbXCJtaXNzaW5nRG9jdHlwZVwiXSA9IFwibWlzc2luZy1kb2N0eXBlXCI7XG4gICAgRVJSW1wibWlzcGxhY2VkRG9jdHlwZVwiXSA9IFwibWlzcGxhY2VkLWRvY3R5cGVcIjtcbiAgICBFUlJbXCJlbmRUYWdXaXRob3V0TWF0Y2hpbmdPcGVuRWxlbWVudFwiXSA9IFwiZW5kLXRhZy13aXRob3V0LW1hdGNoaW5nLW9wZW4tZWxlbWVudFwiO1xuICAgIEVSUltcImNsb3NpbmdPZkVsZW1lbnRXaXRoT3BlbkNoaWxkRWxlbWVudHNcIl0gPSBcImNsb3Npbmctb2YtZWxlbWVudC13aXRoLW9wZW4tY2hpbGQtZWxlbWVudHNcIjtcbiAgICBFUlJbXCJkaXNhbGxvd2VkQ29udGVudEluTm9zY3JpcHRJbkhlYWRcIl0gPSBcImRpc2FsbG93ZWQtY29udGVudC1pbi1ub3NjcmlwdC1pbi1oZWFkXCI7XG4gICAgRVJSW1wib3BlbkVsZW1lbnRzTGVmdEFmdGVyRW9mXCJdID0gXCJvcGVuLWVsZW1lbnRzLWxlZnQtYWZ0ZXItZW9mXCI7XG4gICAgRVJSW1wiYWJhbmRvbmVkSGVhZEVsZW1lbnRDaGlsZFwiXSA9IFwiYWJhbmRvbmVkLWhlYWQtZWxlbWVudC1jaGlsZFwiO1xuICAgIEVSUltcIm1pc3BsYWNlZFN0YXJ0VGFnRm9ySGVhZEVsZW1lbnRcIl0gPSBcIm1pc3BsYWNlZC1zdGFydC10YWctZm9yLWhlYWQtZWxlbWVudFwiO1xuICAgIEVSUltcIm5lc3RlZE5vc2NyaXB0SW5IZWFkXCJdID0gXCJuZXN0ZWQtbm9zY3JpcHQtaW4taGVhZFwiO1xuICAgIEVSUltcImVvZkluRWxlbWVudFRoYXRDYW5Db250YWluT25seVRleHRcIl0gPSBcImVvZi1pbi1lbGVtZW50LXRoYXQtY2FuLWNvbnRhaW4tb25seS10ZXh0XCI7XG59KShFUlIgPSBleHBvcnRzLkVSUiB8fCAoZXhwb3J0cy5FUlIgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3ItY29kZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRVJSIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/common/error-codes.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/common/foreign-content.js":
/*!****************************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/common/foreign-content.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isIntegrationPoint = exports.adjustTokenSVGTagName = exports.adjustTokenXMLAttrs = exports.adjustTokenSVGAttrs = exports.adjustTokenMathMLAttrs = exports.causesExit = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = void 0;\nconst html_js_1 = __webpack_require__(/*! ./html.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js\");\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: \"text/html\",\n    APPLICATION_XML: \"application/xhtml+xml\"\n};\n//Attributes\nconst DEFINITION_URL_ATTR = \"definitionurl\";\nconst ADJUSTED_DEFINITION_URL_ATTR = \"definitionURL\";\nconst SVG_ATTRS_ADJUSTMENT_MAP = new Map([\n    \"attributeName\",\n    \"attributeType\",\n    \"baseFrequency\",\n    \"baseProfile\",\n    \"calcMode\",\n    \"clipPathUnits\",\n    \"diffuseConstant\",\n    \"edgeMode\",\n    \"filterUnits\",\n    \"glyphRef\",\n    \"gradientTransform\",\n    \"gradientUnits\",\n    \"kernelMatrix\",\n    \"kernelUnitLength\",\n    \"keyPoints\",\n    \"keySplines\",\n    \"keyTimes\",\n    \"lengthAdjust\",\n    \"limitingConeAngle\",\n    \"markerHeight\",\n    \"markerUnits\",\n    \"markerWidth\",\n    \"maskContentUnits\",\n    \"maskUnits\",\n    \"numOctaves\",\n    \"pathLength\",\n    \"patternContentUnits\",\n    \"patternTransform\",\n    \"patternUnits\",\n    \"pointsAtX\",\n    \"pointsAtY\",\n    \"pointsAtZ\",\n    \"preserveAlpha\",\n    \"preserveAspectRatio\",\n    \"primitiveUnits\",\n    \"refX\",\n    \"refY\",\n    \"repeatCount\",\n    \"repeatDur\",\n    \"requiredExtensions\",\n    \"requiredFeatures\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"spreadMethod\",\n    \"startOffset\",\n    \"stdDeviation\",\n    \"stitchTiles\",\n    \"surfaceScale\",\n    \"systemLanguage\",\n    \"tableValues\",\n    \"targetX\",\n    \"targetY\",\n    \"textLength\",\n    \"viewBox\",\n    \"viewTarget\",\n    \"xChannelSelector\",\n    \"yChannelSelector\",\n    \"zoomAndPan\"\n].map((attr)=>[\n        attr.toLowerCase(),\n        attr\n    ]));\nconst XML_ATTRS_ADJUSTMENT_MAP = new Map([\n    [\n        \"xlink:actuate\",\n        {\n            prefix: \"xlink\",\n            name: \"actuate\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:arcrole\",\n        {\n            prefix: \"xlink\",\n            name: \"arcrole\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:href\",\n        {\n            prefix: \"xlink\",\n            name: \"href\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:role\",\n        {\n            prefix: \"xlink\",\n            name: \"role\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:show\",\n        {\n            prefix: \"xlink\",\n            name: \"show\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:title\",\n        {\n            prefix: \"xlink\",\n            name: \"title\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xlink:type\",\n        {\n            prefix: \"xlink\",\n            name: \"type\",\n            namespace: html_js_1.NS.XLINK\n        }\n    ],\n    [\n        \"xml:base\",\n        {\n            prefix: \"xml\",\n            name: \"base\",\n            namespace: html_js_1.NS.XML\n        }\n    ],\n    [\n        \"xml:lang\",\n        {\n            prefix: \"xml\",\n            name: \"lang\",\n            namespace: html_js_1.NS.XML\n        }\n    ],\n    [\n        \"xml:space\",\n        {\n            prefix: \"xml\",\n            name: \"space\",\n            namespace: html_js_1.NS.XML\n        }\n    ],\n    [\n        \"xmlns\",\n        {\n            prefix: \"\",\n            name: \"xmlns\",\n            namespace: html_js_1.NS.XMLNS\n        }\n    ],\n    [\n        \"xmlns:xlink\",\n        {\n            prefix: \"xmlns\",\n            name: \"xlink\",\n            namespace: html_js_1.NS.XMLNS\n        }\n    ]\n]);\n//SVG tag names adjustment map\nexports.SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([\n    \"altGlyph\",\n    \"altGlyphDef\",\n    \"altGlyphItem\",\n    \"animateColor\",\n    \"animateMotion\",\n    \"animateTransform\",\n    \"clipPath\",\n    \"feBlend\",\n    \"feColorMatrix\",\n    \"feComponentTransfer\",\n    \"feComposite\",\n    \"feConvolveMatrix\",\n    \"feDiffuseLighting\",\n    \"feDisplacementMap\",\n    \"feDistantLight\",\n    \"feFlood\",\n    \"feFuncA\",\n    \"feFuncB\",\n    \"feFuncG\",\n    \"feFuncR\",\n    \"feGaussianBlur\",\n    \"feImage\",\n    \"feMerge\",\n    \"feMergeNode\",\n    \"feMorphology\",\n    \"feOffset\",\n    \"fePointLight\",\n    \"feSpecularLighting\",\n    \"feSpotLight\",\n    \"feTile\",\n    \"feTurbulence\",\n    \"foreignObject\",\n    \"glyphRef\",\n    \"linearGradient\",\n    \"radialGradient\",\n    \"textPath\"\n].map((tn)=>[\n        tn.toLowerCase(),\n        tn\n    ]));\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = new Set([\n    html_js_1.TAG_ID.B,\n    html_js_1.TAG_ID.BIG,\n    html_js_1.TAG_ID.BLOCKQUOTE,\n    html_js_1.TAG_ID.BODY,\n    html_js_1.TAG_ID.BR,\n    html_js_1.TAG_ID.CENTER,\n    html_js_1.TAG_ID.CODE,\n    html_js_1.TAG_ID.DD,\n    html_js_1.TAG_ID.DIV,\n    html_js_1.TAG_ID.DL,\n    html_js_1.TAG_ID.DT,\n    html_js_1.TAG_ID.EM,\n    html_js_1.TAG_ID.EMBED,\n    html_js_1.TAG_ID.H1,\n    html_js_1.TAG_ID.H2,\n    html_js_1.TAG_ID.H3,\n    html_js_1.TAG_ID.H4,\n    html_js_1.TAG_ID.H5,\n    html_js_1.TAG_ID.H6,\n    html_js_1.TAG_ID.HEAD,\n    html_js_1.TAG_ID.HR,\n    html_js_1.TAG_ID.I,\n    html_js_1.TAG_ID.IMG,\n    html_js_1.TAG_ID.LI,\n    html_js_1.TAG_ID.LISTING,\n    html_js_1.TAG_ID.MENU,\n    html_js_1.TAG_ID.META,\n    html_js_1.TAG_ID.NOBR,\n    html_js_1.TAG_ID.OL,\n    html_js_1.TAG_ID.P,\n    html_js_1.TAG_ID.PRE,\n    html_js_1.TAG_ID.RUBY,\n    html_js_1.TAG_ID.S,\n    html_js_1.TAG_ID.SMALL,\n    html_js_1.TAG_ID.SPAN,\n    html_js_1.TAG_ID.STRONG,\n    html_js_1.TAG_ID.STRIKE,\n    html_js_1.TAG_ID.SUB,\n    html_js_1.TAG_ID.SUP,\n    html_js_1.TAG_ID.TABLE,\n    html_js_1.TAG_ID.TT,\n    html_js_1.TAG_ID.U,\n    html_js_1.TAG_ID.UL,\n    html_js_1.TAG_ID.VAR\n]);\n//Check exit from foreign content\nfunction causesExit(startTagToken) {\n    const tn = startTagToken.tagID;\n    const isFontWithAttrs = tn === html_js_1.TAG_ID.FONT && startTagToken.attrs.some((param)=>{\n        let { name } = param;\n        return name === html_js_1.ATTRS.COLOR || name === html_js_1.ATTRS.SIZE || name === html_js_1.ATTRS.FACE;\n    });\n    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);\n}\nexports.causesExit = causesExit;\n//Token adjustments\nfunction adjustTokenMathMLAttrs(token) {\n    for(let i = 0; i < token.attrs.length; i++){\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n}\nexports.adjustTokenMathMLAttrs = adjustTokenMathMLAttrs;\nfunction adjustTokenSVGAttrs(token) {\n    for(let i = 0; i < token.attrs.length; i++){\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n}\nexports.adjustTokenSVGAttrs = adjustTokenSVGAttrs;\nfunction adjustTokenXMLAttrs(token) {\n    for(let i = 0; i < token.attrs.length; i++){\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n}\nexports.adjustTokenXMLAttrs = adjustTokenXMLAttrs;\nfunction adjustTokenSVGTagName(token) {\n    const adjustedTagName = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = (0, html_js_1.getTagID)(token.tagName);\n    }\n}\nexports.adjustTokenSVGTagName = adjustTokenSVGTagName;\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === html_js_1.NS.MATHML && (tn === html_js_1.TAG_ID.MI || tn === html_js_1.TAG_ID.MO || tn === html_js_1.TAG_ID.MN || tn === html_js_1.TAG_ID.MS || tn === html_js_1.TAG_ID.MTEXT);\n}\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === html_js_1.NS.MATHML && tn === html_js_1.TAG_ID.ANNOTATION_XML) {\n        for(let i = 0; i < attrs.length; i++){\n            if (attrs[i].name === html_js_1.ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n    return ns === html_js_1.NS.SVG && (tn === html_js_1.TAG_ID.FOREIGN_OBJECT || tn === html_js_1.TAG_ID.DESC || tn === html_js_1.TAG_ID.TITLE);\n}\nfunction isIntegrationPoint(tn, ns, attrs, foreignNS) {\n    return (!foreignNS || foreignNS === html_js_1.NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs) || (!foreignNS || foreignNS === html_js_1.NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns);\n}\nexports.isIntegrationPoint = isIntegrationPoint; //# sourceMappingURL=foreign-content.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/common/foreign-content.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js":
/*!*****************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/common/html.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hasUnescapedText = exports.isNumberedHeader = exports.SPECIAL_ELEMENTS = exports.getTagID = exports.TAG_ID = exports.TAG_NAMES = exports.DOCUMENT_MODE = exports.ATTRS = exports.NS = void 0;\n/** All valid namespaces in HTML. */ var NS;\n(function(NS) {\n    NS[\"HTML\"] = \"http://www.w3.org/1999/xhtml\";\n    NS[\"MATHML\"] = \"http://www.w3.org/1998/Math/MathML\";\n    NS[\"SVG\"] = \"http://www.w3.org/2000/svg\";\n    NS[\"XLINK\"] = \"http://www.w3.org/1999/xlink\";\n    NS[\"XML\"] = \"http://www.w3.org/XML/1998/namespace\";\n    NS[\"XMLNS\"] = \"http://www.w3.org/2000/xmlns/\";\n})(NS = exports.NS || (exports.NS = {}));\nvar ATTRS;\n(function(ATTRS) {\n    ATTRS[\"TYPE\"] = \"type\";\n    ATTRS[\"ACTION\"] = \"action\";\n    ATTRS[\"ENCODING\"] = \"encoding\";\n    ATTRS[\"PROMPT\"] = \"prompt\";\n    ATTRS[\"NAME\"] = \"name\";\n    ATTRS[\"COLOR\"] = \"color\";\n    ATTRS[\"FACE\"] = \"face\";\n    ATTRS[\"SIZE\"] = \"size\";\n})(ATTRS = exports.ATTRS || (exports.ATTRS = {}));\n/**\n * The mode of the document.\n *\n * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}\n */ var DOCUMENT_MODE;\n(function(DOCUMENT_MODE) {\n    DOCUMENT_MODE[\"NO_QUIRKS\"] = \"no-quirks\";\n    DOCUMENT_MODE[\"QUIRKS\"] = \"quirks\";\n    DOCUMENT_MODE[\"LIMITED_QUIRKS\"] = \"limited-quirks\";\n})(DOCUMENT_MODE = exports.DOCUMENT_MODE || (exports.DOCUMENT_MODE = {}));\nvar TAG_NAMES;\n(function(TAG_NAMES) {\n    TAG_NAMES[\"A\"] = \"a\";\n    TAG_NAMES[\"ADDRESS\"] = \"address\";\n    TAG_NAMES[\"ANNOTATION_XML\"] = \"annotation-xml\";\n    TAG_NAMES[\"APPLET\"] = \"applet\";\n    TAG_NAMES[\"AREA\"] = \"area\";\n    TAG_NAMES[\"ARTICLE\"] = \"article\";\n    TAG_NAMES[\"ASIDE\"] = \"aside\";\n    TAG_NAMES[\"B\"] = \"b\";\n    TAG_NAMES[\"BASE\"] = \"base\";\n    TAG_NAMES[\"BASEFONT\"] = \"basefont\";\n    TAG_NAMES[\"BGSOUND\"] = \"bgsound\";\n    TAG_NAMES[\"BIG\"] = \"big\";\n    TAG_NAMES[\"BLOCKQUOTE\"] = \"blockquote\";\n    TAG_NAMES[\"BODY\"] = \"body\";\n    TAG_NAMES[\"BR\"] = \"br\";\n    TAG_NAMES[\"BUTTON\"] = \"button\";\n    TAG_NAMES[\"CAPTION\"] = \"caption\";\n    TAG_NAMES[\"CENTER\"] = \"center\";\n    TAG_NAMES[\"CODE\"] = \"code\";\n    TAG_NAMES[\"COL\"] = \"col\";\n    TAG_NAMES[\"COLGROUP\"] = \"colgroup\";\n    TAG_NAMES[\"DD\"] = \"dd\";\n    TAG_NAMES[\"DESC\"] = \"desc\";\n    TAG_NAMES[\"DETAILS\"] = \"details\";\n    TAG_NAMES[\"DIALOG\"] = \"dialog\";\n    TAG_NAMES[\"DIR\"] = \"dir\";\n    TAG_NAMES[\"DIV\"] = \"div\";\n    TAG_NAMES[\"DL\"] = \"dl\";\n    TAG_NAMES[\"DT\"] = \"dt\";\n    TAG_NAMES[\"EM\"] = \"em\";\n    TAG_NAMES[\"EMBED\"] = \"embed\";\n    TAG_NAMES[\"FIELDSET\"] = \"fieldset\";\n    TAG_NAMES[\"FIGCAPTION\"] = \"figcaption\";\n    TAG_NAMES[\"FIGURE\"] = \"figure\";\n    TAG_NAMES[\"FONT\"] = \"font\";\n    TAG_NAMES[\"FOOTER\"] = \"footer\";\n    TAG_NAMES[\"FOREIGN_OBJECT\"] = \"foreignObject\";\n    TAG_NAMES[\"FORM\"] = \"form\";\n    TAG_NAMES[\"FRAME\"] = \"frame\";\n    TAG_NAMES[\"FRAMESET\"] = \"frameset\";\n    TAG_NAMES[\"H1\"] = \"h1\";\n    TAG_NAMES[\"H2\"] = \"h2\";\n    TAG_NAMES[\"H3\"] = \"h3\";\n    TAG_NAMES[\"H4\"] = \"h4\";\n    TAG_NAMES[\"H5\"] = \"h5\";\n    TAG_NAMES[\"H6\"] = \"h6\";\n    TAG_NAMES[\"HEAD\"] = \"head\";\n    TAG_NAMES[\"HEADER\"] = \"header\";\n    TAG_NAMES[\"HGROUP\"] = \"hgroup\";\n    TAG_NAMES[\"HR\"] = \"hr\";\n    TAG_NAMES[\"HTML\"] = \"html\";\n    TAG_NAMES[\"I\"] = \"i\";\n    TAG_NAMES[\"IMG\"] = \"img\";\n    TAG_NAMES[\"IMAGE\"] = \"image\";\n    TAG_NAMES[\"INPUT\"] = \"input\";\n    TAG_NAMES[\"IFRAME\"] = \"iframe\";\n    TAG_NAMES[\"KEYGEN\"] = \"keygen\";\n    TAG_NAMES[\"LABEL\"] = \"label\";\n    TAG_NAMES[\"LI\"] = \"li\";\n    TAG_NAMES[\"LINK\"] = \"link\";\n    TAG_NAMES[\"LISTING\"] = \"listing\";\n    TAG_NAMES[\"MAIN\"] = \"main\";\n    TAG_NAMES[\"MALIGNMARK\"] = \"malignmark\";\n    TAG_NAMES[\"MARQUEE\"] = \"marquee\";\n    TAG_NAMES[\"MATH\"] = \"math\";\n    TAG_NAMES[\"MENU\"] = \"menu\";\n    TAG_NAMES[\"META\"] = \"meta\";\n    TAG_NAMES[\"MGLYPH\"] = \"mglyph\";\n    TAG_NAMES[\"MI\"] = \"mi\";\n    TAG_NAMES[\"MO\"] = \"mo\";\n    TAG_NAMES[\"MN\"] = \"mn\";\n    TAG_NAMES[\"MS\"] = \"ms\";\n    TAG_NAMES[\"MTEXT\"] = \"mtext\";\n    TAG_NAMES[\"NAV\"] = \"nav\";\n    TAG_NAMES[\"NOBR\"] = \"nobr\";\n    TAG_NAMES[\"NOFRAMES\"] = \"noframes\";\n    TAG_NAMES[\"NOEMBED\"] = \"noembed\";\n    TAG_NAMES[\"NOSCRIPT\"] = \"noscript\";\n    TAG_NAMES[\"OBJECT\"] = \"object\";\n    TAG_NAMES[\"OL\"] = \"ol\";\n    TAG_NAMES[\"OPTGROUP\"] = \"optgroup\";\n    TAG_NAMES[\"OPTION\"] = \"option\";\n    TAG_NAMES[\"P\"] = \"p\";\n    TAG_NAMES[\"PARAM\"] = \"param\";\n    TAG_NAMES[\"PLAINTEXT\"] = \"plaintext\";\n    TAG_NAMES[\"PRE\"] = \"pre\";\n    TAG_NAMES[\"RB\"] = \"rb\";\n    TAG_NAMES[\"RP\"] = \"rp\";\n    TAG_NAMES[\"RT\"] = \"rt\";\n    TAG_NAMES[\"RTC\"] = \"rtc\";\n    TAG_NAMES[\"RUBY\"] = \"ruby\";\n    TAG_NAMES[\"S\"] = \"s\";\n    TAG_NAMES[\"SCRIPT\"] = \"script\";\n    TAG_NAMES[\"SECTION\"] = \"section\";\n    TAG_NAMES[\"SELECT\"] = \"select\";\n    TAG_NAMES[\"SOURCE\"] = \"source\";\n    TAG_NAMES[\"SMALL\"] = \"small\";\n    TAG_NAMES[\"SPAN\"] = \"span\";\n    TAG_NAMES[\"STRIKE\"] = \"strike\";\n    TAG_NAMES[\"STRONG\"] = \"strong\";\n    TAG_NAMES[\"STYLE\"] = \"style\";\n    TAG_NAMES[\"SUB\"] = \"sub\";\n    TAG_NAMES[\"SUMMARY\"] = \"summary\";\n    TAG_NAMES[\"SUP\"] = \"sup\";\n    TAG_NAMES[\"TABLE\"] = \"table\";\n    TAG_NAMES[\"TBODY\"] = \"tbody\";\n    TAG_NAMES[\"TEMPLATE\"] = \"template\";\n    TAG_NAMES[\"TEXTAREA\"] = \"textarea\";\n    TAG_NAMES[\"TFOOT\"] = \"tfoot\";\n    TAG_NAMES[\"TD\"] = \"td\";\n    TAG_NAMES[\"TH\"] = \"th\";\n    TAG_NAMES[\"THEAD\"] = \"thead\";\n    TAG_NAMES[\"TITLE\"] = \"title\";\n    TAG_NAMES[\"TR\"] = \"tr\";\n    TAG_NAMES[\"TRACK\"] = \"track\";\n    TAG_NAMES[\"TT\"] = \"tt\";\n    TAG_NAMES[\"U\"] = \"u\";\n    TAG_NAMES[\"UL\"] = \"ul\";\n    TAG_NAMES[\"SVG\"] = \"svg\";\n    TAG_NAMES[\"VAR\"] = \"var\";\n    TAG_NAMES[\"WBR\"] = \"wbr\";\n    TAG_NAMES[\"XMP\"] = \"xmp\";\n})(TAG_NAMES = exports.TAG_NAMES || (exports.TAG_NAMES = {}));\n/**\n * Tag IDs are numeric IDs for known tag names.\n *\n * We use tag IDs to improve the performance of tag name comparisons.\n */ var TAG_ID;\n(function(TAG_ID) {\n    TAG_ID[TAG_ID[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TAG_ID[TAG_ID[\"A\"] = 1] = \"A\";\n    TAG_ID[TAG_ID[\"ADDRESS\"] = 2] = \"ADDRESS\";\n    TAG_ID[TAG_ID[\"ANNOTATION_XML\"] = 3] = \"ANNOTATION_XML\";\n    TAG_ID[TAG_ID[\"APPLET\"] = 4] = \"APPLET\";\n    TAG_ID[TAG_ID[\"AREA\"] = 5] = \"AREA\";\n    TAG_ID[TAG_ID[\"ARTICLE\"] = 6] = \"ARTICLE\";\n    TAG_ID[TAG_ID[\"ASIDE\"] = 7] = \"ASIDE\";\n    TAG_ID[TAG_ID[\"B\"] = 8] = \"B\";\n    TAG_ID[TAG_ID[\"BASE\"] = 9] = \"BASE\";\n    TAG_ID[TAG_ID[\"BASEFONT\"] = 10] = \"BASEFONT\";\n    TAG_ID[TAG_ID[\"BGSOUND\"] = 11] = \"BGSOUND\";\n    TAG_ID[TAG_ID[\"BIG\"] = 12] = \"BIG\";\n    TAG_ID[TAG_ID[\"BLOCKQUOTE\"] = 13] = \"BLOCKQUOTE\";\n    TAG_ID[TAG_ID[\"BODY\"] = 14] = \"BODY\";\n    TAG_ID[TAG_ID[\"BR\"] = 15] = \"BR\";\n    TAG_ID[TAG_ID[\"BUTTON\"] = 16] = \"BUTTON\";\n    TAG_ID[TAG_ID[\"CAPTION\"] = 17] = \"CAPTION\";\n    TAG_ID[TAG_ID[\"CENTER\"] = 18] = \"CENTER\";\n    TAG_ID[TAG_ID[\"CODE\"] = 19] = \"CODE\";\n    TAG_ID[TAG_ID[\"COL\"] = 20] = \"COL\";\n    TAG_ID[TAG_ID[\"COLGROUP\"] = 21] = \"COLGROUP\";\n    TAG_ID[TAG_ID[\"DD\"] = 22] = \"DD\";\n    TAG_ID[TAG_ID[\"DESC\"] = 23] = \"DESC\";\n    TAG_ID[TAG_ID[\"DETAILS\"] = 24] = \"DETAILS\";\n    TAG_ID[TAG_ID[\"DIALOG\"] = 25] = \"DIALOG\";\n    TAG_ID[TAG_ID[\"DIR\"] = 26] = \"DIR\";\n    TAG_ID[TAG_ID[\"DIV\"] = 27] = \"DIV\";\n    TAG_ID[TAG_ID[\"DL\"] = 28] = \"DL\";\n    TAG_ID[TAG_ID[\"DT\"] = 29] = \"DT\";\n    TAG_ID[TAG_ID[\"EM\"] = 30] = \"EM\";\n    TAG_ID[TAG_ID[\"EMBED\"] = 31] = \"EMBED\";\n    TAG_ID[TAG_ID[\"FIELDSET\"] = 32] = \"FIELDSET\";\n    TAG_ID[TAG_ID[\"FIGCAPTION\"] = 33] = \"FIGCAPTION\";\n    TAG_ID[TAG_ID[\"FIGURE\"] = 34] = \"FIGURE\";\n    TAG_ID[TAG_ID[\"FONT\"] = 35] = \"FONT\";\n    TAG_ID[TAG_ID[\"FOOTER\"] = 36] = \"FOOTER\";\n    TAG_ID[TAG_ID[\"FOREIGN_OBJECT\"] = 37] = \"FOREIGN_OBJECT\";\n    TAG_ID[TAG_ID[\"FORM\"] = 38] = \"FORM\";\n    TAG_ID[TAG_ID[\"FRAME\"] = 39] = \"FRAME\";\n    TAG_ID[TAG_ID[\"FRAMESET\"] = 40] = \"FRAMESET\";\n    TAG_ID[TAG_ID[\"H1\"] = 41] = \"H1\";\n    TAG_ID[TAG_ID[\"H2\"] = 42] = \"H2\";\n    TAG_ID[TAG_ID[\"H3\"] = 43] = \"H3\";\n    TAG_ID[TAG_ID[\"H4\"] = 44] = \"H4\";\n    TAG_ID[TAG_ID[\"H5\"] = 45] = \"H5\";\n    TAG_ID[TAG_ID[\"H6\"] = 46] = \"H6\";\n    TAG_ID[TAG_ID[\"HEAD\"] = 47] = \"HEAD\";\n    TAG_ID[TAG_ID[\"HEADER\"] = 48] = \"HEADER\";\n    TAG_ID[TAG_ID[\"HGROUP\"] = 49] = \"HGROUP\";\n    TAG_ID[TAG_ID[\"HR\"] = 50] = \"HR\";\n    TAG_ID[TAG_ID[\"HTML\"] = 51] = \"HTML\";\n    TAG_ID[TAG_ID[\"I\"] = 52] = \"I\";\n    TAG_ID[TAG_ID[\"IMG\"] = 53] = \"IMG\";\n    TAG_ID[TAG_ID[\"IMAGE\"] = 54] = \"IMAGE\";\n    TAG_ID[TAG_ID[\"INPUT\"] = 55] = \"INPUT\";\n    TAG_ID[TAG_ID[\"IFRAME\"] = 56] = \"IFRAME\";\n    TAG_ID[TAG_ID[\"KEYGEN\"] = 57] = \"KEYGEN\";\n    TAG_ID[TAG_ID[\"LABEL\"] = 58] = \"LABEL\";\n    TAG_ID[TAG_ID[\"LI\"] = 59] = \"LI\";\n    TAG_ID[TAG_ID[\"LINK\"] = 60] = \"LINK\";\n    TAG_ID[TAG_ID[\"LISTING\"] = 61] = \"LISTING\";\n    TAG_ID[TAG_ID[\"MAIN\"] = 62] = \"MAIN\";\n    TAG_ID[TAG_ID[\"MALIGNMARK\"] = 63] = \"MALIGNMARK\";\n    TAG_ID[TAG_ID[\"MARQUEE\"] = 64] = \"MARQUEE\";\n    TAG_ID[TAG_ID[\"MATH\"] = 65] = \"MATH\";\n    TAG_ID[TAG_ID[\"MENU\"] = 66] = \"MENU\";\n    TAG_ID[TAG_ID[\"META\"] = 67] = \"META\";\n    TAG_ID[TAG_ID[\"MGLYPH\"] = 68] = \"MGLYPH\";\n    TAG_ID[TAG_ID[\"MI\"] = 69] = \"MI\";\n    TAG_ID[TAG_ID[\"MO\"] = 70] = \"MO\";\n    TAG_ID[TAG_ID[\"MN\"] = 71] = \"MN\";\n    TAG_ID[TAG_ID[\"MS\"] = 72] = \"MS\";\n    TAG_ID[TAG_ID[\"MTEXT\"] = 73] = \"MTEXT\";\n    TAG_ID[TAG_ID[\"NAV\"] = 74] = \"NAV\";\n    TAG_ID[TAG_ID[\"NOBR\"] = 75] = \"NOBR\";\n    TAG_ID[TAG_ID[\"NOFRAMES\"] = 76] = \"NOFRAMES\";\n    TAG_ID[TAG_ID[\"NOEMBED\"] = 77] = \"NOEMBED\";\n    TAG_ID[TAG_ID[\"NOSCRIPT\"] = 78] = \"NOSCRIPT\";\n    TAG_ID[TAG_ID[\"OBJECT\"] = 79] = \"OBJECT\";\n    TAG_ID[TAG_ID[\"OL\"] = 80] = \"OL\";\n    TAG_ID[TAG_ID[\"OPTGROUP\"] = 81] = \"OPTGROUP\";\n    TAG_ID[TAG_ID[\"OPTION\"] = 82] = \"OPTION\";\n    TAG_ID[TAG_ID[\"P\"] = 83] = \"P\";\n    TAG_ID[TAG_ID[\"PARAM\"] = 84] = \"PARAM\";\n    TAG_ID[TAG_ID[\"PLAINTEXT\"] = 85] = \"PLAINTEXT\";\n    TAG_ID[TAG_ID[\"PRE\"] = 86] = \"PRE\";\n    TAG_ID[TAG_ID[\"RB\"] = 87] = \"RB\";\n    TAG_ID[TAG_ID[\"RP\"] = 88] = \"RP\";\n    TAG_ID[TAG_ID[\"RT\"] = 89] = \"RT\";\n    TAG_ID[TAG_ID[\"RTC\"] = 90] = \"RTC\";\n    TAG_ID[TAG_ID[\"RUBY\"] = 91] = \"RUBY\";\n    TAG_ID[TAG_ID[\"S\"] = 92] = \"S\";\n    TAG_ID[TAG_ID[\"SCRIPT\"] = 93] = \"SCRIPT\";\n    TAG_ID[TAG_ID[\"SECTION\"] = 94] = \"SECTION\";\n    TAG_ID[TAG_ID[\"SELECT\"] = 95] = \"SELECT\";\n    TAG_ID[TAG_ID[\"SOURCE\"] = 96] = \"SOURCE\";\n    TAG_ID[TAG_ID[\"SMALL\"] = 97] = \"SMALL\";\n    TAG_ID[TAG_ID[\"SPAN\"] = 98] = \"SPAN\";\n    TAG_ID[TAG_ID[\"STRIKE\"] = 99] = \"STRIKE\";\n    TAG_ID[TAG_ID[\"STRONG\"] = 100] = \"STRONG\";\n    TAG_ID[TAG_ID[\"STYLE\"] = 101] = \"STYLE\";\n    TAG_ID[TAG_ID[\"SUB\"] = 102] = \"SUB\";\n    TAG_ID[TAG_ID[\"SUMMARY\"] = 103] = \"SUMMARY\";\n    TAG_ID[TAG_ID[\"SUP\"] = 104] = \"SUP\";\n    TAG_ID[TAG_ID[\"TABLE\"] = 105] = \"TABLE\";\n    TAG_ID[TAG_ID[\"TBODY\"] = 106] = \"TBODY\";\n    TAG_ID[TAG_ID[\"TEMPLATE\"] = 107] = \"TEMPLATE\";\n    TAG_ID[TAG_ID[\"TEXTAREA\"] = 108] = \"TEXTAREA\";\n    TAG_ID[TAG_ID[\"TFOOT\"] = 109] = \"TFOOT\";\n    TAG_ID[TAG_ID[\"TD\"] = 110] = \"TD\";\n    TAG_ID[TAG_ID[\"TH\"] = 111] = \"TH\";\n    TAG_ID[TAG_ID[\"THEAD\"] = 112] = \"THEAD\";\n    TAG_ID[TAG_ID[\"TITLE\"] = 113] = \"TITLE\";\n    TAG_ID[TAG_ID[\"TR\"] = 114] = \"TR\";\n    TAG_ID[TAG_ID[\"TRACK\"] = 115] = \"TRACK\";\n    TAG_ID[TAG_ID[\"TT\"] = 116] = \"TT\";\n    TAG_ID[TAG_ID[\"U\"] = 117] = \"U\";\n    TAG_ID[TAG_ID[\"UL\"] = 118] = \"UL\";\n    TAG_ID[TAG_ID[\"SVG\"] = 119] = \"SVG\";\n    TAG_ID[TAG_ID[\"VAR\"] = 120] = \"VAR\";\n    TAG_ID[TAG_ID[\"WBR\"] = 121] = \"WBR\";\n    TAG_ID[TAG_ID[\"XMP\"] = 122] = \"XMP\";\n})(TAG_ID = exports.TAG_ID || (exports.TAG_ID = {}));\nconst TAG_NAME_TO_ID = new Map([\n    [\n        TAG_NAMES.A,\n        TAG_ID.A\n    ],\n    [\n        TAG_NAMES.ADDRESS,\n        TAG_ID.ADDRESS\n    ],\n    [\n        TAG_NAMES.ANNOTATION_XML,\n        TAG_ID.ANNOTATION_XML\n    ],\n    [\n        TAG_NAMES.APPLET,\n        TAG_ID.APPLET\n    ],\n    [\n        TAG_NAMES.AREA,\n        TAG_ID.AREA\n    ],\n    [\n        TAG_NAMES.ARTICLE,\n        TAG_ID.ARTICLE\n    ],\n    [\n        TAG_NAMES.ASIDE,\n        TAG_ID.ASIDE\n    ],\n    [\n        TAG_NAMES.B,\n        TAG_ID.B\n    ],\n    [\n        TAG_NAMES.BASE,\n        TAG_ID.BASE\n    ],\n    [\n        TAG_NAMES.BASEFONT,\n        TAG_ID.BASEFONT\n    ],\n    [\n        TAG_NAMES.BGSOUND,\n        TAG_ID.BGSOUND\n    ],\n    [\n        TAG_NAMES.BIG,\n        TAG_ID.BIG\n    ],\n    [\n        TAG_NAMES.BLOCKQUOTE,\n        TAG_ID.BLOCKQUOTE\n    ],\n    [\n        TAG_NAMES.BODY,\n        TAG_ID.BODY\n    ],\n    [\n        TAG_NAMES.BR,\n        TAG_ID.BR\n    ],\n    [\n        TAG_NAMES.BUTTON,\n        TAG_ID.BUTTON\n    ],\n    [\n        TAG_NAMES.CAPTION,\n        TAG_ID.CAPTION\n    ],\n    [\n        TAG_NAMES.CENTER,\n        TAG_ID.CENTER\n    ],\n    [\n        TAG_NAMES.CODE,\n        TAG_ID.CODE\n    ],\n    [\n        TAG_NAMES.COL,\n        TAG_ID.COL\n    ],\n    [\n        TAG_NAMES.COLGROUP,\n        TAG_ID.COLGROUP\n    ],\n    [\n        TAG_NAMES.DD,\n        TAG_ID.DD\n    ],\n    [\n        TAG_NAMES.DESC,\n        TAG_ID.DESC\n    ],\n    [\n        TAG_NAMES.DETAILS,\n        TAG_ID.DETAILS\n    ],\n    [\n        TAG_NAMES.DIALOG,\n        TAG_ID.DIALOG\n    ],\n    [\n        TAG_NAMES.DIR,\n        TAG_ID.DIR\n    ],\n    [\n        TAG_NAMES.DIV,\n        TAG_ID.DIV\n    ],\n    [\n        TAG_NAMES.DL,\n        TAG_ID.DL\n    ],\n    [\n        TAG_NAMES.DT,\n        TAG_ID.DT\n    ],\n    [\n        TAG_NAMES.EM,\n        TAG_ID.EM\n    ],\n    [\n        TAG_NAMES.EMBED,\n        TAG_ID.EMBED\n    ],\n    [\n        TAG_NAMES.FIELDSET,\n        TAG_ID.FIELDSET\n    ],\n    [\n        TAG_NAMES.FIGCAPTION,\n        TAG_ID.FIGCAPTION\n    ],\n    [\n        TAG_NAMES.FIGURE,\n        TAG_ID.FIGURE\n    ],\n    [\n        TAG_NAMES.FONT,\n        TAG_ID.FONT\n    ],\n    [\n        TAG_NAMES.FOOTER,\n        TAG_ID.FOOTER\n    ],\n    [\n        TAG_NAMES.FOREIGN_OBJECT,\n        TAG_ID.FOREIGN_OBJECT\n    ],\n    [\n        TAG_NAMES.FORM,\n        TAG_ID.FORM\n    ],\n    [\n        TAG_NAMES.FRAME,\n        TAG_ID.FRAME\n    ],\n    [\n        TAG_NAMES.FRAMESET,\n        TAG_ID.FRAMESET\n    ],\n    [\n        TAG_NAMES.H1,\n        TAG_ID.H1\n    ],\n    [\n        TAG_NAMES.H2,\n        TAG_ID.H2\n    ],\n    [\n        TAG_NAMES.H3,\n        TAG_ID.H3\n    ],\n    [\n        TAG_NAMES.H4,\n        TAG_ID.H4\n    ],\n    [\n        TAG_NAMES.H5,\n        TAG_ID.H5\n    ],\n    [\n        TAG_NAMES.H6,\n        TAG_ID.H6\n    ],\n    [\n        TAG_NAMES.HEAD,\n        TAG_ID.HEAD\n    ],\n    [\n        TAG_NAMES.HEADER,\n        TAG_ID.HEADER\n    ],\n    [\n        TAG_NAMES.HGROUP,\n        TAG_ID.HGROUP\n    ],\n    [\n        TAG_NAMES.HR,\n        TAG_ID.HR\n    ],\n    [\n        TAG_NAMES.HTML,\n        TAG_ID.HTML\n    ],\n    [\n        TAG_NAMES.I,\n        TAG_ID.I\n    ],\n    [\n        TAG_NAMES.IMG,\n        TAG_ID.IMG\n    ],\n    [\n        TAG_NAMES.IMAGE,\n        TAG_ID.IMAGE\n    ],\n    [\n        TAG_NAMES.INPUT,\n        TAG_ID.INPUT\n    ],\n    [\n        TAG_NAMES.IFRAME,\n        TAG_ID.IFRAME\n    ],\n    [\n        TAG_NAMES.KEYGEN,\n        TAG_ID.KEYGEN\n    ],\n    [\n        TAG_NAMES.LABEL,\n        TAG_ID.LABEL\n    ],\n    [\n        TAG_NAMES.LI,\n        TAG_ID.LI\n    ],\n    [\n        TAG_NAMES.LINK,\n        TAG_ID.LINK\n    ],\n    [\n        TAG_NAMES.LISTING,\n        TAG_ID.LISTING\n    ],\n    [\n        TAG_NAMES.MAIN,\n        TAG_ID.MAIN\n    ],\n    [\n        TAG_NAMES.MALIGNMARK,\n        TAG_ID.MALIGNMARK\n    ],\n    [\n        TAG_NAMES.MARQUEE,\n        TAG_ID.MARQUEE\n    ],\n    [\n        TAG_NAMES.MATH,\n        TAG_ID.MATH\n    ],\n    [\n        TAG_NAMES.MENU,\n        TAG_ID.MENU\n    ],\n    [\n        TAG_NAMES.META,\n        TAG_ID.META\n    ],\n    [\n        TAG_NAMES.MGLYPH,\n        TAG_ID.MGLYPH\n    ],\n    [\n        TAG_NAMES.MI,\n        TAG_ID.MI\n    ],\n    [\n        TAG_NAMES.MO,\n        TAG_ID.MO\n    ],\n    [\n        TAG_NAMES.MN,\n        TAG_ID.MN\n    ],\n    [\n        TAG_NAMES.MS,\n        TAG_ID.MS\n    ],\n    [\n        TAG_NAMES.MTEXT,\n        TAG_ID.MTEXT\n    ],\n    [\n        TAG_NAMES.NAV,\n        TAG_ID.NAV\n    ],\n    [\n        TAG_NAMES.NOBR,\n        TAG_ID.NOBR\n    ],\n    [\n        TAG_NAMES.NOFRAMES,\n        TAG_ID.NOFRAMES\n    ],\n    [\n        TAG_NAMES.NOEMBED,\n        TAG_ID.NOEMBED\n    ],\n    [\n        TAG_NAMES.NOSCRIPT,\n        TAG_ID.NOSCRIPT\n    ],\n    [\n        TAG_NAMES.OBJECT,\n        TAG_ID.OBJECT\n    ],\n    [\n        TAG_NAMES.OL,\n        TAG_ID.OL\n    ],\n    [\n        TAG_NAMES.OPTGROUP,\n        TAG_ID.OPTGROUP\n    ],\n    [\n        TAG_NAMES.OPTION,\n        TAG_ID.OPTION\n    ],\n    [\n        TAG_NAMES.P,\n        TAG_ID.P\n    ],\n    [\n        TAG_NAMES.PARAM,\n        TAG_ID.PARAM\n    ],\n    [\n        TAG_NAMES.PLAINTEXT,\n        TAG_ID.PLAINTEXT\n    ],\n    [\n        TAG_NAMES.PRE,\n        TAG_ID.PRE\n    ],\n    [\n        TAG_NAMES.RB,\n        TAG_ID.RB\n    ],\n    [\n        TAG_NAMES.RP,\n        TAG_ID.RP\n    ],\n    [\n        TAG_NAMES.RT,\n        TAG_ID.RT\n    ],\n    [\n        TAG_NAMES.RTC,\n        TAG_ID.RTC\n    ],\n    [\n        TAG_NAMES.RUBY,\n        TAG_ID.RUBY\n    ],\n    [\n        TAG_NAMES.S,\n        TAG_ID.S\n    ],\n    [\n        TAG_NAMES.SCRIPT,\n        TAG_ID.SCRIPT\n    ],\n    [\n        TAG_NAMES.SECTION,\n        TAG_ID.SECTION\n    ],\n    [\n        TAG_NAMES.SELECT,\n        TAG_ID.SELECT\n    ],\n    [\n        TAG_NAMES.SOURCE,\n        TAG_ID.SOURCE\n    ],\n    [\n        TAG_NAMES.SMALL,\n        TAG_ID.SMALL\n    ],\n    [\n        TAG_NAMES.SPAN,\n        TAG_ID.SPAN\n    ],\n    [\n        TAG_NAMES.STRIKE,\n        TAG_ID.STRIKE\n    ],\n    [\n        TAG_NAMES.STRONG,\n        TAG_ID.STRONG\n    ],\n    [\n        TAG_NAMES.STYLE,\n        TAG_ID.STYLE\n    ],\n    [\n        TAG_NAMES.SUB,\n        TAG_ID.SUB\n    ],\n    [\n        TAG_NAMES.SUMMARY,\n        TAG_ID.SUMMARY\n    ],\n    [\n        TAG_NAMES.SUP,\n        TAG_ID.SUP\n    ],\n    [\n        TAG_NAMES.TABLE,\n        TAG_ID.TABLE\n    ],\n    [\n        TAG_NAMES.TBODY,\n        TAG_ID.TBODY\n    ],\n    [\n        TAG_NAMES.TEMPLATE,\n        TAG_ID.TEMPLATE\n    ],\n    [\n        TAG_NAMES.TEXTAREA,\n        TAG_ID.TEXTAREA\n    ],\n    [\n        TAG_NAMES.TFOOT,\n        TAG_ID.TFOOT\n    ],\n    [\n        TAG_NAMES.TD,\n        TAG_ID.TD\n    ],\n    [\n        TAG_NAMES.TH,\n        TAG_ID.TH\n    ],\n    [\n        TAG_NAMES.THEAD,\n        TAG_ID.THEAD\n    ],\n    [\n        TAG_NAMES.TITLE,\n        TAG_ID.TITLE\n    ],\n    [\n        TAG_NAMES.TR,\n        TAG_ID.TR\n    ],\n    [\n        TAG_NAMES.TRACK,\n        TAG_ID.TRACK\n    ],\n    [\n        TAG_NAMES.TT,\n        TAG_ID.TT\n    ],\n    [\n        TAG_NAMES.U,\n        TAG_ID.U\n    ],\n    [\n        TAG_NAMES.UL,\n        TAG_ID.UL\n    ],\n    [\n        TAG_NAMES.SVG,\n        TAG_ID.SVG\n    ],\n    [\n        TAG_NAMES.VAR,\n        TAG_ID.VAR\n    ],\n    [\n        TAG_NAMES.WBR,\n        TAG_ID.WBR\n    ],\n    [\n        TAG_NAMES.XMP,\n        TAG_ID.XMP\n    ]\n]);\nfunction getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nexports.getTagID = getTagID;\nconst $ = TAG_ID;\nexports.SPECIAL_ELEMENTS = {\n    [NS.HTML]: new Set([\n        $.ADDRESS,\n        $.APPLET,\n        $.AREA,\n        $.ARTICLE,\n        $.ASIDE,\n        $.BASE,\n        $.BASEFONT,\n        $.BGSOUND,\n        $.BLOCKQUOTE,\n        $.BODY,\n        $.BR,\n        $.BUTTON,\n        $.CAPTION,\n        $.CENTER,\n        $.COL,\n        $.COLGROUP,\n        $.DD,\n        $.DETAILS,\n        $.DIR,\n        $.DIV,\n        $.DL,\n        $.DT,\n        $.EMBED,\n        $.FIELDSET,\n        $.FIGCAPTION,\n        $.FIGURE,\n        $.FOOTER,\n        $.FORM,\n        $.FRAME,\n        $.FRAMESET,\n        $.H1,\n        $.H2,\n        $.H3,\n        $.H4,\n        $.H5,\n        $.H6,\n        $.HEAD,\n        $.HEADER,\n        $.HGROUP,\n        $.HR,\n        $.HTML,\n        $.IFRAME,\n        $.IMG,\n        $.INPUT,\n        $.LI,\n        $.LINK,\n        $.LISTING,\n        $.MAIN,\n        $.MARQUEE,\n        $.MENU,\n        $.META,\n        $.NAV,\n        $.NOEMBED,\n        $.NOFRAMES,\n        $.NOSCRIPT,\n        $.OBJECT,\n        $.OL,\n        $.P,\n        $.PARAM,\n        $.PLAINTEXT,\n        $.PRE,\n        $.SCRIPT,\n        $.SECTION,\n        $.SELECT,\n        $.SOURCE,\n        $.STYLE,\n        $.SUMMARY,\n        $.TABLE,\n        $.TBODY,\n        $.TD,\n        $.TEMPLATE,\n        $.TEXTAREA,\n        $.TFOOT,\n        $.TH,\n        $.THEAD,\n        $.TITLE,\n        $.TR,\n        $.TRACK,\n        $.UL,\n        $.WBR,\n        $.XMP\n    ]),\n    [NS.MATHML]: new Set([\n        $.MI,\n        $.MO,\n        $.MN,\n        $.MS,\n        $.MTEXT,\n        $.ANNOTATION_XML\n    ]),\n    [NS.SVG]: new Set([\n        $.TITLE,\n        $.FOREIGN_OBJECT,\n        $.DESC\n    ]),\n    [NS.XLINK]: new Set(),\n    [NS.XML]: new Set(),\n    [NS.XMLNS]: new Set()\n};\nfunction isNumberedHeader(tn) {\n    return tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6;\n}\nexports.isNumberedHeader = isNumberedHeader;\nconst UNESCAPED_TEXT = new Set([\n    TAG_NAMES.STYLE,\n    TAG_NAMES.SCRIPT,\n    TAG_NAMES.XMP,\n    TAG_NAMES.IFRAME,\n    TAG_NAMES.NOEMBED,\n    TAG_NAMES.NOFRAMES,\n    TAG_NAMES.PLAINTEXT\n]);\nfunction hasUnescapedText(tn, scriptingEnabled) {\n    return UNESCAPED_TEXT.has(tn) || scriptingEnabled && tn === TAG_NAMES.NOSCRIPT;\n}\nexports.hasUnescapedText = hasUnescapedText; //# sourceMappingURL=html.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/common/token.js":
/*!******************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/common/token.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getTokenAttr = exports.TokenType = void 0;\nvar TokenType;\n(function(TokenType) {\n    TokenType[TokenType[\"CHARACTER\"] = 0] = \"CHARACTER\";\n    TokenType[TokenType[\"NULL_CHARACTER\"] = 1] = \"NULL_CHARACTER\";\n    TokenType[TokenType[\"WHITESPACE_CHARACTER\"] = 2] = \"WHITESPACE_CHARACTER\";\n    TokenType[TokenType[\"START_TAG\"] = 3] = \"START_TAG\";\n    TokenType[TokenType[\"END_TAG\"] = 4] = \"END_TAG\";\n    TokenType[TokenType[\"COMMENT\"] = 5] = \"COMMENT\";\n    TokenType[TokenType[\"DOCTYPE\"] = 6] = \"DOCTYPE\";\n    TokenType[TokenType[\"EOF\"] = 7] = \"EOF\";\n    TokenType[TokenType[\"HIBERNATION\"] = 8] = \"HIBERNATION\";\n})(TokenType = exports.TokenType || (exports.TokenType = {}));\nfunction getTokenAttr(token, attrName) {\n    for(let i = token.attrs.length - 1; i >= 0; i--){\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n    return null;\n}\nexports.getTokenAttr = getTokenAttr; //# sourceMappingURL=token.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvY29tbW9uL3Rva2VuLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBR0EsaUJBQWlCLEdBQUcsS0FBSztBQUNoRCxJQUFJRztBQUNILFVBQVVBLFNBQVM7SUFDaEJBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7SUFDeENBLFNBQVMsQ0FBQ0EsU0FBUyxDQUFDLGlCQUFpQixHQUFHLEVBQUUsR0FBRztJQUM3Q0EsU0FBUyxDQUFDQSxTQUFTLENBQUMsdUJBQXVCLEdBQUcsRUFBRSxHQUFHO0lBQ25EQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxZQUFZLEdBQUcsRUFBRSxHQUFHO0lBQ3hDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQ3RDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQ3RDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxVQUFVLEdBQUcsRUFBRSxHQUFHO0lBQ3RDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHO0lBQ2xDQSxTQUFTLENBQUNBLFNBQVMsQ0FBQyxjQUFjLEdBQUcsRUFBRSxHQUFHO0FBQzlDLEdBQUdBLFlBQVlILFFBQVFHLFNBQVMsSUFBS0gsQ0FBQUEsaUJBQWlCLEdBQUcsQ0FBQztBQUMxRCxTQUFTRSxhQUFhRSxLQUFLLEVBQUVDLFFBQVE7SUFDakMsSUFBSyxJQUFJQyxJQUFJRixNQUFNRyxLQUFLLENBQUNDLE1BQU0sR0FBRyxHQUFHRixLQUFLLEdBQUdBLElBQUs7UUFDOUMsSUFBSUYsTUFBTUcsS0FBSyxDQUFDRCxFQUFFLENBQUNHLElBQUksS0FBS0osVUFBVTtZQUNsQyxPQUFPRCxNQUFNRyxLQUFLLENBQUNELEVBQUUsQ0FBQ0wsS0FBSztRQUMvQjtJQUNKO0lBQ0EsT0FBTztBQUNYO0FBQ0FELG9CQUFvQixHQUFHRSxjQUN2QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy9jb21tb24vdG9rZW4uanM/NDZjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VG9rZW5BdHRyID0gZXhwb3J0cy5Ub2tlblR5cGUgPSB2b2lkIDA7XG52YXIgVG9rZW5UeXBlO1xuKGZ1bmN0aW9uIChUb2tlblR5cGUpIHtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiQ0hBUkFDVEVSXCJdID0gMF0gPSBcIkNIQVJBQ1RFUlwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJOVUxMX0NIQVJBQ1RFUlwiXSA9IDFdID0gXCJOVUxMX0NIQVJBQ1RFUlwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJXSElURVNQQUNFX0NIQVJBQ1RFUlwiXSA9IDJdID0gXCJXSElURVNQQUNFX0NIQVJBQ1RFUlwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJTVEFSVF9UQUdcIl0gPSAzXSA9IFwiU1RBUlRfVEFHXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIkVORF9UQUdcIl0gPSA0XSA9IFwiRU5EX1RBR1wiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJDT01NRU5UXCJdID0gNV0gPSBcIkNPTU1FTlRcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiRE9DVFlQRVwiXSA9IDZdID0gXCJET0NUWVBFXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIkVPRlwiXSA9IDddID0gXCJFT0ZcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiSElCRVJOQVRJT05cIl0gPSA4XSA9IFwiSElCRVJOQVRJT05cIjtcbn0pKFRva2VuVHlwZSA9IGV4cG9ydHMuVG9rZW5UeXBlIHx8IChleHBvcnRzLlRva2VuVHlwZSA9IHt9KSk7XG5mdW5jdGlvbiBnZXRUb2tlbkF0dHIodG9rZW4sIGF0dHJOYW1lKSB7XG4gICAgZm9yIChsZXQgaSA9IHRva2VuLmF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGlmICh0b2tlbi5hdHRyc1tpXS5uYW1lID09PSBhdHRyTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuLmF0dHJzW2ldLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5nZXRUb2tlbkF0dHIgPSBnZXRUb2tlbkF0dHI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b2tlbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRUb2tlbkF0dHIiLCJUb2tlblR5cGUiLCJ0b2tlbiIsImF0dHJOYW1lIiwiaSIsImF0dHJzIiwibGVuZ3RoIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/common/token.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/common/unicode.js":
/*!********************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/common/unicode.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isUndefinedCodePoint = exports.isControlCodePoint = exports.getSurrogatePairCodePoint = exports.isSurrogatePair = exports.isSurrogate = exports.SEQUENCES = exports.CODE_POINTS = exports.REPLACEMENT_CHARACTER = void 0;\nconst UNDEFINED_CODE_POINTS = new Set([\n    65534,\n    65535,\n    131070,\n    131071,\n    196606,\n    196607,\n    262142,\n    262143,\n    327678,\n    327679,\n    393214,\n    393215,\n    458750,\n    458751,\n    524286,\n    524287,\n    589822,\n    589823,\n    655358,\n    655359,\n    720894,\n    720895,\n    786430,\n    786431,\n    851966,\n    851967,\n    917502,\n    917503,\n    983038,\n    983039,\n    1048574,\n    1048575,\n    1114110,\n    1114111\n]);\nexports.REPLACEMENT_CHARACTER = \"�\";\nvar CODE_POINTS;\n(function(CODE_POINTS) {\n    CODE_POINTS[CODE_POINTS[\"EOF\"] = -1] = \"EOF\";\n    CODE_POINTS[CODE_POINTS[\"NULL\"] = 0] = \"NULL\";\n    CODE_POINTS[CODE_POINTS[\"TABULATION\"] = 9] = \"TABULATION\";\n    CODE_POINTS[CODE_POINTS[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\n    CODE_POINTS[CODE_POINTS[\"LINE_FEED\"] = 10] = \"LINE_FEED\";\n    CODE_POINTS[CODE_POINTS[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\n    CODE_POINTS[CODE_POINTS[\"SPACE\"] = 32] = \"SPACE\";\n    CODE_POINTS[CODE_POINTS[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"NUMBER_SIGN\"] = 35] = \"NUMBER_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    CODE_POINTS[CODE_POINTS[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    CODE_POINTS[CODE_POINTS[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    CODE_POINTS[CODE_POINTS[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    CODE_POINTS[CODE_POINTS[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    CODE_POINTS[CODE_POINTS[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_A\"] = 65] = \"LATIN_CAPITAL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_F\"] = 70] = \"LATIN_CAPITAL_F\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_X\"] = 88] = \"LATIN_CAPITAL_X\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_Z\"] = 90] = \"LATIN_CAPITAL_Z\";\n    CODE_POINTS[CODE_POINTS[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    CODE_POINTS[CODE_POINTS[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_A\"] = 97] = \"LATIN_SMALL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_F\"] = 102] = \"LATIN_SMALL_F\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_X\"] = 120] = \"LATIN_SMALL_X\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_Z\"] = 122] = \"LATIN_SMALL_Z\";\n    CODE_POINTS[CODE_POINTS[\"REPLACEMENT_CHARACTER\"] = 65533] = \"REPLACEMENT_CHARACTER\";\n})(CODE_POINTS = exports.CODE_POINTS || (exports.CODE_POINTS = {}));\nexports.SEQUENCES = {\n    DASH_DASH: \"--\",\n    CDATA_START: \"[CDATA[\",\n    DOCTYPE: \"doctype\",\n    SCRIPT: \"script\",\n    PUBLIC: \"public\",\n    SYSTEM: \"system\"\n};\n//Surrogates\nfunction isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nexports.isSurrogate = isSurrogate;\nfunction isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nexports.isSurrogatePair = isSurrogatePair;\nfunction getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n}\nexports.getSurrogatePairCodePoint = getSurrogatePairCodePoint;\n//NOTE: excluding NULL and ASCII whitespace\nfunction isControlCodePoint(cp) {\n    return cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f || cp >= 0x7f && cp <= 0x9f;\n}\nexports.isControlCodePoint = isControlCodePoint;\nfunction isUndefinedCodePoint(cp) {\n    return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.has(cp);\n}\nexports.isUndefinedCodePoint = isUndefinedCodePoint; //# sourceMappingURL=unicode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/common/unicode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/index.js":
/*!***********************************************!*\
  !*** ./node_modules/parse5/dist/cjs/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseFragment = exports.parse = exports.TokenizerMode = exports.Tokenizer = exports.Token = exports.html = exports.foreignContent = exports.ErrorCodes = exports.serializeOuter = exports.serialize = exports.Parser = exports.defaultTreeAdapter = void 0;\nconst index_js_1 = __webpack_require__(/*! ./parser/index.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/index.js\");\nvar default_js_1 = __webpack_require__(/*! ./tree-adapters/default.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/tree-adapters/default.js\");\nObject.defineProperty(exports, \"defaultTreeAdapter\", ({\n    enumerable: true,\n    get: function() {\n        return default_js_1.defaultTreeAdapter;\n    }\n}));\nvar index_js_2 = __webpack_require__(/*! ./parser/index.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/index.js\");\nObject.defineProperty(exports, \"Parser\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_2.Parser;\n    }\n}));\nvar index_js_3 = __webpack_require__(/*! ./serializer/index.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/serializer/index.js\");\nObject.defineProperty(exports, \"serialize\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.serialize;\n    }\n}));\nObject.defineProperty(exports, \"serializeOuter\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_3.serializeOuter;\n    }\n}));\nvar error_codes_js_1 = __webpack_require__(/*! ./common/error-codes.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/error-codes.js\");\nObject.defineProperty(exports, \"ErrorCodes\", ({\n    enumerable: true,\n    get: function() {\n        return error_codes_js_1.ERR;\n    }\n}));\n/** @internal */ exports.foreignContent = __webpack_require__(/*! ./common/foreign-content.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/foreign-content.js\");\n/** @internal */ exports.html = __webpack_require__(/*! ./common/html.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js\");\n/** @internal */ exports.Token = __webpack_require__(/*! ./common/token.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/token.js\");\n/** @internal */ var index_js_4 = __webpack_require__(/*! ./tokenizer/index.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/tokenizer/index.js\");\nObject.defineProperty(exports, \"Tokenizer\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.Tokenizer;\n    }\n}));\nObject.defineProperty(exports, \"TokenizerMode\", ({\n    enumerable: true,\n    get: function() {\n        return index_js_4.TokenizerMode;\n    }\n}));\n// Shorthands\n/**\n * Parses an HTML string.\n *\n * @param html Input HTML string.\n * @param options Parsing options.\n * @returns Document\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * console.log(document.childNodes[1].tagName); //> 'html'\n *```\n */ function parse(html, options) {\n    return index_js_1.Parser.parse(html, options);\n}\nexports.parse = parse;\nfunction parseFragment(fragmentContext, html, options) {\n    if (typeof fragmentContext === \"string\") {\n        options = html;\n        html = fragmentContext;\n        fragmentContext = null;\n    }\n    const parser = index_js_1.Parser.getFragmentParser(fragmentContext, options);\n    parser.tokenizer.write(html, true);\n    return parser.getFragment();\n}\nexports.parseFragment = parseFragment; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHQSxhQUFhLEdBQUdBLHFCQUFxQixHQUFHQSxpQkFBaUIsR0FBR0EsYUFBYSxHQUFHQSxZQUFZLEdBQUdBLHNCQUFzQixHQUFHQSxrQkFBa0IsR0FBR0Esc0JBQXNCLEdBQUdBLGlCQUFpQixHQUFHQSxjQUFjLEdBQUdBLDBCQUEwQixHQUFHLEtBQUs7QUFDalEsTUFBTWMsYUFBYUMsbUJBQU9BLENBQUMsNkZBQW1CO0FBQzlDLElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLCtHQUE0QjtBQUN2RGpCLHNEQUFxRDtJQUFFbUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYUgsa0JBQWtCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEksSUFBSU0sYUFBYUosbUJBQU9BLENBQUMsNkZBQW1CO0FBQzVDakIsMENBQXlDO0lBQUVtQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPQyxXQUFXUCxNQUFNO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDOUcsSUFBSVEsYUFBYUwsbUJBQU9BLENBQUMscUdBQXVCO0FBQ2hEakIsNkNBQTRDO0lBQUVtQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxXQUFXVCxTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEhiLGtEQUFpRDtJQUFFbUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0UsV0FBV1YsY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQzlILElBQUlXLG1CQUFtQk4sbUJBQU9BLENBQUMseUdBQXlCO0FBQ3hEakIsOENBQTZDO0lBQUVtQixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxpQkFBaUJDLEdBQUc7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySCxjQUFjLEdBQ2R0QiwrSkFBK0Q7QUFDL0QsY0FBYyxHQUNkQSwrSEFBMEM7QUFDMUMsY0FBYyxHQUNkQSxrSUFBNEM7QUFDNUMsY0FBYyxHQUNkLElBQUl1QixhQUFhUixtQkFBT0EsQ0FBQyxtR0FBc0I7QUFDL0NqQiw2Q0FBNEM7SUFBRW1CLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9LLFdBQVdsQixTQUFTO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEhQLGlEQUFnRDtJQUFFbUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ssV0FBV25CLGFBQWE7SUFBRTtBQUFFLENBQUMsRUFBQztBQUM1SCxhQUFhO0FBQ2I7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDRCxTQUFTRCxNQUFNSSxJQUFJLEVBQUVpQixPQUFPO0lBQ3hCLE9BQU9WLFdBQVdGLE1BQU0sQ0FBQ1QsS0FBSyxDQUFDSSxNQUFNaUI7QUFDekM7QUFDQXhCLGFBQWEsR0FBR0c7QUFDaEIsU0FBU0QsY0FBY3VCLGVBQWUsRUFBRWxCLElBQUksRUFBRWlCLE9BQU87SUFDakQsSUFBSSxPQUFPQyxvQkFBb0IsVUFBVTtRQUNyQ0QsVUFBVWpCO1FBQ1ZBLE9BQU9rQjtRQUNQQSxrQkFBa0I7SUFDdEI7SUFDQSxNQUFNQyxTQUFTWixXQUFXRixNQUFNLENBQUNlLGlCQUFpQixDQUFDRixpQkFBaUJEO0lBQ3BFRSxPQUFPRSxTQUFTLENBQUNDLEtBQUssQ0FBQ3RCLE1BQU07SUFDN0IsT0FBT21CLE9BQU9JLFdBQVc7QUFDN0I7QUFDQTlCLHFCQUFxQixHQUFHRSxlQUN4QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy9pbmRleC5qcz8wMTQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUZyYWdtZW50ID0gZXhwb3J0cy5wYXJzZSA9IGV4cG9ydHMuVG9rZW5pemVyTW9kZSA9IGV4cG9ydHMuVG9rZW5pemVyID0gZXhwb3J0cy5Ub2tlbiA9IGV4cG9ydHMuaHRtbCA9IGV4cG9ydHMuZm9yZWlnbkNvbnRlbnQgPSBleHBvcnRzLkVycm9yQ29kZXMgPSBleHBvcnRzLnNlcmlhbGl6ZU91dGVyID0gZXhwb3J0cy5zZXJpYWxpemUgPSBleHBvcnRzLlBhcnNlciA9IGV4cG9ydHMuZGVmYXVsdFRyZWVBZGFwdGVyID0gdm9pZCAwO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuL3BhcnNlci9pbmRleC5qc1wiKTtcbnZhciBkZWZhdWx0X2pzXzEgPSByZXF1aXJlKFwiLi90cmVlLWFkYXB0ZXJzL2RlZmF1bHQuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0VHJlZUFkYXB0ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlZmF1bHRfanNfMS5kZWZhdWx0VHJlZUFkYXB0ZXI7IH0gfSk7XG52YXIgaW5kZXhfanNfMiA9IHJlcXVpcmUoXCIuL3BhcnNlci9pbmRleC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlBhcnNlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5kZXhfanNfMi5QYXJzZXI7IH0gfSk7XG52YXIgaW5kZXhfanNfMyA9IHJlcXVpcmUoXCIuL3NlcmlhbGl6ZXIvaW5kZXguanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXJpYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluZGV4X2pzXzMuc2VyaWFsaXplOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2VyaWFsaXplT3V0ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluZGV4X2pzXzMuc2VyaWFsaXplT3V0ZXI7IH0gfSk7XG52YXIgZXJyb3JfY29kZXNfanNfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9lcnJvci1jb2Rlcy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVycm9yQ29kZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yX2NvZGVzX2pzXzEuRVJSOyB9IH0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5mb3JlaWduQ29udGVudCA9IHJlcXVpcmUoXCIuL2NvbW1vbi9mb3JlaWduLWNvbnRlbnQuanNcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLmh0bWwgPSByZXF1aXJlKFwiLi9jb21tb24vaHRtbC5qc1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuVG9rZW4gPSByZXF1aXJlKFwiLi9jb21tb24vdG9rZW4uanNcIik7XG4vKiogQGludGVybmFsICovXG52YXIgaW5kZXhfanNfNCA9IHJlcXVpcmUoXCIuL3Rva2VuaXplci9pbmRleC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRva2VuaXplclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5kZXhfanNfNC5Ub2tlbml6ZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb2tlbml6ZXJNb2RlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc180LlRva2VuaXplck1vZGU7IH0gfSk7XG4vLyBTaG9ydGhhbmRzXG4vKipcbiAqIFBhcnNlcyBhbiBIVE1MIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gaHRtbCBJbnB1dCBIVE1MIHN0cmluZy5cbiAqIEBwYXJhbSBvcHRpb25zIFBhcnNpbmcgb3B0aW9ucy5cbiAqIEByZXR1cm5zIERvY3VtZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGFyc2U1ID0gcmVxdWlyZSgncGFyc2U1Jyk7XG4gKlxuICogY29uc3QgZG9jdW1lbnQgPSBwYXJzZTUucGFyc2UoJzwhRE9DVFlQRSBodG1sPjxodG1sPjxoZWFkPjwvaGVhZD48Ym9keT5IaSB0aGVyZSE8L2JvZHk+PC9odG1sPicpO1xuICpcbiAqIGNvbnNvbGUubG9nKGRvY3VtZW50LmNoaWxkTm9kZXNbMV0udGFnTmFtZSk7IC8vPiAnaHRtbCdcbiAqYGBgXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKGh0bWwsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaW5kZXhfanNfMS5QYXJzZXIucGFyc2UoaHRtbCwgb3B0aW9ucyk7XG59XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5mdW5jdGlvbiBwYXJzZUZyYWdtZW50KGZyYWdtZW50Q29udGV4dCwgaHRtbCwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2YgZnJhZ21lbnRDb250ZXh0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBvcHRpb25zID0gaHRtbDtcbiAgICAgICAgaHRtbCA9IGZyYWdtZW50Q29udGV4dDtcbiAgICAgICAgZnJhZ21lbnRDb250ZXh0ID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcGFyc2VyID0gaW5kZXhfanNfMS5QYXJzZXIuZ2V0RnJhZ21lbnRQYXJzZXIoZnJhZ21lbnRDb250ZXh0LCBvcHRpb25zKTtcbiAgICBwYXJzZXIudG9rZW5pemVyLndyaXRlKGh0bWwsIHRydWUpO1xuICAgIHJldHVybiBwYXJzZXIuZ2V0RnJhZ21lbnQoKTtcbn1cbmV4cG9ydHMucGFyc2VGcmFnbWVudCA9IHBhcnNlRnJhZ21lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZUZyYWdtZW50IiwicGFyc2UiLCJUb2tlbml6ZXJNb2RlIiwiVG9rZW5pemVyIiwiVG9rZW4iLCJodG1sIiwiZm9yZWlnbkNvbnRlbnQiLCJFcnJvckNvZGVzIiwic2VyaWFsaXplT3V0ZXIiLCJzZXJpYWxpemUiLCJQYXJzZXIiLCJkZWZhdWx0VHJlZUFkYXB0ZXIiLCJpbmRleF9qc18xIiwicmVxdWlyZSIsImRlZmF1bHRfanNfMSIsImVudW1lcmFibGUiLCJnZXQiLCJpbmRleF9qc18yIiwiaW5kZXhfanNfMyIsImVycm9yX2NvZGVzX2pzXzEiLCJFUlIiLCJpbmRleF9qc180Iiwib3B0aW9ucyIsImZyYWdtZW50Q29udGV4dCIsInBhcnNlciIsImdldEZyYWdtZW50UGFyc2VyIiwidG9rZW5pemVyIiwid3JpdGUiLCJnZXRGcmFnbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/formatting-element-list.js":
/*!************************************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/parser/formatting-element-list.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FormattingElementList = exports.EntryType = void 0;\n//Const\nconst NOAH_ARK_CAPACITY = 3;\nvar EntryType;\n(function(EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType = exports.EntryType || (exports.EntryType = {}));\nconst MARKER = {\n    type: EntryType.Marker\n};\n//List of formatting elements\nclass FormattingElementList {\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for(let i = 0; i < this.entries.length; i++){\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({\n                        idx: i,\n                        attrs: elementAttrs\n                    });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY) return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY) return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr)=>[\n                neAttr.name,\n                neAttr.value\n            ]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for(let i = 0; i < candidates.length; i++){\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr)=>neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex >= 0) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */ clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx >= 0) {\n            this.entries.splice(0, markerIdx + 1);\n        } else {\n            this.entries.length = 0;\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry)=>entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry)=>entry.type === EntryType.Element && entry.element === element);\n    }\n    constructor(treeAdapter){\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n}\nexports.FormattingElementList = FormattingElementList; //# sourceMappingURL=formatting-element-list.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/formatting-element-list.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/index.js":
/*!******************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/parser/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Parser = void 0;\nconst index_js_1 = __webpack_require__(/*! ../tokenizer/index.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/tokenizer/index.js\");\nconst open_element_stack_js_1 = __webpack_require__(/*! ./open-element-stack.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/open-element-stack.js\");\nconst formatting_element_list_js_1 = __webpack_require__(/*! ./formatting-element-list.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/formatting-element-list.js\");\nconst default_js_1 = __webpack_require__(/*! ../tree-adapters/default.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/tree-adapters/default.js\");\nconst doctype = __webpack_require__(/*! ../common/doctype.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/doctype.js\");\nconst foreignContent = __webpack_require__(/*! ../common/foreign-content.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/foreign-content.js\");\nconst error_codes_js_1 = __webpack_require__(/*! ../common/error-codes.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/error-codes.js\");\nconst unicode = __webpack_require__(/*! ../common/unicode.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/unicode.js\");\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js\");\nconst token_js_1 = __webpack_require__(/*! ../common/token.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/token.js\");\n//Misc constants\nconst HIDDEN_INPUT_TYPE = \"hidden\";\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function(InsertionMode) {\n    InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n    InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n    InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n    InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n    InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n    InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n    InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n    InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n    InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n    InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n    InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n    InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n    InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n    InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n    InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n    InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n    startLine: -1,\n    startCol: -1,\n    startOffset: -1,\n    endLine: -1,\n    endCol: -1,\n    endOffset: -1\n};\nconst TABLE_STRUCTURE_TAGS = new Set([\n    html_js_1.TAG_ID.TABLE,\n    html_js_1.TAG_ID.TBODY,\n    html_js_1.TAG_ID.TFOOT,\n    html_js_1.TAG_ID.THEAD,\n    html_js_1.TAG_ID.TR\n]);\nconst defaultParserOptions = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    treeAdapter: default_js_1.defaultTreeAdapter,\n    onParseError: null\n};\n//Parser\nclass Parser {\n    // API\n    static parse(html, options) {\n        const parser = new this(options);\n        parser.tokenizer.write(html, true);\n        return parser.document;\n    }\n    static getFragmentParser(fragmentContext, options) {\n        const opts = Object.assign(Object.assign({}, defaultParserOptions), options);\n        //NOTE: use a <template> element as the fragment context if no context element was provided,\n        //so we will parse in a \"forgiving\" manner\n        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : fragmentContext = opts.treeAdapter.createElement(html_js_1.TAG_NAMES.TEMPLATE, html_js_1.NS.HTML, []);\n        //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n        //This is important for jsdom, where a new `document` cannot be created. This led to\n        //fragment parsing messing with the main `document`.\n        const documentMock = opts.treeAdapter.createElement(\"documentmock\", html_js_1.NS.HTML, []);\n        const parser = new this(opts, documentMock, fragmentContext);\n        if (parser.fragmentContextID === html_js_1.TAG_ID.TEMPLATE) {\n            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        }\n        parser._initTokenizerForFragmentParsing();\n        parser._insertFakeRootElement();\n        parser._resetInsertionMode();\n        parser._findFormInFragmentContext();\n        return parser;\n    }\n    getFragment() {\n        const rootElement = this.treeAdapter.getFirstChild(this.document);\n        const fragment = this.treeAdapter.createDocumentFragment();\n        this._adoptNodes(rootElement, fragment);\n        return fragment;\n    }\n    //Errors\n    _err(token, code, beforeToken) {\n        var _a;\n        if (!this.onParseError) return;\n        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n        const err = {\n            code,\n            startLine: loc.startLine,\n            startCol: loc.startCol,\n            startOffset: loc.startOffset,\n            endLine: beforeToken ? loc.startLine : loc.endLine,\n            endCol: beforeToken ? loc.startCol : loc.endCol,\n            endOffset: beforeToken ? loc.startOffset : loc.endOffset\n        };\n        this.onParseError(err);\n    }\n    //Stack events\n    onItemPush(node, tid, isTop) {\n        var _a, _b;\n        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n        if (isTop && this.openElements.stackTop > 0) this._setContextModes(node, tid);\n    }\n    onItemPop(node, isTop) {\n        var _a, _b;\n        if (this.options.sourceCodeLocationInfo) {\n            this._setEndLocation(node, this.currentToken);\n        }\n        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n        if (isTop) {\n            let current;\n            let currentTagId;\n            if (this.openElements.stackTop === 0 && this.fragmentContext) {\n                current = this.fragmentContext;\n                currentTagId = this.fragmentContextID;\n            } else {\n                ({ current, currentTagId } = this.openElements);\n            }\n            this._setContextModes(current, currentTagId);\n        }\n    }\n    _setContextModes(current, tid) {\n        const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === html_js_1.NS.HTML;\n        this.currentNotInHTML = !isHTML;\n        this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);\n    }\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, html_js_1.NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = InsertionMode.TEXT;\n    }\n    switchToPlaintextParsing() {\n        this.insertionMode = InsertionMode.TEXT;\n        this.originalInsertionMode = InsertionMode.IN_BODY;\n        this.tokenizer.state = index_js_1.TokenizerMode.PLAINTEXT;\n    }\n    //Fragment parsing\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;\n    }\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while(node){\n            if (this.treeAdapter.getTagName(node) === html_js_1.TAG_NAMES.FORM) {\n                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== html_js_1.NS.HTML) {\n            return;\n        }\n        switch(this.fragmentContextID){\n            case html_js_1.TAG_ID.TITLE:\n            case html_js_1.TAG_ID.TEXTAREA:\n                {\n                    this.tokenizer.state = index_js_1.TokenizerMode.RCDATA;\n                    break;\n                }\n            case html_js_1.TAG_ID.STYLE:\n            case html_js_1.TAG_ID.XMP:\n            case html_js_1.TAG_ID.IFRAME:\n            case html_js_1.TAG_ID.NOEMBED:\n            case html_js_1.TAG_ID.NOFRAMES:\n            case html_js_1.TAG_ID.NOSCRIPT:\n                {\n                    this.tokenizer.state = index_js_1.TokenizerMode.RAWTEXT;\n                    break;\n                }\n            case html_js_1.TAG_ID.SCRIPT:\n                {\n                    this.tokenizer.state = index_js_1.TokenizerMode.SCRIPT_DATA;\n                    break;\n                }\n            case html_js_1.TAG_ID.PLAINTEXT:\n                {\n                    this.tokenizer.state = index_js_1.TokenizerMode.PLAINTEXT;\n                    break;\n                }\n            default:\n        }\n    }\n    //Tree mutation\n    _setDocumentType(token) {\n        const name = token.name || \"\";\n        const publicId = token.publicId || \"\";\n        const systemId = token.systemId || \"\";\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n        if (token.location) {\n            const documentChildren = this.treeAdapter.getChildNodes(this.document);\n            const docTypeNode = documentChildren.find((node)=>this.treeAdapter.isDocumentTypeNode(node));\n            if (docTypeNode) {\n                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n            }\n        }\n    }\n    _attachElementToTree(element, location) {\n        if (this.options.sourceCodeLocationInfo) {\n            const loc = location && Object.assign(Object.assign({}, location), {\n                startTag: location\n            });\n            this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n        }\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        } else {\n            const parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.appendChild(parent, element);\n        }\n    }\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n    }\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n        this.openElements.push(element, token.tagID);\n    }\n    _insertFakeElement(tagName, tagID) {\n        const element = this.treeAdapter.createElement(tagName, html_js_1.NS.HTML, []);\n        this._attachElementToTree(element, null);\n        this.openElements.push(element, tagID);\n    }\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, html_js_1.NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl, token.location);\n        this.openElements.push(tmpl, token.tagID);\n        if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(content, null);\n    }\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement(html_js_1.TAG_NAMES.HTML, html_js_1.NS.HTML, []);\n        if (this.options.sourceCodeLocationInfo) this.treeAdapter.setNodeSourceCodeLocation(element, null);\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element, html_js_1.TAG_ID.HTML);\n    }\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n        this.treeAdapter.appendChild(parent, commentNode);\n        if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        }\n    }\n    _insertCharacters(token) {\n        let parent;\n        let beforeElement;\n        if (this._shouldFosterParentOnInsertion()) {\n            ({ parent, beforeElement } = this._findFosterParentingLocation());\n            if (beforeElement) {\n                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n            } else {\n                this.treeAdapter.insertText(parent, token.chars);\n            }\n        } else {\n            parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n        if (!token.location) return;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n        const textNode = siblings[textNodeIdx - 1];\n        //NOTE: if we have a location assigned by another token, then just update the end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n            const { endLine, endCol, endOffset } = token.location;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, {\n                endLine,\n                endCol,\n                endOffset\n            });\n        } else if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n    }\n    _adoptNodes(donor, recipient) {\n        for(let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)){\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n    _setEndLocation(element, closingToken) {\n        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n            const ctLoc = closingToken.location;\n            const tn = this.treeAdapter.getTagName(element);\n            const endLoc = // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n            closingToken.type === token_js_1.TokenType.END_TAG && tn === closingToken.tagName ? {\n                endTag: Object.assign({}, ctLoc),\n                endLine: ctLoc.endLine,\n                endCol: ctLoc.endCol,\n                endOffset: ctLoc.endOffset\n            } : {\n                endLine: ctLoc.startLine,\n                endCol: ctLoc.startCol,\n                endOffset: ctLoc.startOffset\n            };\n            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n    }\n    //Token processing\n    shouldProcessStartTagTokenInForeignContent(token) {\n        // Check that neither current === document, or ns === NS.HTML\n        if (!this.currentNotInHTML) return false;\n        let current;\n        let currentTagId;\n        if (this.openElements.stackTop === 0 && this.fragmentContext) {\n            current = this.fragmentContext;\n            currentTagId = this.fragmentContextID;\n        } else {\n            ({ current, currentTagId } = this.openElements);\n        }\n        if (token.tagID === html_js_1.TAG_ID.SVG && this.treeAdapter.getTagName(current) === html_js_1.TAG_NAMES.ANNOTATION_XML && this.treeAdapter.getNamespaceURI(current) === html_js_1.NS.MATHML) {\n            return false;\n        }\n        return(// Check that `current` is not an integration point for HTML or MathML elements.\n        this.tokenizer.inForeignNode || // If it _is_ an integration point, then we might have to check that it is not an HTML\n        // integration point.\n        (token.tagID === html_js_1.TAG_ID.MGLYPH || token.tagID === html_js_1.TAG_ID.MALIGNMARK) && !this._isIntegrationPoint(currentTagId, current, html_js_1.NS.HTML));\n    }\n    _processToken(token) {\n        switch(token.type){\n            case token_js_1.TokenType.CHARACTER:\n                {\n                    this.onCharacter(token);\n                    break;\n                }\n            case token_js_1.TokenType.NULL_CHARACTER:\n                {\n                    this.onNullCharacter(token);\n                    break;\n                }\n            case token_js_1.TokenType.COMMENT:\n                {\n                    this.onComment(token);\n                    break;\n                }\n            case token_js_1.TokenType.DOCTYPE:\n                {\n                    this.onDoctype(token);\n                    break;\n                }\n            case token_js_1.TokenType.START_TAG:\n                {\n                    this._processStartTag(token);\n                    break;\n                }\n            case token_js_1.TokenType.END_TAG:\n                {\n                    this.onEndTag(token);\n                    break;\n                }\n            case token_js_1.TokenType.EOF:\n                {\n                    this.onEof(token);\n                    break;\n                }\n            case token_js_1.TokenType.WHITESPACE_CHARACTER:\n                {\n                    this.onWhitespaceCharacter(token);\n                    break;\n                }\n        }\n    }\n    //Integration points\n    _isIntegrationPoint(tid, element, foreignNS) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n        return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n    }\n    //Active formatting elements reconstruction\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.entries.length;\n        if (listLength) {\n            const endIndex = this.activeFormattingElements.entries.findIndex((entry)=>entry.type === formatting_element_list_js_1.EntryType.Marker || this.openElements.contains(entry.element));\n            const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;\n            for(let i = unopenIdx; i >= 0; i--){\n                const entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n    //Close elements\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = InsertionMode.IN_ROW;\n    }\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion(html_js_1.TAG_ID.P);\n        this.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.P);\n    }\n    //Insertion modes\n    _resetInsertionMode() {\n        for(let i = this.openElements.stackTop; i >= 0; i--){\n            //Insertion mode reset map\n            switch(i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]){\n                case html_js_1.TAG_ID.TR:\n                    {\n                        this.insertionMode = InsertionMode.IN_ROW;\n                        return;\n                    }\n                case html_js_1.TAG_ID.TBODY:\n                case html_js_1.TAG_ID.THEAD:\n                case html_js_1.TAG_ID.TFOOT:\n                    {\n                        this.insertionMode = InsertionMode.IN_TABLE_BODY;\n                        return;\n                    }\n                case html_js_1.TAG_ID.CAPTION:\n                    {\n                        this.insertionMode = InsertionMode.IN_CAPTION;\n                        return;\n                    }\n                case html_js_1.TAG_ID.COLGROUP:\n                    {\n                        this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                        return;\n                    }\n                case html_js_1.TAG_ID.TABLE:\n                    {\n                        this.insertionMode = InsertionMode.IN_TABLE;\n                        return;\n                    }\n                case html_js_1.TAG_ID.BODY:\n                    {\n                        this.insertionMode = InsertionMode.IN_BODY;\n                        return;\n                    }\n                case html_js_1.TAG_ID.FRAMESET:\n                    {\n                        this.insertionMode = InsertionMode.IN_FRAMESET;\n                        return;\n                    }\n                case html_js_1.TAG_ID.SELECT:\n                    {\n                        this._resetInsertionModeForSelect(i);\n                        return;\n                    }\n                case html_js_1.TAG_ID.TEMPLATE:\n                    {\n                        this.insertionMode = this.tmplInsertionModeStack[0];\n                        return;\n                    }\n                case html_js_1.TAG_ID.HTML:\n                    {\n                        this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n                        return;\n                    }\n                case html_js_1.TAG_ID.TD:\n                case html_js_1.TAG_ID.TH:\n                    {\n                        if (i > 0) {\n                            this.insertionMode = InsertionMode.IN_CELL;\n                            return;\n                        }\n                        break;\n                    }\n                case html_js_1.TAG_ID.HEAD:\n                    {\n                        if (i > 0) {\n                            this.insertionMode = InsertionMode.IN_HEAD;\n                            return;\n                        }\n                        break;\n                    }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_BODY;\n    }\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for(let i = selectIdx - 1; i > 0; i--){\n                const tn = this.openElements.tagIDs[i];\n                if (tn === html_js_1.TAG_ID.TEMPLATE) {\n                    break;\n                } else if (tn === html_js_1.TAG_ID.TABLE) {\n                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n                    return;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_SELECT;\n    }\n    //Foster parenting\n    _isElementCausesFosterParenting(tn) {\n        return TABLE_STRUCTURE_TAGS.has(tn);\n    }\n    _shouldFosterParentOnInsertion() {\n        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);\n    }\n    _findFosterParentingLocation() {\n        for(let i = this.openElements.stackTop; i >= 0; i--){\n            const openElement = this.openElements.items[i];\n            switch(this.openElements.tagIDs[i]){\n                case html_js_1.TAG_ID.TEMPLATE:\n                    {\n                        if (this.treeAdapter.getNamespaceURI(openElement) === html_js_1.NS.HTML) {\n                            return {\n                                parent: this.treeAdapter.getTemplateContent(openElement),\n                                beforeElement: null\n                            };\n                        }\n                        break;\n                    }\n                case html_js_1.TAG_ID.TABLE:\n                    {\n                        const parent = this.treeAdapter.getParentNode(openElement);\n                        if (parent) {\n                            return {\n                                parent,\n                                beforeElement: openElement\n                            };\n                        }\n                        return {\n                            parent: this.openElements.items[i - 1],\n                            beforeElement: null\n                        };\n                    }\n                default:\n            }\n        }\n        return {\n            parent: this.openElements.items[0],\n            beforeElement: null\n        };\n    }\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        } else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n    //Special elements\n    _isSpecialElement(element, id) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        return html_js_1.SPECIAL_ELEMENTS[ns].has(id);\n    }\n    onCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            characterInForeignContent(this, token);\n            return;\n        }\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    tokenBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    tokenBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    tokenInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    tokenInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    tokenAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n                {\n                    characterInBody(this, token);\n                    break;\n                }\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n                {\n                    this._insertCharacters(token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n                {\n                    characterInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    characterInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_COLUMN_GROUP:\n                {\n                    tokenInColumnGroup(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    tokenAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n                {\n                    tokenAfterAfterBody(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onNullCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            nullCharacterInForeignContent(this, token);\n            return;\n        }\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    tokenBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    tokenBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    tokenInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    tokenInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    tokenAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.TEXT:\n                {\n                    this._insertCharacters(token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n                {\n                    characterInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_COLUMN_GROUP:\n                {\n                    tokenInColumnGroup(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    tokenAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n                {\n                    tokenAfterAfterBody(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onComment(token) {\n        this.skipNextNewLine = false;\n        if (this.currentNotInHTML) {\n            appendComment(this, token);\n            return;\n        }\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n            case InsertionMode.BEFORE_HTML:\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n                {\n                    appendComment(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    appendCommentToRootHtmlElement(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET:\n                {\n                    appendCommentToDocument(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onDoctype(token) {\n        this.skipNextNewLine = false;\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    doctypeInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n                {\n                    this._err(token, error_codes_js_1.ERR.misplacedDoctype);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onStartTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        this._processStartTag(token);\n        if (token.selfClosing && !token.ackSelfClosing) {\n            this._err(token, error_codes_js_1.ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n    /**\n     * Processes a given start tag.\n     *\n     * `onStartTag` checks if a self-closing tag was recognized. When a token\n     * is moved inbetween multiple insertion modes, this check for self-closing\n     * could lead to false positives. To avoid this, `_processStartTag` is used\n     * for nested calls.\n     *\n     * @param token The token to process.\n     */ _processStartTag(token) {\n        if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n            startTagInForeignContent(this, token);\n        } else {\n            this._startTagOutsideForeignContent(token);\n        }\n    }\n    _startTagOutsideForeignContent(token) {\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    startTagBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    startTagBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    startTagInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    startTagInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    startTagAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n                {\n                    startTagInBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n                {\n                    startTagInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_CAPTION:\n                {\n                    startTagInCaption(this, token);\n                    break;\n                }\n            case InsertionMode.IN_COLUMN_GROUP:\n                {\n                    startTagInColumnGroup(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_BODY:\n                {\n                    startTagInTableBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_ROW:\n                {\n                    startTagInRow(this, token);\n                    break;\n                }\n            case InsertionMode.IN_CELL:\n                {\n                    startTagInCell(this, token);\n                    break;\n                }\n            case InsertionMode.IN_SELECT:\n                {\n                    startTagInSelect(this, token);\n                    break;\n                }\n            case InsertionMode.IN_SELECT_IN_TABLE:\n                {\n                    startTagInSelectInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TEMPLATE:\n                {\n                    startTagInTemplate(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    startTagAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_FRAMESET:\n                {\n                    startTagInFrameset(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_FRAMESET:\n                {\n                    startTagAfterFrameset(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n                {\n                    startTagAfterAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_FRAMESET:\n                {\n                    startTagAfterAfterFrameset(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onEndTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        if (this.currentNotInHTML) {\n            endTagInForeignContent(this, token);\n        } else {\n            this._endTagOutsideForeignContent(token);\n        }\n    }\n    _endTagOutsideForeignContent(token) {\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    endTagBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    endTagBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    endTagInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    endTagInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    endTagAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n                {\n                    endTagInBody(this, token);\n                    break;\n                }\n            case InsertionMode.TEXT:\n                {\n                    endTagInText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n                {\n                    endTagInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_CAPTION:\n                {\n                    endTagInCaption(this, token);\n                    break;\n                }\n            case InsertionMode.IN_COLUMN_GROUP:\n                {\n                    endTagInColumnGroup(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_BODY:\n                {\n                    endTagInTableBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_ROW:\n                {\n                    endTagInRow(this, token);\n                    break;\n                }\n            case InsertionMode.IN_CELL:\n                {\n                    endTagInCell(this, token);\n                    break;\n                }\n            case InsertionMode.IN_SELECT:\n                {\n                    endTagInSelect(this, token);\n                    break;\n                }\n            case InsertionMode.IN_SELECT_IN_TABLE:\n                {\n                    endTagInSelectInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TEMPLATE:\n                {\n                    endTagInTemplate(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n                {\n                    endTagAfterBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_FRAMESET:\n                {\n                    endTagInFrameset(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_FRAMESET:\n                {\n                    endTagAfterFrameset(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_AFTER_BODY:\n                {\n                    tokenAfterAfterBody(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onEof(token) {\n        switch(this.insertionMode){\n            case InsertionMode.INITIAL:\n                {\n                    tokenInInitialMode(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HTML:\n                {\n                    tokenBeforeHtml(this, token);\n                    break;\n                }\n            case InsertionMode.BEFORE_HEAD:\n                {\n                    tokenBeforeHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD:\n                {\n                    tokenInHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n                {\n                    tokenInHeadNoScript(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_HEAD:\n                {\n                    tokenAfterHead(this, token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n                {\n                    eofInBody(this, token);\n                    break;\n                }\n            case InsertionMode.TEXT:\n                {\n                    eofInText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    tokenInTableText(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TEMPLATE:\n                {\n                    eofInTemplate(this, token);\n                    break;\n                }\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET:\n                {\n                    stopParsing(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    onWhitespaceCharacter(token) {\n        if (this.skipNextNewLine) {\n            this.skipNextNewLine = false;\n            if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n                if (token.chars.length === 1) {\n                    return;\n                }\n                token.chars = token.chars.substr(1);\n            }\n        }\n        if (this.tokenizer.inForeignNode) {\n            this._insertCharacters(token);\n            return;\n        }\n        switch(this.insertionMode){\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n                {\n                    this._insertCharacters(token);\n                    break;\n                }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET:\n                {\n                    whitespaceCharacterInBody(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n                {\n                    characterInTable(this, token);\n                    break;\n                }\n            case InsertionMode.IN_TABLE_TEXT:\n                {\n                    whitespaceCharacterInTableText(this, token);\n                    break;\n                }\n            default:\n        }\n    }\n    constructor(options, document, fragmentContext = null, scriptHandler = null){\n        this.fragmentContext = fragmentContext;\n        this.scriptHandler = scriptHandler;\n        this.currentToken = null;\n        this.stopped = false;\n        this.insertionMode = InsertionMode.INITIAL;\n        this.originalInsertionMode = InsertionMode.INITIAL;\n        this.headElement = null;\n        this.formElement = null;\n        /** Indicates that the current node is not an element in the HTML namespace */ this.currentNotInHTML = false;\n        /**\n         * The template insertion mode stack is maintained from the left.\n         * Ie. the topmost element will always have index 0.\n         */ this.tmplInsertionModeStack = [];\n        this.pendingCharacterTokens = [];\n        this.hasNonWhitespacePendingCharacterToken = false;\n        this.framesetOk = true;\n        this.skipNextNewLine = false;\n        this.fosterParentingEnabled = false;\n        this.options = Object.assign(Object.assign({}, defaultParserOptions), options);\n        this.treeAdapter = this.options.treeAdapter;\n        this.onParseError = this.options.onParseError;\n        // Always enable location info if we report parse errors.\n        if (this.onParseError) {\n            this.options.sourceCodeLocationInfo = true;\n        }\n        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n        this.tokenizer = new index_js_1.Tokenizer(this.options, this);\n        this.activeFormattingElements = new formatting_element_list_js_1.FormattingElementList(this.treeAdapter);\n        this.fragmentContextID = fragmentContext ? (0, html_js_1.getTagID)(this.treeAdapter.getTagName(fragmentContext)) : html_js_1.TAG_ID.UNKNOWN;\n        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n        this.openElements = new open_element_stack_js_1.OpenElementStack(this.document, this.treeAdapter, this);\n    }\n}\nexports.Parser = Parser;\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        } else if (!p.openElements.hasInScope(token.tagID)) {\n            formattingElementEntry = null;\n        }\n    } else {\n        genericEndTagInBody(p, token);\n    }\n    return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n    let idx = p.openElements.stackTop;\n    for(; idx >= 0; idx--){\n        const element = p.openElements.items[idx];\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n            furthestBlock = element;\n        }\n    }\n    if (!furthestBlock) {\n        p.openElements.shortenToLength(idx < 0 ? 0 : idx);\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n    return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n    for(let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement){\n        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n            p.openElements.remove(element);\n        } else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n    return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n    return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    const tn = p.treeAdapter.getTagName(commonAncestor);\n    const tid = (0, html_js_1.getTagID)(tn);\n    if (p._isElementCausesFosterParenting(tid)) {\n        p._fosterParentElement(lastElement);\n    } else {\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n        if (tid === html_js_1.TAG_ID.TEMPLATE && ns === html_js_1.NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const { token } = formattingElementEntry;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    for(let i = 0; i < AA_OUTER_LOOP_ITER; i++){\n        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n        if (!formattingElementEntry) {\n            break;\n        }\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n        if (!furthestBlock) {\n            break;\n        }\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n        p.treeAdapter.detachNode(lastElement);\n        if (commonAncestor) aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n    p.stopped = true;\n    // NOTE: Set end locations for elements that remain on the open element stack.\n    if (token.location) {\n        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n        // This is a problem, as we might overwrite their end position here.\n        const target = p.fragmentContext ? 0 : 2;\n        for(let i = p.openElements.stackTop; i >= target; i--){\n            p._setEndLocation(p.openElements.items[i], token);\n        }\n        // Handle `html` and `body`\n        if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n            const htmlElement = p.openElements.items[0];\n            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n            if (htmlLocation && !htmlLocation.endTag) {\n                p._setEndLocation(htmlElement, token);\n                if (p.openElements.stackTop >= 1) {\n                    const bodyElement = p.openElements.items[1];\n                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n                    if (bodyLocation && !bodyLocation.endTag) {\n                        p._setEndLocation(bodyElement, token);\n                    }\n                }\n            }\n        }\n    }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n    const mode = token.forceQuirks ? html_js_1.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n    if (!doctype.isConforming(token)) {\n        p._err(token, error_codes_js_1.ERR.nonConformingDoctype);\n    }\n    p.treeAdapter.setDocumentMode(p.document, mode);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n    p._err(token, error_codes_js_1.ERR.missingDoctype, true);\n    p.treeAdapter.setDocumentMode(p.document, html_js_1.DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n    p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.insertionMode = InsertionMode.BEFORE_HEAD;\n    } else {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagID;\n    if (tn === html_js_1.TAG_ID.HTML || tn === html_js_1.TAG_ID.HEAD || tn === html_js_1.TAG_ID.BODY || tn === html_js_1.TAG_ID.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n    p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.HEAD:\n            {\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.headElement = p.openElements.current;\n                p.insertionMode = InsertionMode.IN_HEAD;\n                break;\n            }\n        default:\n            {\n                tokenBeforeHead(p, token);\n            }\n    }\n}\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagID;\n    if (tn === html_js_1.TAG_ID.HEAD || tn === html_js_1.TAG_ID.BODY || tn === html_js_1.TAG_ID.HTML || tn === html_js_1.TAG_ID.BR) {\n        tokenBeforeHead(p, token);\n    } else {\n        p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement(html_js_1.TAG_NAMES.HEAD, html_js_1.TAG_ID.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BASE:\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n            {\n                p._appendElement(token, html_js_1.NS.HTML);\n                token.ackSelfClosing = true;\n                break;\n            }\n        case html_js_1.TAG_ID.TITLE:\n            {\n                p._switchToTextParsing(token, index_js_1.TokenizerMode.RCDATA);\n                break;\n            }\n        case html_js_1.TAG_ID.NOSCRIPT:\n            {\n                if (p.options.scriptingEnabled) {\n                    p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n                } else {\n                    p._insertElement(token, html_js_1.NS.HTML);\n                    p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.NOFRAMES:\n        case html_js_1.TAG_ID.STYLE:\n            {\n                p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n                break;\n            }\n        case html_js_1.TAG_ID.SCRIPT:\n            {\n                p._switchToTextParsing(token, index_js_1.TokenizerMode.SCRIPT_DATA);\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                p._insertTemplate(token);\n                p.activeFormattingElements.insertMarker();\n                p.framesetOk = false;\n                p.insertionMode = InsertionMode.IN_TEMPLATE;\n                p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n                break;\n            }\n        case html_js_1.TAG_ID.HEAD:\n            {\n                p._err(token, error_codes_js_1.ERR.misplacedStartTagForHeadElement);\n                break;\n            }\n        default:\n            {\n                tokenInHead(p, token);\n            }\n    }\n}\nfunction endTagInHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HEAD:\n            {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.AFTER_HEAD;\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.BR:\n        case html_js_1.TAG_ID.HTML:\n            {\n                tokenInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        default:\n            {\n                p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n            }\n    }\n}\nfunction templateEndTagInHead(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.generateImpliedEndTagsThoroughly();\n        if (p.openElements.currentTagId !== html_js_1.TAG_ID.TEMPLATE) {\n            p._err(token, error_codes_js_1.ERR.closingOfElementWithOpenChildElements);\n        }\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n    } else {\n        p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.AFTER_HEAD;\n    p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.HEAD:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n        case html_js_1.TAG_ID.NOFRAMES:\n        case html_js_1.TAG_ID.STYLE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOSCRIPT:\n            {\n                p._err(token, error_codes_js_1.ERR.nestedNoscriptInHead);\n                break;\n            }\n        default:\n            {\n                tokenInHeadNoScript(p, token);\n            }\n    }\n}\nfunction endTagInHeadNoScript(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.NOSCRIPT:\n            {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_HEAD;\n                break;\n            }\n        case html_js_1.TAG_ID.BR:\n            {\n                tokenInHeadNoScript(p, token);\n                break;\n            }\n        default:\n            {\n                p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n            }\n    }\n}\nfunction tokenInHeadNoScript(p, token) {\n    const errCode = token.type === token_js_1.TokenType.EOF ? error_codes_js_1.ERR.openElementsLeftAfterEof : error_codes_js_1.ERR.disallowedContentInNoscriptInHead;\n    p._err(token, errCode);\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n            {\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.framesetOk = false;\n                p.insertionMode = InsertionMode.IN_BODY;\n                break;\n            }\n        case html_js_1.TAG_ID.FRAMESET:\n            {\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.insertionMode = InsertionMode.IN_FRAMESET;\n                break;\n            }\n        case html_js_1.TAG_ID.BASE:\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n        case html_js_1.TAG_ID.NOFRAMES:\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.STYLE:\n        case html_js_1.TAG_ID.TEMPLATE:\n        case html_js_1.TAG_ID.TITLE:\n            {\n                p._err(token, error_codes_js_1.ERR.abandonedHeadElementChild);\n                p.openElements.push(p.headElement, html_js_1.TAG_ID.HEAD);\n                startTagInHead(p, token);\n                p.openElements.remove(p.headElement);\n                break;\n            }\n        case html_js_1.TAG_ID.HEAD:\n            {\n                p._err(token, error_codes_js_1.ERR.misplacedStartTagForHeadElement);\n                break;\n            }\n        default:\n            {\n                tokenAfterHead(p, token);\n            }\n    }\n}\nfunction endTagAfterHead(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.BR:\n            {\n                tokenAfterHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        default:\n            {\n                p._err(token, error_codes_js_1.ERR.endTagWithoutMatchingOpenElement);\n            }\n    }\n}\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement(html_js_1.TAG_NAMES.BODY, html_js_1.TAG_ID.BODY);\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n    switch(token.type){\n        case token_js_1.TokenType.CHARACTER:\n            {\n                characterInBody(p, token);\n                break;\n            }\n        case token_js_1.TokenType.WHITESPACE_CHARACTER:\n            {\n                whitespaceCharacterInBody(p, token);\n                break;\n            }\n        case token_js_1.TokenType.COMMENT:\n            {\n                appendComment(p, token);\n                break;\n            }\n        case token_js_1.TokenType.START_TAG:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case token_js_1.TokenType.END_TAG:\n            {\n                endTagInBody(p, token);\n                break;\n            }\n        case token_js_1.TokenType.EOF:\n            {\n                eofInBody(p, token);\n                break;\n            }\n        default:\n    }\n}\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n    }\n}\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    if ((0, html_js_1.isNumberedHeader)(p.openElements.currentTagId)) {\n        p.openElements.pop();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n            p._closePElement();\n        }\n        p._insertElement(token, html_js_1.NS.HTML);\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n    const tn = token.tagID;\n    for(let i = p.openElements.stackTop; i >= 0; i--){\n        const elementId = p.openElements.tagIDs[i];\n        if (tn === html_js_1.TAG_ID.LI && elementId === html_js_1.TAG_ID.LI || (tn === html_js_1.TAG_ID.DD || tn === html_js_1.TAG_ID.DT) && (elementId === html_js_1.TAG_ID.DD || elementId === html_js_1.TAG_ID.DT)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n            p.openElements.popUntilTagNamePopped(elementId);\n            break;\n        }\n        if (elementId !== html_js_1.TAG_ID.ADDRESS && elementId !== html_js_1.TAG_ID.DIV && elementId !== html_js_1.TAG_ID.P && p._isSpecialElement(p.openElements.items[i], elementId)) {\n            break;\n        }\n    }\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.tokenizer.state = index_js_1.TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.BUTTON);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(html_js_1.TAG_NAMES.A);\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n    if (p.treeAdapter.getDocumentMode(p.document) !== html_js_1.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n    const inputType = (0, token_js_1.getTokenAttr)(token, html_js_1.ATTRS.TYPE);\n    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, html_js_1.NS.HTML);\n    if (!isHiddenInput(token)) {\n        p.framesetOk = false;\n    }\n    token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, html_js_1.NS.HTML);\n    token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._appendElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n    token.tagName = html_js_1.TAG_NAMES.IMG;\n    token.tagID = html_js_1.TAG_ID.IMG;\n    areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, html_js_1.NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = index_js_1.TokenizerMode.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._closePElement();\n    }\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse\n//<noembed> as rawtext.\nfunction noembedStartTagInBody(p, token) {\n    p._switchToTextParsing(token, index_js_1.TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = p.insertionMode === InsertionMode.IN_TABLE || p.insertionMode === InsertionMode.IN_CAPTION || p.insertionMode === InsertionMode.IN_TABLE_BODY || p.insertionMode === InsertionMode.IN_ROW || p.insertionMode === InsertionMode.IN_CELL ? InsertionMode.IN_SELECT_IN_TABLE : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n        p.openElements.pop();\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(html_js_1.TAG_ID.RTC);\n    }\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, html_js_1.NS.MATHML);\n    } else {\n        p._insertElement(token, html_js_1.NS.MATHML);\n    }\n    token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, html_js_1.NS.SVG);\n    } else {\n        p._insertElement(token, html_js_1.NS.SVG);\n    }\n    token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, html_js_1.NS.HTML);\n}\nfunction startTagInBody(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.I:\n        case html_js_1.TAG_ID.S:\n        case html_js_1.TAG_ID.B:\n        case html_js_1.TAG_ID.U:\n        case html_js_1.TAG_ID.EM:\n        case html_js_1.TAG_ID.TT:\n        case html_js_1.TAG_ID.BIG:\n        case html_js_1.TAG_ID.CODE:\n        case html_js_1.TAG_ID.FONT:\n        case html_js_1.TAG_ID.SMALL:\n        case html_js_1.TAG_ID.STRIKE:\n        case html_js_1.TAG_ID.STRONG:\n            {\n                bStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.A:\n            {\n                aStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.H1:\n        case html_js_1.TAG_ID.H2:\n        case html_js_1.TAG_ID.H3:\n        case html_js_1.TAG_ID.H4:\n        case html_js_1.TAG_ID.H5:\n        case html_js_1.TAG_ID.H6:\n            {\n                numberedHeaderStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.P:\n        case html_js_1.TAG_ID.DL:\n        case html_js_1.TAG_ID.OL:\n        case html_js_1.TAG_ID.UL:\n        case html_js_1.TAG_ID.DIV:\n        case html_js_1.TAG_ID.DIR:\n        case html_js_1.TAG_ID.NAV:\n        case html_js_1.TAG_ID.MAIN:\n        case html_js_1.TAG_ID.MENU:\n        case html_js_1.TAG_ID.ASIDE:\n        case html_js_1.TAG_ID.CENTER:\n        case html_js_1.TAG_ID.FIGURE:\n        case html_js_1.TAG_ID.FOOTER:\n        case html_js_1.TAG_ID.HEADER:\n        case html_js_1.TAG_ID.HGROUP:\n        case html_js_1.TAG_ID.DIALOG:\n        case html_js_1.TAG_ID.DETAILS:\n        case html_js_1.TAG_ID.ADDRESS:\n        case html_js_1.TAG_ID.ARTICLE:\n        case html_js_1.TAG_ID.SECTION:\n        case html_js_1.TAG_ID.SUMMARY:\n        case html_js_1.TAG_ID.FIELDSET:\n        case html_js_1.TAG_ID.BLOCKQUOTE:\n        case html_js_1.TAG_ID.FIGCAPTION:\n            {\n                addressStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.LI:\n        case html_js_1.TAG_ID.DD:\n        case html_js_1.TAG_ID.DT:\n            {\n                listItemStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BR:\n        case html_js_1.TAG_ID.IMG:\n        case html_js_1.TAG_ID.WBR:\n        case html_js_1.TAG_ID.AREA:\n        case html_js_1.TAG_ID.EMBED:\n        case html_js_1.TAG_ID.KEYGEN:\n            {\n                areaStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.HR:\n            {\n                hrStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.RB:\n        case html_js_1.TAG_ID.RTC:\n            {\n                rbStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.RT:\n        case html_js_1.TAG_ID.RP:\n            {\n                rtStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.PRE:\n        case html_js_1.TAG_ID.LISTING:\n            {\n                preStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.XMP:\n            {\n                xmpStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.SVG:\n            {\n                svgStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.HTML:\n            {\n                htmlStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BASE:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n        case html_js_1.TAG_ID.STYLE:\n        case html_js_1.TAG_ID.TITLE:\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n            {\n                bodyStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FORM:\n            {\n                formStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOBR:\n            {\n                nobrStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.MATH:\n            {\n                mathStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n            {\n                tableStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.INPUT:\n            {\n                inputStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.PARAM:\n        case html_js_1.TAG_ID.TRACK:\n        case html_js_1.TAG_ID.SOURCE:\n            {\n                paramStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.IMAGE:\n            {\n                imageStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BUTTON:\n            {\n                buttonStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.APPLET:\n        case html_js_1.TAG_ID.OBJECT:\n        case html_js_1.TAG_ID.MARQUEE:\n            {\n                appletStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.IFRAME:\n            {\n                iframeStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.SELECT:\n            {\n                selectStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.OPTION:\n        case html_js_1.TAG_ID.OPTGROUP:\n            {\n                optgroupStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOEMBED:\n            {\n                noembedStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FRAMESET:\n            {\n                framesetStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TEXTAREA:\n            {\n                textareaStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOSCRIPT:\n            {\n                if (p.options.scriptingEnabled) {\n                    noembedStartTagInBody(p, token);\n                } else {\n                    genericStartTagInBody(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.PLAINTEXT:\n            {\n                plaintextStartTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TR:\n        case html_js_1.TAG_ID.HEAD:\n        case html_js_1.TAG_ID.FRAME:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COLGROUP:\n            {\n                break;\n            }\n        default:\n            {\n                genericStartTagInBody(p, token);\n            }\n    }\n}\nfunction bodyEndTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        //NOTE: <body> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo) {\n            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n            if (bodyElement) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n}\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope(html_js_1.TAG_ID.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        endTagAfterBody(p, token);\n    }\n}\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const { formElement } = p;\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n    if ((formElement || inTemplate) && p.openElements.hasInScope(html_js_1.TAG_ID.FORM)) {\n        p.openElements.generateImpliedEndTags();\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.FORM);\n        } else if (formElement) {\n            p.openElements.remove(formElement);\n        }\n    }\n}\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope(html_js_1.TAG_ID.P)) {\n        p._insertFakeElement(html_js_1.TAG_NAMES.P, html_js_1.TAG_ID.P);\n    }\n    p._closePElement();\n}\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope(html_js_1.TAG_ID.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(html_js_1.TAG_ID.LI);\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.LI);\n    }\n}\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement(html_js_1.TAG_NAMES.BR, html_js_1.TAG_ID.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n    const tid = token.tagID;\n    for(let i = p.openElements.stackTop; i > 0; i--){\n        const element = p.openElements.items[i];\n        const elementId = p.openElements.tagIDs[i];\n        // Compare the tag name here, as the tag might not be a known tag with an ID.\n        if (tid === elementId && (tid !== html_js_1.TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tid);\n            if (p.openElements.stackTop >= i) p.openElements.shortenToLength(i);\n            break;\n        }\n        if (p._isSpecialElement(element, elementId)) {\n            break;\n        }\n    }\n}\nfunction endTagInBody(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.A:\n        case html_js_1.TAG_ID.B:\n        case html_js_1.TAG_ID.I:\n        case html_js_1.TAG_ID.S:\n        case html_js_1.TAG_ID.U:\n        case html_js_1.TAG_ID.EM:\n        case html_js_1.TAG_ID.TT:\n        case html_js_1.TAG_ID.BIG:\n        case html_js_1.TAG_ID.CODE:\n        case html_js_1.TAG_ID.FONT:\n        case html_js_1.TAG_ID.NOBR:\n        case html_js_1.TAG_ID.SMALL:\n        case html_js_1.TAG_ID.STRIKE:\n        case html_js_1.TAG_ID.STRONG:\n            {\n                callAdoptionAgency(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.P:\n            {\n                pEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.DL:\n        case html_js_1.TAG_ID.UL:\n        case html_js_1.TAG_ID.OL:\n        case html_js_1.TAG_ID.DIR:\n        case html_js_1.TAG_ID.DIV:\n        case html_js_1.TAG_ID.NAV:\n        case html_js_1.TAG_ID.PRE:\n        case html_js_1.TAG_ID.MAIN:\n        case html_js_1.TAG_ID.MENU:\n        case html_js_1.TAG_ID.ASIDE:\n        case html_js_1.TAG_ID.BUTTON:\n        case html_js_1.TAG_ID.CENTER:\n        case html_js_1.TAG_ID.FIGURE:\n        case html_js_1.TAG_ID.FOOTER:\n        case html_js_1.TAG_ID.HEADER:\n        case html_js_1.TAG_ID.HGROUP:\n        case html_js_1.TAG_ID.DIALOG:\n        case html_js_1.TAG_ID.ADDRESS:\n        case html_js_1.TAG_ID.ARTICLE:\n        case html_js_1.TAG_ID.DETAILS:\n        case html_js_1.TAG_ID.SECTION:\n        case html_js_1.TAG_ID.SUMMARY:\n        case html_js_1.TAG_ID.LISTING:\n        case html_js_1.TAG_ID.FIELDSET:\n        case html_js_1.TAG_ID.BLOCKQUOTE:\n        case html_js_1.TAG_ID.FIGCAPTION:\n            {\n                addressEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.LI:\n            {\n                liEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.DD:\n        case html_js_1.TAG_ID.DT:\n            {\n                ddEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.H1:\n        case html_js_1.TAG_ID.H2:\n        case html_js_1.TAG_ID.H3:\n        case html_js_1.TAG_ID.H4:\n        case html_js_1.TAG_ID.H5:\n        case html_js_1.TAG_ID.H6:\n            {\n                numberedHeaderEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.BR:\n            {\n                brEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n            {\n                bodyEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.HTML:\n            {\n                htmlEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FORM:\n            {\n                formEndTagInBody(p);\n                break;\n            }\n        case html_js_1.TAG_ID.APPLET:\n        case html_js_1.TAG_ID.OBJECT:\n        case html_js_1.TAG_ID.MARQUEE:\n            {\n                appletEndTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        default:\n            {\n                genericEndTagInBody(p, token);\n            }\n    }\n}\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStack.length > 0) {\n        eofInTemplate(p, token);\n    } else {\n        stopParsing(p, token);\n    }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    var _a;\n    if (token.tagID === html_js_1.TAG_ID.SCRIPT) {\n        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n    }\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n    p._err(token, error_codes_js_1.ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n        p.pendingCharacterTokens.length = 0;\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n        switch(token.type){\n            case token_js_1.TokenType.CHARACTER:\n                {\n                    characterInTableText(p, token);\n                    break;\n                }\n            case token_js_1.TokenType.WHITESPACE_CHARACTER:\n                {\n                    whitespaceCharacterInTableText(p, token);\n                    break;\n                }\n        }\n    } else {\n        tokenInTable(p, token);\n    }\n}\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(html_js_1.TAG_NAMES.COLGROUP, html_js_1.TAG_ID.COLGROUP);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n    startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, html_js_1.NS.HTML);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(html_js_1.TAG_NAMES.TBODY, html_js_1.TAG_ID.TBODY);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n    startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TABLE)) {\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TABLE);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n}\nfunction inputStartTagInTable(p, token) {\n    if (isHiddenInput(token)) {\n        p._appendElement(token, html_js_1.NS.HTML);\n    } else {\n        tokenInTable(p, token);\n    }\n    token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, html_js_1.NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\nfunction startTagInTable(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TR:\n            {\n                tdStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.STYLE:\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n            {\n                colStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FORM:\n            {\n                formStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n            {\n                tableStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                tbodyStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.INPUT:\n            {\n                inputStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.CAPTION:\n            {\n                captionStartTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COLGROUP:\n            {\n                colgroupStartTagInTable(p, token);\n                break;\n            }\n        default:\n            {\n                tokenInTable(p, token);\n            }\n    }\n}\nfunction endTagInTable(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TABLE:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TABLE)) {\n                    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TABLE);\n                    p._resetInsertionMode();\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.TR:\n            {\n                break;\n            }\n        default:\n            {\n                tokenInTable(p, token);\n            }\n    }\n}\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n    p.fosterParentingEnabled = true;\n    // Process token in `In Body` mode\n    modeInBody(p, token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n    let i = 0;\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for(; i < p.pendingCharacterTokens.length; i++){\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    } else {\n        for(; i < p.pendingCharacterTokens.length; i++){\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([\n    html_js_1.TAG_ID.CAPTION,\n    html_js_1.TAG_ID.COL,\n    html_js_1.TAG_ID.COLGROUP,\n    html_js_1.TAG_ID.TBODY,\n    html_js_1.TAG_ID.TD,\n    html_js_1.TAG_ID.TFOOT,\n    html_js_1.TAG_ID.TH,\n    html_js_1.TAG_ID.THEAD,\n    html_js_1.TAG_ID.TR\n]);\nfunction startTagInCaption(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope(html_js_1.TAG_ID.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCaption(p, token) {\n    const tn = token.tagID;\n    switch(tn){\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.TABLE:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.CAPTION)) {\n                    p.openElements.generateImpliedEndTags();\n                    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.CAPTION);\n                    p.activeFormattingElements.clearToLastMarker();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                    if (tn === html_js_1.TAG_ID.TABLE) {\n                        endTagInTable(p, token);\n                    }\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.TR:\n            {\n                break;\n            }\n        default:\n            {\n                endTagInBody(p, token);\n            }\n    }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n            {\n                p._appendElement(token, html_js_1.NS.HTML);\n                token.ackSelfClosing = true;\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n            {\n                tokenInColumnGroup(p, token);\n            }\n    }\n}\nfunction endTagInColumnGroup(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.COLGROUP:\n            {\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.COLGROUP) {\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n            {\n                break;\n            }\n        default:\n            {\n                tokenInColumnGroup(p, token);\n            }\n    }\n}\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagId === html_js_1.TAG_ID.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_TABLE;\n        p._processToken(token);\n    }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TR:\n            {\n                p.openElements.clearBackToTableBodyContext();\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.insertionMode = InsertionMode.IN_ROW;\n                break;\n            }\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TD:\n            {\n                p.openElements.clearBackToTableBodyContext();\n                p._insertFakeElement(html_js_1.TAG_NAMES.TR, html_js_1.TAG_ID.TR);\n                p.insertionMode = InsertionMode.IN_ROW;\n                startTagInRow(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                if (p.openElements.hasTableBodyContextInTableScope()) {\n                    p.openElements.clearBackToTableBodyContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                    startTagInTable(p, token);\n                }\n                break;\n            }\n        default:\n            {\n                startTagInTable(p, token);\n            }\n    }\n}\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagID;\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                if (p.openElements.hasInTableScope(tn)) {\n                    p.openElements.clearBackToTableBodyContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n            {\n                if (p.openElements.hasTableBodyContextInTableScope()) {\n                    p.openElements.clearBackToTableBodyContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE;\n                    endTagInTable(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TR:\n            {\n                break;\n            }\n        default:\n            {\n                endTagInTable(p, token);\n            }\n    }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TH:\n        case html_js_1.TAG_ID.TD:\n            {\n                p.openElements.clearBackToTableRowContext();\n                p._insertElement(token, html_js_1.NS.HTML);\n                p.insertionMode = InsertionMode.IN_CELL;\n                p.activeFormattingElements.insertMarker();\n                break;\n            }\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.TR:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n                    p.openElements.clearBackToTableRowContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    startTagInTableBody(p, token);\n                }\n                break;\n            }\n        default:\n            {\n                startTagInTable(p, token);\n            }\n    }\n}\nfunction endTagInRow(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.TR:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n                    p.openElements.clearBackToTableRowContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n            {\n                if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n                    p.openElements.clearBackToTableRowContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    endTagInTableBody(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope(html_js_1.TAG_ID.TR)) {\n                    p.openElements.clearBackToTableRowContext();\n                    p.openElements.pop();\n                    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    endTagInTableBody(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n            {\n                break;\n            }\n        default:\n            {\n                endTagInTable(p, token);\n            }\n    }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope(html_js_1.TAG_ID.TD) || p.openElements.hasInTableScope(html_js_1.TAG_ID.TH)) {\n            p._closeTableCell();\n            startTagInRow(p, token);\n        }\n    } else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCell(p, token) {\n    const tn = token.tagID;\n    switch(tn){\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n            {\n                if (p.openElements.hasInTableScope(tn)) {\n                    p.openElements.generateImpliedEndTags();\n                    p.openElements.popUntilTagNamePopped(tn);\n                    p.activeFormattingElements.clearToLastMarker();\n                    p.insertionMode = InsertionMode.IN_ROW;\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TABLE:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n        case html_js_1.TAG_ID.TR:\n            {\n                if (p.openElements.hasInTableScope(tn)) {\n                    p._closeTableCell();\n                    endTagInRow(p, token);\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.BODY:\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COL:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.HTML:\n            {\n                break;\n            }\n        default:\n            {\n                endTagInBody(p, token);\n            }\n    }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.OPTION:\n            {\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n                    p.openElements.pop();\n                }\n                p._insertElement(token, html_js_1.NS.HTML);\n                break;\n            }\n        case html_js_1.TAG_ID.OPTGROUP:\n            {\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n                    p.openElements.pop();\n                }\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTGROUP) {\n                    p.openElements.pop();\n                }\n                p._insertElement(token, html_js_1.NS.HTML);\n                break;\n            }\n        case html_js_1.TAG_ID.INPUT:\n        case html_js_1.TAG_ID.KEYGEN:\n        case html_js_1.TAG_ID.TEXTAREA:\n        case html_js_1.TAG_ID.SELECT:\n            {\n                if (p.openElements.hasInSelectScope(html_js_1.TAG_ID.SELECT)) {\n                    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n                    p._resetInsertionMode();\n                    if (token.tagID !== html_js_1.TAG_ID.SELECT) {\n                        p._processStartTag(token);\n                    }\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\nfunction endTagInSelect(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.OPTGROUP:\n            {\n                if (p.openElements.stackTop > 0 && p.openElements.currentTagId === html_js_1.TAG_ID.OPTION && p.openElements.tagIDs[p.openElements.stackTop - 1] === html_js_1.TAG_ID.OPTGROUP) {\n                    p.openElements.pop();\n                }\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTGROUP) {\n                    p.openElements.pop();\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.OPTION:\n            {\n                if (p.openElements.currentTagId === html_js_1.TAG_ID.OPTION) {\n                    p.openElements.pop();\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.SELECT:\n            {\n                if (p.openElements.hasInSelectScope(html_js_1.TAG_ID.SELECT)) {\n                    p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n                    p._resetInsertionMode();\n                }\n                break;\n            }\n        case html_js_1.TAG_ID.TEMPLATE:\n            {\n                templateEndTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === html_js_1.TAG_ID.CAPTION || tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.TBODY || tn === html_js_1.TAG_ID.TFOOT || tn === html_js_1.TAG_ID.THEAD || tn === html_js_1.TAG_ID.TR || tn === html_js_1.TAG_ID.TD || tn === html_js_1.TAG_ID.TH) {\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    } else {\n        startTagInSelect(p, token);\n    }\n}\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === html_js_1.TAG_ID.CAPTION || tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.TBODY || tn === html_js_1.TAG_ID.TFOOT || tn === html_js_1.TAG_ID.THEAD || tn === html_js_1.TAG_ID.TR || tn === html_js_1.TAG_ID.TD || tn === html_js_1.TAG_ID.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.SELECT);\n            p._resetInsertionMode();\n            p.onEndTag(token);\n        }\n    } else {\n        endTagInSelect(p, token);\n    }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    switch(token.tagID){\n        // First, handle tags that can start without a mode change\n        case html_js_1.TAG_ID.BASE:\n        case html_js_1.TAG_ID.BASEFONT:\n        case html_js_1.TAG_ID.BGSOUND:\n        case html_js_1.TAG_ID.LINK:\n        case html_js_1.TAG_ID.META:\n        case html_js_1.TAG_ID.NOFRAMES:\n        case html_js_1.TAG_ID.SCRIPT:\n        case html_js_1.TAG_ID.STYLE:\n        case html_js_1.TAG_ID.TEMPLATE:\n        case html_js_1.TAG_ID.TITLE:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        // Re-process the token in the appropriate mode\n        case html_js_1.TAG_ID.CAPTION:\n        case html_js_1.TAG_ID.COLGROUP:\n        case html_js_1.TAG_ID.TBODY:\n        case html_js_1.TAG_ID.TFOOT:\n        case html_js_1.TAG_ID.THEAD:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n                p.insertionMode = InsertionMode.IN_TABLE;\n                startTagInTable(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.COL:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n                p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                startTagInColumnGroup(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TR:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                startTagInTableBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.TD:\n        case html_js_1.TAG_ID.TH:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n                p.insertionMode = InsertionMode.IN_ROW;\n                startTagInRow(p, token);\n                break;\n            }\n        default:\n            {\n                p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n                p.insertionMode = InsertionMode.IN_BODY;\n                startTagInBody(p, token);\n            }\n    }\n}\nfunction endTagInTemplate(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.TEMPLATE) {\n        templateEndTagInHead(p, token);\n    }\n}\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped(html_js_1.TAG_ID.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n        p.onEof(token);\n    } else {\n        stopParsing(p, token);\n    }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction endTagAfterBody(p, token) {\n    var _a;\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n        }\n        //NOTE: <html> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === html_js_1.TAG_ID.HTML) {\n            p._setEndLocation(p.openElements.items[0], token);\n            // Update the body element, if it doesn't have an end tag\n            const bodyElement = p.openElements.items[1];\n            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    } else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.FRAMESET:\n            {\n                p._insertElement(token, html_js_1.NS.HTML);\n                break;\n            }\n        case html_js_1.TAG_ID.FRAME:\n            {\n                p._appendElement(token, html_js_1.NS.HTML);\n                token.ackSelfClosing = true;\n                break;\n            }\n        case html_js_1.TAG_ID.NOFRAMES:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\nfunction endTagInFrameset(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n        if (!p.fragmentContext && p.openElements.currentTagId !== html_js_1.TAG_ID.FRAMESET) {\n            p.insertionMode = InsertionMode.AFTER_FRAMESET;\n        }\n    }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOFRAMES:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n    }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.HTML) {\n        startTagInBody(p, token);\n    } else {\n        tokenAfterAfterBody(p, token);\n    }\n}\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    switch(token.tagID){\n        case html_js_1.TAG_ID.HTML:\n            {\n                startTagInBody(p, token);\n                break;\n            }\n        case html_js_1.TAG_ID.NOFRAMES:\n            {\n                startTagInHead(p, token);\n                break;\n            }\n        default:\n    }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n    while(p.treeAdapter.getNamespaceURI(p.openElements.current) !== html_js_1.NS.HTML && !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)){\n        p.openElements.pop();\n    }\n}\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token)) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._startTagOutsideForeignContent(token);\n    } else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n        if (currentNs === html_js_1.NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        } else if (currentNs === html_js_1.NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n        foreignContent.adjustTokenXMLAttrs(token);\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        } else {\n            p._insertElement(token, currentNs);\n        }\n        token.ackSelfClosing = true;\n    }\n}\nfunction endTagInForeignContent(p, token) {\n    if (token.tagID === html_js_1.TAG_ID.P || token.tagID === html_js_1.TAG_ID.BR) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._endTagOutsideForeignContent(token);\n        return;\n    }\n    for(let i = p.openElements.stackTop; i > 0; i--){\n        const element = p.openElements.items[i];\n        if (p.treeAdapter.getNamespaceURI(element) === html_js_1.NS.HTML) {\n            p._endTagOutsideForeignContent(token);\n            break;\n        }\n        const tagName = p.treeAdapter.getTagName(element);\n        if (tagName.toLowerCase() === token.tagName) {\n            //NOTE: update the token tag name for `_setEndLocation`.\n            token.tagName = tagName;\n            p.openElements.shortenToLength(i);\n            break;\n        }\n    }\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/open-element-stack.js":
/*!*******************************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/parser/open-element-stack.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.OpenElementStack = void 0;\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js\");\n//Element utils\nconst IMPLICIT_END_TAG_REQUIRED = new Set([\n    html_js_1.TAG_ID.DD,\n    html_js_1.TAG_ID.DT,\n    html_js_1.TAG_ID.LI,\n    html_js_1.TAG_ID.OPTGROUP,\n    html_js_1.TAG_ID.OPTION,\n    html_js_1.TAG_ID.P,\n    html_js_1.TAG_ID.RB,\n    html_js_1.TAG_ID.RP,\n    html_js_1.TAG_ID.RT,\n    html_js_1.TAG_ID.RTC\n]);\nconst IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([\n    ...IMPLICIT_END_TAG_REQUIRED,\n    html_js_1.TAG_ID.CAPTION,\n    html_js_1.TAG_ID.COLGROUP,\n    html_js_1.TAG_ID.TBODY,\n    html_js_1.TAG_ID.TD,\n    html_js_1.TAG_ID.TFOOT,\n    html_js_1.TAG_ID.TH,\n    html_js_1.TAG_ID.THEAD,\n    html_js_1.TAG_ID.TR\n]);\nconst SCOPING_ELEMENT_NS = new Map([\n    [\n        html_js_1.TAG_ID.APPLET,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.CAPTION,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.HTML,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.MARQUEE,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.OBJECT,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.TABLE,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.TD,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.TEMPLATE,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.TH,\n        html_js_1.NS.HTML\n    ],\n    [\n        html_js_1.TAG_ID.ANNOTATION_XML,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MI,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MN,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MO,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MS,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.MTEXT,\n        html_js_1.NS.MATHML\n    ],\n    [\n        html_js_1.TAG_ID.DESC,\n        html_js_1.NS.SVG\n    ],\n    [\n        html_js_1.TAG_ID.FOREIGN_OBJECT,\n        html_js_1.NS.SVG\n    ],\n    [\n        html_js_1.TAG_ID.TITLE,\n        html_js_1.NS.SVG\n    ]\n]);\nconst NAMED_HEADERS = [\n    html_js_1.TAG_ID.H1,\n    html_js_1.TAG_ID.H2,\n    html_js_1.TAG_ID.H3,\n    html_js_1.TAG_ID.H4,\n    html_js_1.TAG_ID.H5,\n    html_js_1.TAG_ID.H6\n];\nconst TABLE_ROW_CONTEXT = [\n    html_js_1.TAG_ID.TR,\n    html_js_1.TAG_ID.TEMPLATE,\n    html_js_1.TAG_ID.HTML\n];\nconst TABLE_BODY_CONTEXT = [\n    html_js_1.TAG_ID.TBODY,\n    html_js_1.TAG_ID.TFOOT,\n    html_js_1.TAG_ID.THEAD,\n    html_js_1.TAG_ID.TEMPLATE,\n    html_js_1.TAG_ID.HTML\n];\nconst TABLE_CONTEXT = [\n    html_js_1.TAG_ID.TABLE,\n    html_js_1.TAG_ID.TEMPLATE,\n    html_js_1.TAG_ID.HTML\n];\nconst TABLE_CELLS = [\n    html_js_1.TAG_ID.TD,\n    html_js_1.TAG_ID.TH\n];\n//Stack of open elements\nclass OpenElementStack {\n    get currentTmplContentOrNode() {\n        return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;\n    }\n    //Index of element\n    _indexOf(element) {\n        return this.items.lastIndexOf(element, this.stackTop);\n    }\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagId === html_js_1.TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === html_js_1.NS.HTML;\n    }\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagId = this.tagIDs[this.stackTop];\n    }\n    //Mutations\n    push(element, tagID) {\n        this.stackTop++;\n        this.items[this.stackTop] = element;\n        this.current = element;\n        this.tagIDs[this.stackTop] = tagID;\n        this.currentTagId = tagID;\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n        this.handler.onItemPush(element, tagID, true);\n    }\n    pop() {\n        const popped = this.current;\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n        this.stackTop--;\n        this._updateCurrentElement();\n        this.handler.onItemPop(popped, true);\n    }\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n        this.items[idx] = newElement;\n        if (idx === this.stackTop) {\n            this.current = newElement;\n        }\n    }\n    insertAfter(referenceElement, newElement, newElementID) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n        this.items.splice(insertionIdx, 0, newElement);\n        this.tagIDs.splice(insertionIdx, 0, newElementID);\n        this.stackTop++;\n        if (insertionIdx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n        this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);\n    }\n    popUntilTagNamePopped(tagName) {\n        let targetIdx = this.stackTop + 1;\n        do {\n            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);\n        }while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== html_js_1.NS.HTML);\n        this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);\n    }\n    shortenToLength(idx) {\n        while(this.stackTop >= idx){\n            const popped = this.current;\n            if (this.tmplCount > 0 && this._isInTemplate()) {\n                this.tmplCount -= 1;\n            }\n            this.stackTop--;\n            this._updateCurrentElement();\n            this.handler.onItemPop(popped, this.stackTop < idx);\n        }\n    }\n    popUntilElementPopped(element) {\n        const idx = this._indexOf(element);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilPopped(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx < 0 ? 0 : idx);\n    }\n    popUntilNumberedHeaderPopped() {\n        this.popUntilPopped(NAMED_HEADERS, html_js_1.NS.HTML);\n    }\n    popUntilTableCellPopped() {\n        this.popUntilPopped(TABLE_CELLS, html_js_1.NS.HTML);\n    }\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that the root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.tmplCount = 0;\n        this.shortenToLength(1);\n    }\n    _indexOfTagNames(tagNames, namespace) {\n        for(let i = this.stackTop; i >= 0; i--){\n            if (tagNames.includes(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    clearBackTo(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx + 1);\n    }\n    clearBackToTableContext() {\n        this.clearBackTo(TABLE_CONTEXT, html_js_1.NS.HTML);\n    }\n    clearBackToTableBodyContext() {\n        this.clearBackTo(TABLE_BODY_CONTEXT, html_js_1.NS.HTML);\n    }\n    clearBackToTableRowContext() {\n        this.clearBackTo(TABLE_ROW_CONTEXT, html_js_1.NS.HTML);\n    }\n    remove(element) {\n        const idx = this._indexOf(element);\n        if (idx >= 0) {\n            if (idx === this.stackTop) {\n                this.pop();\n            } else {\n                this.items.splice(idx, 1);\n                this.tagIDs.splice(idx, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                this.handler.onItemPop(element, false);\n            }\n        }\n    }\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        return this.stackTop >= 1 && this.tagIDs[1] === html_js_1.TAG_ID.BODY ? this.items[1] : null;\n    }\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n    getCommonAncestor(element) {\n        const elementIdx = this._indexOf(element) - 1;\n        return elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.tagIDs[0] === html_js_1.TAG_ID.HTML;\n    }\n    //Element in scope\n    hasInScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (tn === tagName && ns === html_js_1.NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasNumberedHeaderInScope() {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if ((0, html_js_1.isNumberedHeader)(tn) && ns === html_js_1.NS.HTML) {\n                return true;\n            }\n            if (SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInListItemScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (tn === tagName && ns === html_js_1.NS.HTML) {\n                return true;\n            }\n            if ((tn === html_js_1.TAG_ID.UL || tn === html_js_1.TAG_ID.OL) && ns === html_js_1.NS.HTML || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInButtonScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (tn === tagName && ns === html_js_1.NS.HTML) {\n                return true;\n            }\n            if (tn === html_js_1.TAG_ID.BUTTON && ns === html_js_1.NS.HTML || SCOPING_ELEMENT_NS.get(tn) === ns) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInTableScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (ns !== html_js_1.NS.HTML) {\n                continue;\n            }\n            if (tn === tagName) {\n                return true;\n            }\n            if (tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.TEMPLATE || tn === html_js_1.TAG_ID.HTML) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasTableBodyContextInTableScope() {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (ns !== html_js_1.NS.HTML) {\n                continue;\n            }\n            if (tn === html_js_1.TAG_ID.TBODY || tn === html_js_1.TAG_ID.THEAD || tn === html_js_1.TAG_ID.TFOOT) {\n                return true;\n            }\n            if (tn === html_js_1.TAG_ID.TABLE || tn === html_js_1.TAG_ID.HTML) {\n                return false;\n            }\n        }\n        return true;\n    }\n    hasInSelectScope(tagName) {\n        for(let i = this.stackTop; i >= 0; i--){\n            const tn = this.tagIDs[i];\n            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);\n            if (ns !== html_js_1.NS.HTML) {\n                continue;\n            }\n            if (tn === tagName) {\n                return true;\n            }\n            if (tn !== html_js_1.TAG_ID.OPTION && tn !== html_js_1.TAG_ID.OPTGROUP) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //Implied end tags\n    generateImpliedEndTags() {\n        while(IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)){\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsThoroughly() {\n        while(IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)){\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsWithExclusion(exclusionId) {\n        while(this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)){\n            this.pop();\n        }\n    }\n    constructor(document, treeAdapter, handler){\n        this.treeAdapter = treeAdapter;\n        this.handler = handler;\n        this.items = [];\n        this.tagIDs = [];\n        this.stackTop = -1;\n        this.tmplCount = 0;\n        this.currentTagId = html_js_1.TAG_ID.UNKNOWN;\n        this.current = document;\n    }\n}\nexports.OpenElementStack = OpenElementStack; //# sourceMappingURL=open-element-stack.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/parser/open-element-stack.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/serializer/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/serializer/index.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.serializeOuter = exports.serialize = void 0;\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js\");\nconst escape_js_1 = __webpack_require__(/*! entities/lib/escape.js */ \"(app-pages-browser)/./node_modules/entities/lib/escape.js\");\nconst default_js_1 = __webpack_require__(/*! ../tree-adapters/default.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/tree-adapters/default.js\");\n// Sets\nconst VOID_ELEMENTS = new Set([\n    html_js_1.TAG_NAMES.AREA,\n    html_js_1.TAG_NAMES.BASE,\n    html_js_1.TAG_NAMES.BASEFONT,\n    html_js_1.TAG_NAMES.BGSOUND,\n    html_js_1.TAG_NAMES.BR,\n    html_js_1.TAG_NAMES.COL,\n    html_js_1.TAG_NAMES.EMBED,\n    html_js_1.TAG_NAMES.FRAME,\n    html_js_1.TAG_NAMES.HR,\n    html_js_1.TAG_NAMES.IMG,\n    html_js_1.TAG_NAMES.INPUT,\n    html_js_1.TAG_NAMES.KEYGEN,\n    html_js_1.TAG_NAMES.LINK,\n    html_js_1.TAG_NAMES.META,\n    html_js_1.TAG_NAMES.PARAM,\n    html_js_1.TAG_NAMES.SOURCE,\n    html_js_1.TAG_NAMES.TRACK,\n    html_js_1.TAG_NAMES.WBR\n]);\nfunction isVoidElement(node, options) {\n    return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === html_js_1.NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));\n}\nconst defaultOpts = {\n    treeAdapter: default_js_1.defaultTreeAdapter,\n    scriptingEnabled: true\n};\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */ function serialize(node, options) {\n    const opts = Object.assign(Object.assign({}, defaultOpts), options);\n    if (isVoidElement(node, opts)) {\n        return \"\";\n    }\n    return serializeChildNodes(node, opts);\n}\nexports.serialize = serialize;\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */ function serializeOuter(node, options) {\n    const opts = Object.assign(Object.assign({}, defaultOpts), options);\n    return serializeNode(node, opts);\n}\nexports.serializeOuter = serializeOuter;\nfunction serializeChildNodes(parentNode, options) {\n    let html = \"\";\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === html_js_1.TAG_NAMES.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === html_js_1.NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes){\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return \"\";\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return \"<\".concat(tn).concat(serializeAttributes(node, options), \">\").concat(isVoidElement(node, options) ? \"\" : \"\".concat(serializeChildNodes(node, options), \"</\").concat(tn, \">\"));\n}\nfunction serializeAttributes(node, param) {\n    let { treeAdapter } = param;\n    let html = \"\";\n    for (const attr of treeAdapter.getAttrList(node)){\n        html += \" \";\n        if (!attr.namespace) {\n            html += attr.name;\n        } else switch(attr.namespace){\n            case html_js_1.NS.XML:\n                {\n                    html += \"xml:\".concat(attr.name);\n                    break;\n                }\n            case html_js_1.NS.XMLNS:\n                {\n                    if (attr.name !== \"xmlns\") {\n                        html += \"xmlns:\";\n                    }\n                    html += attr.name;\n                    break;\n                }\n            case html_js_1.NS.XLINK:\n                {\n                    html += \"xlink:\".concat(attr.name);\n                    break;\n                }\n            default:\n                {\n                    html += \"\".concat(attr.prefix, \":\").concat(attr.name);\n                }\n        }\n        html += '=\"'.concat((0, escape_js_1.escapeAttribute)(attr.value), '\"');\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn && treeAdapter.getNamespaceURI(parent) === html_js_1.NS.HTML && (0, html_js_1.hasUnescapedText)(parentTn, options.scriptingEnabled) ? content : (0, escape_js_1.escapeText)(content);\n}\nfunction serializeCommentNode(node, param) {\n    let { treeAdapter } = param;\n    return \"<!--\".concat(treeAdapter.getCommentNodeContent(node), \"-->\");\n}\nfunction serializeDocumentTypeNode(node, param) {\n    let { treeAdapter } = param;\n    return \"<!DOCTYPE \".concat(treeAdapter.getDocumentTypeNodeName(node), \">\");\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/serializer/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/tokenizer/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/tokenizer/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Tokenizer = exports.TokenizerMode = void 0;\nconst preprocessor_js_1 = __webpack_require__(/*! ./preprocessor.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/tokenizer/preprocessor.js\");\nconst unicode_js_1 = __webpack_require__(/*! ../common/unicode.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/unicode.js\");\nconst token_js_1 = __webpack_require__(/*! ../common/token.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/token.js\");\nconst decode_js_1 = __webpack_require__(/*! entities/lib/decode.js */ \"(app-pages-browser)/./node_modules/entities/lib/decode.js\");\nconst error_codes_js_1 = __webpack_require__(/*! ../common/error-codes.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/error-codes.js\");\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js\");\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([\n    [\n        0x80,\n        8364\n    ],\n    [\n        0x82,\n        8218\n    ],\n    [\n        0x83,\n        402\n    ],\n    [\n        0x84,\n        8222\n    ],\n    [\n        0x85,\n        8230\n    ],\n    [\n        0x86,\n        8224\n    ],\n    [\n        0x87,\n        8225\n    ],\n    [\n        0x88,\n        710\n    ],\n    [\n        0x89,\n        8240\n    ],\n    [\n        0x8a,\n        352\n    ],\n    [\n        0x8b,\n        8249\n    ],\n    [\n        0x8c,\n        338\n    ],\n    [\n        0x8e,\n        381\n    ],\n    [\n        0x91,\n        8216\n    ],\n    [\n        0x92,\n        8217\n    ],\n    [\n        0x93,\n        8220\n    ],\n    [\n        0x94,\n        8221\n    ],\n    [\n        0x95,\n        8226\n    ],\n    [\n        0x96,\n        8211\n    ],\n    [\n        0x97,\n        8212\n    ],\n    [\n        0x98,\n        732\n    ],\n    [\n        0x99,\n        8482\n    ],\n    [\n        0x9a,\n        353\n    ],\n    [\n        0x9b,\n        8250\n    ],\n    [\n        0x9c,\n        339\n    ],\n    [\n        0x9e,\n        382\n    ],\n    [\n        0x9f,\n        376\n    ]\n]);\n//States\nvar State;\n(function(State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n    State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexports.TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.DIGIT_0 && cp <= unicode_js_1.CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === unicode_js_1.CODE_POINTS.SPACE || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.TABULATION || cp === unicode_js_1.CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === unicode_js_1.CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === unicode_js_1.CODE_POINTS.SOLIDUS || cp === unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n    //Errors\n    _err(code) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop) return;\n        this.inLoop = true;\n        while(this.active && !this.paused){\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error(\"Parser was already resumed\");\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop) return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this._unconsume(this.consumedAfterSnapshot);\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _unconsume(count) {\n        this.consumedAfterSnapshot -= count;\n        this.preprocessor.retreat(count);\n    }\n    _reconsumeInState(state, cp) {\n        this.state = state;\n        this._callState(cp);\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for(let i = 0; i < count; i++){\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.START_TAG,\n            tagName: \"\",\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1)\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.END_TAG,\n            tagName: \"\",\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2)\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: token_js_1.TokenType.COMMENT,\n            data: \"\",\n            location: this.getCurrentLocation(offset)\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: token_js_1.TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: \"\"\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if ((0, token_js_1.getTokenAttr)(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = (_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : _b.attrs = Object.create(null);\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        } else {\n            this._err(error_codes_js_1.ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = (0, html_js_1.getTagID)(ct.tagName);\n        if (ct.type === token_js_1.TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        } else {\n            if (ct.attrs.length > 0) {\n                this._err(error_codes_js_1.ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(error_codes_js_1.ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch(this.currentCharacterToken.type){\n                case token_js_1.TokenType.CHARACTER:\n                    {\n                        this.handler.onCharacter(this.currentCharacterToken);\n                        break;\n                    }\n                case token_js_1.TokenType.NULL_CHARACTER:\n                    {\n                        this.handler.onNullCharacter(this.currentCharacterToken);\n                        break;\n                    }\n                case token_js_1.TokenType.WHITESPACE_CHARACTER:\n                    {\n                        this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                        break;\n                    }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({\n            type: token_js_1.TokenType.EOF,\n            location\n        });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type !== type) {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            } else {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp) ? token_js_1.TokenType.WHITESPACE_CHARACTER : cp === unicode_js_1.CODE_POINTS.NULL ? token_js_1.TokenType.NULL_CHARACTER : token_js_1.TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(token_js_1.TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _matchNamedCharacterReference(cp) {\n        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for(let i = 0, current = decode_js_1.htmlDecodeTree[0]; i >= 0; cp = this._consume()){\n            i = (0, decode_js_1.determineBranch)(decode_js_1.htmlDecodeTree, current, i + 1, cp);\n            if (i < 0) break;\n            excess += 1;\n            current = decode_js_1.htmlDecodeTree[i];\n            const masked = current & decode_js_1.BinTrieFlags.VALUE_LENGTH;\n            // If the branch is a value, store it and continue\n            if (masked) {\n                // The mask is the number of bytes of the value, including the current byte.\n                const valueLength = (masked >> 14) - 1;\n                // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n                // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n                if (cp !== unicode_js_1.CODE_POINTS.SEMICOLON && this._isCharacterReferenceInAttribute() && isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n                    //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n                    //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n                    result = [\n                        unicode_js_1.CODE_POINTS.AMPERSAND\n                    ];\n                    // Skip over the value.\n                    i += valueLength;\n                } else {\n                    // If this is a surrogate pair, consume the next two bytes.\n                    result = valueLength === 0 ? [\n                        decode_js_1.htmlDecodeTree[i] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH\n                    ] : valueLength === 1 ? [\n                        decode_js_1.htmlDecodeTree[++i]\n                    ] : [\n                        decode_js_1.htmlDecodeTree[++i],\n                        decode_js_1.htmlDecodeTree[++i]\n                    ];\n                    excess = 0;\n                    withoutSemicolon = cp !== unicode_js_1.CODE_POINTS.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n                    this._consume();\n                    break;\n                }\n            }\n        }\n        this._unconsume(excess);\n        if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n        }\n        // We want to emit the error above on the code point after the entity.\n        // We always consume one code point too many in the loop, and we wait to\n        // unconsume it until after the error is emitted.\n        this._unconsume(1);\n        return result;\n    }\n    _isCharacterReferenceInAttribute() {\n        return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        } else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch(this.state){\n            case State.DATA:\n                {\n                    this._stateData(cp);\n                    break;\n                }\n            case State.RCDATA:\n                {\n                    this._stateRcdata(cp);\n                    break;\n                }\n            case State.RAWTEXT:\n                {\n                    this._stateRawtext(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA:\n                {\n                    this._stateScriptData(cp);\n                    break;\n                }\n            case State.PLAINTEXT:\n                {\n                    this._statePlaintext(cp);\n                    break;\n                }\n            case State.TAG_OPEN:\n                {\n                    this._stateTagOpen(cp);\n                    break;\n                }\n            case State.END_TAG_OPEN:\n                {\n                    this._stateEndTagOpen(cp);\n                    break;\n                }\n            case State.TAG_NAME:\n                {\n                    this._stateTagName(cp);\n                    break;\n                }\n            case State.RCDATA_LESS_THAN_SIGN:\n                {\n                    this._stateRcdataLessThanSign(cp);\n                    break;\n                }\n            case State.RCDATA_END_TAG_OPEN:\n                {\n                    this._stateRcdataEndTagOpen(cp);\n                    break;\n                }\n            case State.RCDATA_END_TAG_NAME:\n                {\n                    this._stateRcdataEndTagName(cp);\n                    break;\n                }\n            case State.RAWTEXT_LESS_THAN_SIGN:\n                {\n                    this._stateRawtextLessThanSign(cp);\n                    break;\n                }\n            case State.RAWTEXT_END_TAG_OPEN:\n                {\n                    this._stateRawtextEndTagOpen(cp);\n                    break;\n                }\n            case State.RAWTEXT_END_TAG_NAME:\n                {\n                    this._stateRawtextEndTagName(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN:\n                {\n                    this._stateScriptDataLessThanSign(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_END_TAG_OPEN:\n                {\n                    this._stateScriptDataEndTagOpen(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_END_TAG_NAME:\n                {\n                    this._stateScriptDataEndTagName(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPE_START:\n                {\n                    this._stateScriptDataEscapeStart(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH:\n                {\n                    this._stateScriptDataEscapeStartDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED:\n                {\n                    this._stateScriptDataEscaped(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_DASH:\n                {\n                    this._stateScriptDataEscapedDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH:\n                {\n                    this._stateScriptDataEscapedDashDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:\n                {\n                    this._stateScriptDataEscapedLessThanSign(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:\n                {\n                    this._stateScriptDataEscapedEndTagOpen(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME:\n                {\n                    this._stateScriptDataEscapedEndTagName(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START:\n                {\n                    this._stateScriptDataDoubleEscapeStart(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED:\n                {\n                    this._stateScriptDataDoubleEscaped(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:\n                {\n                    this._stateScriptDataDoubleEscapedDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:\n                {\n                    this._stateScriptDataDoubleEscapedDashDash(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:\n                {\n                    this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                    break;\n                }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END:\n                {\n                    this._stateScriptDataDoubleEscapeEnd(cp);\n                    break;\n                }\n            case State.BEFORE_ATTRIBUTE_NAME:\n                {\n                    this._stateBeforeAttributeName(cp);\n                    break;\n                }\n            case State.ATTRIBUTE_NAME:\n                {\n                    this._stateAttributeName(cp);\n                    break;\n                }\n            case State.AFTER_ATTRIBUTE_NAME:\n                {\n                    this._stateAfterAttributeName(cp);\n                    break;\n                }\n            case State.BEFORE_ATTRIBUTE_VALUE:\n                {\n                    this._stateBeforeAttributeValue(cp);\n                    break;\n                }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED:\n                {\n                    this._stateAttributeValueDoubleQuoted(cp);\n                    break;\n                }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED:\n                {\n                    this._stateAttributeValueSingleQuoted(cp);\n                    break;\n                }\n            case State.ATTRIBUTE_VALUE_UNQUOTED:\n                {\n                    this._stateAttributeValueUnquoted(cp);\n                    break;\n                }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED:\n                {\n                    this._stateAfterAttributeValueQuoted(cp);\n                    break;\n                }\n            case State.SELF_CLOSING_START_TAG:\n                {\n                    this._stateSelfClosingStartTag(cp);\n                    break;\n                }\n            case State.BOGUS_COMMENT:\n                {\n                    this._stateBogusComment(cp);\n                    break;\n                }\n            case State.MARKUP_DECLARATION_OPEN:\n                {\n                    this._stateMarkupDeclarationOpen(cp);\n                    break;\n                }\n            case State.COMMENT_START:\n                {\n                    this._stateCommentStart(cp);\n                    break;\n                }\n            case State.COMMENT_START_DASH:\n                {\n                    this._stateCommentStartDash(cp);\n                    break;\n                }\n            case State.COMMENT:\n                {\n                    this._stateComment(cp);\n                    break;\n                }\n            case State.COMMENT_LESS_THAN_SIGN:\n                {\n                    this._stateCommentLessThanSign(cp);\n                    break;\n                }\n            case State.COMMENT_LESS_THAN_SIGN_BANG:\n                {\n                    this._stateCommentLessThanSignBang(cp);\n                    break;\n                }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH:\n                {\n                    this._stateCommentLessThanSignBangDash(cp);\n                    break;\n                }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:\n                {\n                    this._stateCommentLessThanSignBangDashDash(cp);\n                    break;\n                }\n            case State.COMMENT_END_DASH:\n                {\n                    this._stateCommentEndDash(cp);\n                    break;\n                }\n            case State.COMMENT_END:\n                {\n                    this._stateCommentEnd(cp);\n                    break;\n                }\n            case State.COMMENT_END_BANG:\n                {\n                    this._stateCommentEndBang(cp);\n                    break;\n                }\n            case State.DOCTYPE:\n                {\n                    this._stateDoctype(cp);\n                    break;\n                }\n            case State.BEFORE_DOCTYPE_NAME:\n                {\n                    this._stateBeforeDoctypeName(cp);\n                    break;\n                }\n            case State.DOCTYPE_NAME:\n                {\n                    this._stateDoctypeName(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_NAME:\n                {\n                    this._stateAfterDoctypeName(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD:\n                {\n                    this._stateAfterDoctypePublicKeyword(cp);\n                    break;\n                }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:\n                {\n                    this._stateBeforeDoctypePublicIdentifier(cp);\n                    break;\n                }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:\n                {\n                    this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                    break;\n                }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:\n                {\n                    this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:\n                {\n                    this._stateAfterDoctypePublicIdentifier(cp);\n                    break;\n                }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:\n                {\n                    this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD:\n                {\n                    this._stateAfterDoctypeSystemKeyword(cp);\n                    break;\n                }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:\n                {\n                    this._stateBeforeDoctypeSystemIdentifier(cp);\n                    break;\n                }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:\n                {\n                    this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                    break;\n                }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:\n                {\n                    this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                    break;\n                }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:\n                {\n                    this._stateAfterDoctypeSystemIdentifier(cp);\n                    break;\n                }\n            case State.BOGUS_DOCTYPE:\n                {\n                    this._stateBogusDoctype(cp);\n                    break;\n                }\n            case State.CDATA_SECTION:\n                {\n                    this._stateCdataSection(cp);\n                    break;\n                }\n            case State.CDATA_SECTION_BRACKET:\n                {\n                    this._stateCdataSectionBracket(cp);\n                    break;\n                }\n            case State.CDATA_SECTION_END:\n                {\n                    this._stateCdataSectionEnd(cp);\n                    break;\n                }\n            case State.CHARACTER_REFERENCE:\n                {\n                    this._stateCharacterReference(cp);\n                    break;\n                }\n            case State.NAMED_CHARACTER_REFERENCE:\n                {\n                    this._stateNamedCharacterReference(cp);\n                    break;\n                }\n            case State.AMBIGUOUS_AMPERSAND:\n                {\n                    this._stateAmbiguousAmpersand(cp);\n                    break;\n                }\n            case State.NUMERIC_CHARACTER_REFERENCE:\n                {\n                    this._stateNumericCharacterReference(cp);\n                    break;\n                }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE_START:\n                {\n                    this._stateHexademicalCharacterReferenceStart(cp);\n                    break;\n                }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE:\n                {\n                    this._stateHexademicalCharacterReference(cp);\n                    break;\n                }\n            case State.DECIMAL_CHARACTER_REFERENCE:\n                {\n                    this._stateDecimalCharacterReference(cp);\n                    break;\n                }\n            case State.NUMERIC_CHARACTER_REFERENCE_END:\n                {\n                    this._stateNumericCharacterReferenceEnd(cp);\n                    break;\n                }\n            default:\n                {\n                    throw new Error(\"Unknown state\");\n                }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.TAG_OPEN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.DATA;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitCodePoint(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.RCDATA;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.RCDATA_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        } else switch(cp){\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n                {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUESTION_MARK:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars(\"<\");\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars(\"<\");\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n        }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        } else switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars(\"</\");\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n        }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this.state = State.SELF_CLOSING_START_TAG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.tagName += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n                }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        } else {\n            this._emitChars(\"<\");\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        } else {\n            this._emitChars(\"</\");\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this._advanceBy(this.lastStartTagName.length);\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    return false;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this._advanceBy(this.lastStartTagName.length);\n                    this.state = State.SELF_CLOSING_START_TAG;\n                    return false;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._advanceBy(this.lastStartTagName.length);\n                    this.emitCurrentTagToken();\n                    this.state = State.DATA;\n                    return false;\n                }\n            default:\n                {\n                    return !this._ensureHibernation();\n                }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars(\"</\");\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        } else {\n            this._emitChars(\"<\");\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        } else {\n            this._emitChars(\"</\");\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars(\"</\");\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPE_START;\n                    this._emitChars(\"<!\");\n                    break;\n                }\n            default:\n                {\n                    this._emitChars(\"<\");\n                    this.state = State.SCRIPT_DATA;\n                    this._stateScriptData(cp);\n                }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        } else {\n            this._emitChars(\"</\");\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars(\"</\");\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars(\"-\");\n        } else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars(\"-\");\n        } else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.state = State.SCRIPT_DATA_ESCAPED;\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED;\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA;\n                    this._emitChars(\">\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.state = State.SCRIPT_DATA_ESCAPED;\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.SCRIPT_DATA_ESCAPED;\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        } else if (isAsciiLetter(cp)) {\n            this._emitChars(\"<\");\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        } else {\n            this._emitChars(\"<\");\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        } else {\n            this._emitChars(\"</\");\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars(\"</\");\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for(let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++){\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        } else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                    this._emitChars(\"<\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                    this._emitChars(\"<\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this._emitChars(\"-\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                    this._emitChars(\"<\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.SCRIPT_DATA;\n                    this._emitChars(\">\");\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                    this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars(\"/\");\n        } else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for(let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++){\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        } else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this.state = State.AFTER_ATTRIBUTE_NAME;\n                    this._stateAfterAttributeName(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedEqualsSignBeforeAttributeName);\n                    this._createAttr(\"=\");\n                    this.state = State.ATTRIBUTE_NAME;\n                    break;\n                }\n            default:\n                {\n                    this._createAttr(\"\");\n                    this.state = State.ATTRIBUTE_NAME;\n                    this._stateAttributeName(cp);\n                }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._leaveAttrName();\n                    this.state = State.AFTER_ATTRIBUTE_NAME;\n                    this._stateAfterAttributeName(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n                {\n                    this._leaveAttrName();\n                    this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedCharacterInAttributeName);\n                    this.currentAttr.name += String.fromCodePoint(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.currentAttr.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            default:\n                {\n                    this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n                }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this.state = State.SELF_CLOSING_START_TAG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n                {\n                    this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._createAttr(\"\");\n                    this.state = State.ATTRIBUTE_NAME;\n                    this._stateAttributeName(cp);\n                }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingAttributeValue);\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            default:\n                {\n                    this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                    this._stateAttributeValueUnquoted(cp);\n                }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.currentAttr.value += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.currentAttr.value += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.AMPERSAND:\n                {\n                    this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n                    this.state = State.CHARACTER_REFERENCE;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n            case unicode_js_1.CODE_POINTS.GRAVE_ACCENT:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedCharacterInUnquotedAttributeValue);\n                    this.currentAttr.value += String.fromCodePoint(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this.currentAttr.value += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.SELF_CLOSING_START_TAG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._leaveAttrValue();\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceBetweenAttributes);\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    this._stateBeforeAttributeName(cp);\n                }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    const token = this.currentToken;\n                    token.selfClosing = true;\n                    this.state = State.DATA;\n                    this.emitCurrentTagToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInTag);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedSolidusInTag);\n                    this.state = State.BEFORE_ATTRIBUTE_NAME;\n                    this._stateBeforeAttributeName(cp);\n                }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            default:\n                {\n                    token.data += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DASH_DASH, true)) {\n            this._createCommentToken(unicode_js_1.SEQUENCES.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation(unicode_js_1.SEQUENCES.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            } else {\n                this._err(error_codes_js_1.ERR.cdataInHtmlContent);\n                this._createCommentToken(unicode_js_1.SEQUENCES.CDATA_START.length + 1);\n                this.currentToken.data = \"[CDATA[\";\n                this.state = State.BOGUS_COMMENT;\n            }\n        } else if (!this._ensureHibernation()) {\n            this._err(error_codes_js_1.ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.COMMENT_START_DASH;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                    this.state = State.DATA;\n                    const token = this.currentToken;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            default:\n                {\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.COMMENT_END;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                    this.state = State.DATA;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += \"-\";\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.COMMENT_END_DASH;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    token.data += \"<\";\n                    this.state = State.COMMENT_LESS_THAN_SIGN;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n                {\n                    token.data += \"!\";\n                    this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n                {\n                    token.data += \"<\";\n                    break;\n                }\n            default:\n                {\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        } else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        } else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN && cp !== unicode_js_1.CODE_POINTS.EOF) {\n            this._err(error_codes_js_1.ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    this.state = State.COMMENT_END;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += \"-\";\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n                {\n                    this.state = State.COMMENT_END_BANG;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    token.data += \"-\";\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += \"--\";\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n                {\n                    token.data += \"--!\";\n                    this.state = State.COMMENT_END_DASH;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.incorrectlyClosedComment);\n                    this.state = State.DATA;\n                    this.emitCurrentComment(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInComment);\n                    this.emitCurrentComment(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.data += \"--!\";\n                    this.state = State.COMMENT;\n                    this._stateComment(cp);\n                }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BEFORE_DOCTYPE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.BEFORE_DOCTYPE_NAME;\n                    this._stateBeforeDoctypeName(cp);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceBeforeDoctypeName);\n                    this.state = State.BEFORE_DOCTYPE_NAME;\n                    this._stateBeforeDoctypeName(cp);\n                }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        } else switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(unicode_js_1.REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n        }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.AFTER_DOCTYPE_NAME;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n                }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.PUBLIC, false)) {\n                        this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                    } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.SYSTEM, false)) {\n                        this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                    } else if (!this._ensureHibernation()) {\n                        this._err(error_codes_js_1.ERR.invalidCharacterSequenceAfterDoctypeName);\n                        token.forceQuirks = true;\n                        this.state = State.BOGUS_DOCTYPE;\n                        this._stateBogusDoctype(cp);\n                    }\n                }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                    token.publicId = \"\";\n                    this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                    token.publicId = \"\";\n                    this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    token.publicId = \"\";\n                    this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    token.publicId = \"\";\n                    this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.publicId += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.publicId += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    token.systemId = \"\";\n                    this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.DATA;\n                    this.emitCurrentDoctype(token);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n                {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.systemId += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n                {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    token.systemId += String.fromCodePoint(cp);\n                }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n                {\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.NULL:\n                {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n                {\n                    this.state = State.CDATA_SECTION_BRACKET;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.EOF:\n                {\n                    this._err(error_codes_js_1.ERR.eofInCdata);\n                    this._emitEOFToken();\n                    break;\n                }\n            default:\n                {\n                    this._emitCodePoint(cp);\n                }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        } else {\n            this._emitChars(\"]\");\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch(cp){\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n                {\n                    this.state = State.DATA;\n                    break;\n                }\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n                {\n                    this._emitChars(\"]\");\n                    break;\n                }\n            default:\n                {\n                    this._emitChars(\"]]\");\n                    this.state = State.CDATA_SECTION;\n                    this._stateCdataSection(cp);\n                }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.NUMBER_SIGN) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE;\n        } else if (isAsciiAlphaNumeric(cp)) {\n            this.state = State.NAMED_CHARACTER_REFERENCE;\n            this._stateNamedCharacterReference(cp);\n        } else {\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Named character reference state\n    //------------------------------------------------------------------\n    _stateNamedCharacterReference(cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n        //NOTE: Matching can be abrupted by hibernation. In that case, match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n        // Stay in the state, try again.\n        } else if (matchResult) {\n            for(let i = 0; i < matchResult.length; i++){\n                this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n            }\n            this.state = this.returnState;\n        } else {\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this.state = State.AMBIGUOUS_AMPERSAND;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        } else {\n            if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n                this._err(error_codes_js_1.ERR.unknownNamedCharacterReference);\n            }\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === unicode_js_1.CODE_POINTS.LATIN_SMALL_X || cp === unicode_js_1.CODE_POINTS.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        } else if (isAsciiDigit(cp)) {\n            this.state = State.DECIMAL_CHARACTER_REFERENCE;\n            this._stateDecimalCharacterReference(cp);\n        } else {\n            this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReferenceStart(cp) {\n        if (isAsciiHexDigit(cp)) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n            this._stateHexademicalCharacterReference(cp);\n        } else {\n            this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n            this._unconsume(2);\n            this.state = this.returnState;\n        }\n    }\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        } else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        } else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        } else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        } else {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        } else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        } else {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReferenceEnd(cp) {\n        if (this.charRefCode === unicode_js_1.CODE_POINTS.NULL) {\n            this._err(error_codes_js_1.ERR.nullCharacterReference);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        } else if (this.charRefCode > 1114111) {\n            this._err(error_codes_js_1.ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        } else if ((0, unicode_js_1.isSurrogate)(this.charRefCode)) {\n            this._err(error_codes_js_1.ERR.surrogateCharacterReference);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        } else if ((0, unicode_js_1.isUndefinedCodePoint)(this.charRefCode)) {\n            this._err(error_codes_js_1.ERR.noncharacterCharacterReference);\n        } else if ((0, unicode_js_1.isControlCodePoint)(this.charRefCode) || this.charRefCode === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n            this._err(error_codes_js_1.ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n        }\n        this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n        this._reconsumeInState(this.returnState, cp);\n    }\n    constructor(options, handler){\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */ this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */ this.inForeignNode = false;\n        this.lastStartTagName = \"\";\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.charRefCode = -1;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = {\n            name: \"\",\n            value: \"\"\n        };\n        this.preprocessor = new preprocessor_js_1.Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n}\nexports.Tokenizer = Tokenizer; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/tokenizer/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/tokenizer/preprocessor.js":
/*!****************************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/tokenizer/preprocessor.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Preprocessor = void 0;\nconst unicode_js_1 = __webpack_require__(/*! ../common/unicode.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/unicode.js\");\nconst error_codes_js_1 = __webpack_require__(/*! ../common/error-codes.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/error-codes.js\");\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nclass Preprocessor {\n    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */ get col() {\n        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n    }\n    get offset() {\n        return this.droppedBufferSize + this.pos;\n    }\n    getError(code) {\n        const { line, col, offset } = this;\n        return {\n            code,\n            startLine: line,\n            endLine: line,\n            startCol: col,\n            endCol: col,\n            startOffset: offset,\n            endOffset: offset\n        };\n    }\n    _err(code) {\n        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n            this.lastErrOffset = this.offset;\n            this.handler.onParseError(this.getError(code));\n        }\n    }\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.html.length - 1) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n            if ((0, unicode_js_1.isSurrogatePair)(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n                //NOTE: add a gap that should be avoided during retreat\n                this._addGap();\n                return (0, unicode_js_1.getSurrogatePairCodePoint)(cp, nextCp);\n            }\n        } else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return unicode_js_1.CODE_POINTS.EOF;\n        }\n        //NOTE: isolated surrogate\n        this._err(error_codes_js_1.ERR.surrogateInInputStream);\n        return cp;\n    }\n    willDropParsedChunk() {\n        return this.pos > this.bufferWaterline;\n    }\n    dropParsedChunk() {\n        if (this.willDropParsedChunk()) {\n            this.html = this.html.substring(this.pos);\n            this.lineStartPos -= this.pos;\n            this.droppedBufferSize += this.pos;\n            this.pos = 0;\n            this.lastGapPos = -2;\n            this.gapStack.length = 0;\n        }\n    }\n    write(chunk, isLastChunk) {\n        if (this.html.length > 0) {\n            this.html += chunk;\n        } else {\n            this.html = chunk;\n        }\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n        this.endOfChunkHit = false;\n    }\n    startsWith(pattern, caseSensitive) {\n        // Check if our buffer has enough characters\n        if (this.pos + pattern.length > this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return false;\n        }\n        if (caseSensitive) {\n            return this.html.startsWith(pattern, this.pos);\n        }\n        for(let i = 0; i < pattern.length; i++){\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    peek(offset) {\n        const pos = this.pos + offset;\n        if (pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return unicode_js_1.CODE_POINTS.EOF;\n        }\n        const code = this.html.charCodeAt(pos);\n        return code === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN ? unicode_js_1.CODE_POINTS.LINE_FEED : code;\n    }\n    advance() {\n        this.pos++;\n        //NOTE: LF should be in the last column of the line\n        if (this.isEol) {\n            this.isEol = false;\n            this.line++;\n            this.lineStartPos = this.pos;\n        }\n        if (this.pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return unicode_js_1.CODE_POINTS.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n            this.isEol = true;\n            this.skipNextNewLine = true;\n            return unicode_js_1.CODE_POINTS.LINE_FEED;\n        }\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (cp === unicode_js_1.CODE_POINTS.LINE_FEED) {\n            this.isEol = true;\n            if (this.skipNextNewLine) {\n                // `line` will be bumped again in the recursive call.\n                this.line--;\n                this.skipNextNewLine = false;\n                this._addGap();\n                return this.advance();\n            }\n        }\n        this.skipNextNewLine = false;\n        if ((0, unicode_js_1.isSurrogate)(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null || cp > 0x1f && cp < 0x7f || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN || cp > 0x9f && cp < 64976;\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n        return cp;\n    }\n    _checkForProblematicCharacters(cp) {\n        if ((0, unicode_js_1.isControlCodePoint)(cp)) {\n            this._err(error_codes_js_1.ERR.controlCharacterInInputStream);\n        } else if ((0, unicode_js_1.isUndefinedCodePoint)(cp)) {\n            this._err(error_codes_js_1.ERR.noncharacterInInputStream);\n        }\n    }\n    retreat(count) {\n        this.pos -= count;\n        while(this.pos < this.lastGapPos){\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n        this.isEol = false;\n    }\n    constructor(handler){\n        this.handler = handler;\n        this.html = \"\";\n        this.pos = -1;\n        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n        this.lastGapPos = -2;\n        this.gapStack = [];\n        this.skipNextNewLine = false;\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n        this.line = 1;\n        //NOTE: avoid reporting errors twice on advance/retreat\n        this.lastErrOffset = -1;\n    }\n}\nexports.Preprocessor = Preprocessor; //# sourceMappingURL=preprocessor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/tokenizer/preprocessor.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/parse5/dist/cjs/tree-adapters/default.js":
/*!***************************************************************!*\
  !*** ./node_modules/parse5/dist/cjs/tree-adapters/default.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultTreeAdapter = void 0;\nconst html_js_1 = __webpack_require__(/*! ../common/html.js */ \"(app-pages-browser)/./node_modules/parse5/dist/cjs/common/html.js\");\nfunction createTextNode(value) {\n    return {\n        nodeName: \"#text\",\n        value,\n        parentNode: null\n    };\n}\nexports.defaultTreeAdapter = {\n    //Node construction\n    createDocument () {\n        return {\n            nodeName: \"#document\",\n            mode: html_js_1.DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: []\n        };\n    },\n    createDocumentFragment () {\n        return {\n            nodeName: \"#document-fragment\",\n            childNodes: []\n        };\n    },\n    createElement (tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null\n        };\n    },\n    createCommentNode (data) {\n        return {\n            nodeName: \"#comment\",\n            data,\n            parentNode: null\n        };\n    },\n    //Tree mutation\n    appendChild (parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore (parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent (templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent (templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType (document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node)=>node.nodeName === \"#documentType\");\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        } else {\n            const node = {\n                nodeName: \"#documentType\",\n                name,\n                publicId,\n                systemId,\n                parentNode: null\n            };\n            exports.defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode (document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode (document) {\n        return document.mode;\n    },\n    detachNode (node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText (parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (exports.defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        exports.defaultTreeAdapter.appendChild(parentNode, createTextNode(text));\n    },\n    insertTextBefore (parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && exports.defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        } else {\n            exports.defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes (recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr)=>attr.name));\n        for(let j = 0; j < attrs.length; j++){\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild (node) {\n        return node.childNodes[0];\n    },\n    getChildNodes (node) {\n        return node.childNodes;\n    },\n    getParentNode (node) {\n        return node.parentNode;\n    },\n    getAttrList (element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName (element) {\n        return element.tagName;\n    },\n    getNamespaceURI (element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent (textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent (commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName (doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId (doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId (doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode (node) {\n        return node.nodeName === \"#text\";\n    },\n    isCommentNode (node) {\n        return node.nodeName === \"#comment\";\n    },\n    isDocumentTypeNode (node) {\n        return node.nodeName === \"#documentType\";\n    },\n    isElementNode (node) {\n        return Object.prototype.hasOwnProperty.call(node, \"tagName\");\n    },\n    // Source code location\n    setNodeSourceCodeLocation (node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation (node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation (node, endLocation) {\n        node.sourceCodeLocation = Object.assign(Object.assign({}, node.sourceCodeLocation), endLocation);\n    }\n}; //# sourceMappingURL=default.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvdHJlZS1hZGFwdGVycy9kZWZhdWx0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBRyxLQUFLO0FBQ2xDLE1BQU1HLFlBQVlDLG1CQUFPQSxDQUFDLDRGQUFtQjtBQUM3QyxTQUFTQyxlQUFlSixLQUFLO0lBQ3pCLE9BQU87UUFDSEssVUFBVTtRQUNWTDtRQUNBTSxZQUFZO0lBQ2hCO0FBQ0o7QUFDQVAsMEJBQTBCLEdBQUc7SUFDekIsbUJBQW1CO0lBQ25CUTtRQUNJLE9BQU87WUFDSEYsVUFBVTtZQUNWRyxNQUFNTixVQUFVTyxhQUFhLENBQUNDLFNBQVM7WUFDdkNDLFlBQVksRUFBRTtRQUNsQjtJQUNKO0lBQ0FDO1FBQ0ksT0FBTztZQUNIUCxVQUFVO1lBQ1ZNLFlBQVksRUFBRTtRQUNsQjtJQUNKO0lBQ0FFLGVBQWNDLE9BQU8sRUFBRUMsWUFBWSxFQUFFQyxLQUFLO1FBQ3RDLE9BQU87WUFDSFgsVUFBVVM7WUFDVkE7WUFDQUU7WUFDQUQ7WUFDQUosWUFBWSxFQUFFO1lBQ2RMLFlBQVk7UUFDaEI7SUFDSjtJQUNBVyxtQkFBa0JDLElBQUk7UUFDbEIsT0FBTztZQUNIYixVQUFVO1lBQ1ZhO1lBQ0FaLFlBQVk7UUFDaEI7SUFDSjtJQUNBLGVBQWU7SUFDZmEsYUFBWWIsVUFBVSxFQUFFYyxPQUFPO1FBQzNCZCxXQUFXSyxVQUFVLENBQUNVLElBQUksQ0FBQ0Q7UUFDM0JBLFFBQVFkLFVBQVUsR0FBR0E7SUFDekI7SUFDQWdCLGNBQWFoQixVQUFVLEVBQUVjLE9BQU8sRUFBRUcsYUFBYTtRQUMzQyxNQUFNQyxlQUFlbEIsV0FBV0ssVUFBVSxDQUFDYyxPQUFPLENBQUNGO1FBQ25EakIsV0FBV0ssVUFBVSxDQUFDZSxNQUFNLENBQUNGLGNBQWMsR0FBR0o7UUFDOUNBLFFBQVFkLFVBQVUsR0FBR0E7SUFDekI7SUFDQXFCLG9CQUFtQkMsZUFBZSxFQUFFQyxjQUFjO1FBQzlDRCxnQkFBZ0JFLE9BQU8sR0FBR0Q7SUFDOUI7SUFDQUUsb0JBQW1CSCxlQUFlO1FBQzlCLE9BQU9BLGdCQUFnQkUsT0FBTztJQUNsQztJQUNBRSxpQkFBZ0JDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLFFBQVE7UUFDOUMsTUFBTUMsY0FBY0osU0FBU3RCLFVBQVUsQ0FBQzJCLElBQUksQ0FBQyxDQUFDQyxPQUFTQSxLQUFLbEMsUUFBUSxLQUFLO1FBQ3pFLElBQUlnQyxhQUFhO1lBQ2JBLFlBQVlILElBQUksR0FBR0E7WUFDbkJHLFlBQVlGLFFBQVEsR0FBR0E7WUFDdkJFLFlBQVlELFFBQVEsR0FBR0E7UUFDM0IsT0FDSztZQUNELE1BQU1HLE9BQU87Z0JBQ1RsQyxVQUFVO2dCQUNWNkI7Z0JBQ0FDO2dCQUNBQztnQkFDQTlCLFlBQVk7WUFDaEI7WUFDQVAsUUFBUUUsa0JBQWtCLENBQUNrQixXQUFXLENBQUNjLFVBQVVNO1FBQ3JEO0lBQ0o7SUFDQUMsaUJBQWdCUCxRQUFRLEVBQUV6QixJQUFJO1FBQzFCeUIsU0FBU3pCLElBQUksR0FBR0E7SUFDcEI7SUFDQWlDLGlCQUFnQlIsUUFBUTtRQUNwQixPQUFPQSxTQUFTekIsSUFBSTtJQUN4QjtJQUNBa0MsWUFBV0gsSUFBSTtRQUNYLElBQUlBLEtBQUtqQyxVQUFVLEVBQUU7WUFDakIsTUFBTXFDLE1BQU1KLEtBQUtqQyxVQUFVLENBQUNLLFVBQVUsQ0FBQ2MsT0FBTyxDQUFDYztZQUMvQ0EsS0FBS2pDLFVBQVUsQ0FBQ0ssVUFBVSxDQUFDZSxNQUFNLENBQUNpQixLQUFLO1lBQ3ZDSixLQUFLakMsVUFBVSxHQUFHO1FBQ3RCO0lBQ0o7SUFDQXNDLFlBQVd0QyxVQUFVLEVBQUV1QyxJQUFJO1FBQ3ZCLElBQUl2QyxXQUFXSyxVQUFVLENBQUNtQyxNQUFNLEdBQUcsR0FBRztZQUNsQyxNQUFNQyxXQUFXekMsV0FBV0ssVUFBVSxDQUFDTCxXQUFXSyxVQUFVLENBQUNtQyxNQUFNLEdBQUcsRUFBRTtZQUN4RSxJQUFJL0MsUUFBUUUsa0JBQWtCLENBQUMrQyxVQUFVLENBQUNELFdBQVc7Z0JBQ2pEQSxTQUFTL0MsS0FBSyxJQUFJNkM7Z0JBQ2xCO1lBQ0o7UUFDSjtRQUNBOUMsUUFBUUUsa0JBQWtCLENBQUNrQixXQUFXLENBQUNiLFlBQVlGLGVBQWV5QztJQUN0RTtJQUNBSSxrQkFBaUIzQyxVQUFVLEVBQUV1QyxJQUFJLEVBQUV0QixhQUFhO1FBQzVDLE1BQU13QixXQUFXekMsV0FBV0ssVUFBVSxDQUFDTCxXQUFXSyxVQUFVLENBQUNjLE9BQU8sQ0FBQ0YsaUJBQWlCLEVBQUU7UUFDeEYsSUFBSXdCLFlBQVloRCxRQUFRRSxrQkFBa0IsQ0FBQytDLFVBQVUsQ0FBQ0QsV0FBVztZQUM3REEsU0FBUy9DLEtBQUssSUFBSTZDO1FBQ3RCLE9BQ0s7WUFDRDlDLFFBQVFFLGtCQUFrQixDQUFDcUIsWUFBWSxDQUFDaEIsWUFBWUYsZUFBZXlDLE9BQU90QjtRQUM5RTtJQUNKO0lBQ0EyQixpQkFBZ0JDLFNBQVMsRUFBRW5DLEtBQUs7UUFDNUIsTUFBTW9DLG9CQUFvQixJQUFJQyxJQUFJRixVQUFVbkMsS0FBSyxDQUFDc0MsR0FBRyxDQUFDLENBQUNDLE9BQVNBLEtBQUtyQixJQUFJO1FBQ3pFLElBQUssSUFBSXNCLElBQUksR0FBR0EsSUFBSXhDLE1BQU04QixNQUFNLEVBQUVVLElBQUs7WUFDbkMsSUFBSSxDQUFDSixrQkFBa0JLLEdBQUcsQ0FBQ3pDLEtBQUssQ0FBQ3dDLEVBQUUsQ0FBQ3RCLElBQUksR0FBRztnQkFDdkNpQixVQUFVbkMsS0FBSyxDQUFDSyxJQUFJLENBQUNMLEtBQUssQ0FBQ3dDLEVBQUU7WUFDakM7UUFDSjtJQUNKO0lBQ0EsaUJBQWlCO0lBQ2pCRSxlQUFjbkIsSUFBSTtRQUNkLE9BQU9BLEtBQUs1QixVQUFVLENBQUMsRUFBRTtJQUM3QjtJQUNBZ0QsZUFBY3BCLElBQUk7UUFDZCxPQUFPQSxLQUFLNUIsVUFBVTtJQUMxQjtJQUNBaUQsZUFBY3JCLElBQUk7UUFDZCxPQUFPQSxLQUFLakMsVUFBVTtJQUMxQjtJQUNBdUQsYUFBWUMsT0FBTztRQUNmLE9BQU9BLFFBQVE5QyxLQUFLO0lBQ3hCO0lBQ0EsV0FBVztJQUNYK0MsWUFBV0QsT0FBTztRQUNkLE9BQU9BLFFBQVFoRCxPQUFPO0lBQzFCO0lBQ0FrRCxpQkFBZ0JGLE9BQU87UUFDbkIsT0FBT0EsUUFBUS9DLFlBQVk7SUFDL0I7SUFDQWtELG9CQUFtQkMsUUFBUTtRQUN2QixPQUFPQSxTQUFTbEUsS0FBSztJQUN6QjtJQUNBbUUsdUJBQXNCQyxXQUFXO1FBQzdCLE9BQU9BLFlBQVlsRCxJQUFJO0lBQzNCO0lBQ0FtRCx5QkFBd0JoQyxXQUFXO1FBQy9CLE9BQU9BLFlBQVlILElBQUk7SUFDM0I7SUFDQW9DLDZCQUE0QmpDLFdBQVc7UUFDbkMsT0FBT0EsWUFBWUYsUUFBUTtJQUMvQjtJQUNBb0MsNkJBQTRCbEMsV0FBVztRQUNuQyxPQUFPQSxZQUFZRCxRQUFRO0lBQy9CO0lBQ0EsWUFBWTtJQUNaWSxZQUFXVCxJQUFJO1FBQ1gsT0FBT0EsS0FBS2xDLFFBQVEsS0FBSztJQUM3QjtJQUNBbUUsZUFBY2pDLElBQUk7UUFDZCxPQUFPQSxLQUFLbEMsUUFBUSxLQUFLO0lBQzdCO0lBQ0FvRSxvQkFBbUJsQyxJQUFJO1FBQ25CLE9BQU9BLEtBQUtsQyxRQUFRLEtBQUs7SUFDN0I7SUFDQXFFLGVBQWNuQyxJQUFJO1FBQ2QsT0FBTzFDLE9BQU84RSxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDdEMsTUFBTTtJQUN0RDtJQUNBLHVCQUF1QjtJQUN2QnVDLDJCQUEwQnZDLElBQUksRUFBRXdDLFFBQVE7UUFDcEN4QyxLQUFLeUMsa0JBQWtCLEdBQUdEO0lBQzlCO0lBQ0FFLDJCQUEwQjFDLElBQUk7UUFDMUIsT0FBT0EsS0FBS3lDLGtCQUFrQjtJQUNsQztJQUNBRSw4QkFBNkIzQyxJQUFJLEVBQUU0QyxXQUFXO1FBQzFDNUMsS0FBS3lDLGtCQUFrQixHQUFHbkYsT0FBT3VGLE1BQU0sQ0FBQ3ZGLE9BQU91RixNQUFNLENBQUMsQ0FBQyxHQUFHN0MsS0FBS3lDLGtCQUFrQixHQUFHRztJQUN4RjtBQUNKLEdBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvdHJlZS1hZGFwdGVycy9kZWZhdWx0LmpzPzNiNzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRUcmVlQWRhcHRlciA9IHZvaWQgMDtcbmNvbnN0IGh0bWxfanNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vaHRtbC5qc1wiKTtcbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm9kZU5hbWU6ICcjdGV4dCcsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIH07XG59XG5leHBvcnRzLmRlZmF1bHRUcmVlQWRhcHRlciA9IHtcbiAgICAvL05vZGUgY29uc3RydWN0aW9uXG4gICAgY3JlYXRlRG9jdW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlTmFtZTogJyNkb2N1bWVudCcsXG4gICAgICAgICAgICBtb2RlOiBodG1sX2pzXzEuRE9DVU1FTlRfTU9ERS5OT19RVUlSS1MsXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlTmFtZTogJyNkb2N1bWVudC1mcmFnbWVudCcsXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSwgbmFtZXNwYWNlVVJJLCBhdHRycykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbm9kZU5hbWU6IHRhZ05hbWUsXG4gICAgICAgICAgICB0YWdOYW1lLFxuICAgICAgICAgICAgYXR0cnMsXG4gICAgICAgICAgICBuYW1lc3BhY2VVUkksXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgICAgICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVDb21tZW50Tm9kZShkYXRhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlTmFtZTogJyNjb21tZW50JyxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy9UcmVlIG11dGF0aW9uXG4gICAgYXBwZW5kQ2hpbGQocGFyZW50Tm9kZSwgbmV3Tm9kZSkge1xuICAgICAgICBwYXJlbnROb2RlLmNoaWxkTm9kZXMucHVzaChuZXdOb2RlKTtcbiAgICAgICAgbmV3Tm9kZS5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbiAgICB9LFxuICAgIGluc2VydEJlZm9yZShwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgICAgIGNvbnN0IGluc2VydGlvbklkeCA9IHBhcmVudE5vZGUuY2hpbGROb2Rlcy5pbmRleE9mKHJlZmVyZW5jZU5vZGUpO1xuICAgICAgICBwYXJlbnROb2RlLmNoaWxkTm9kZXMuc3BsaWNlKGluc2VydGlvbklkeCwgMCwgbmV3Tm9kZSk7XG4gICAgICAgIG5ld05vZGUucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgfSxcbiAgICBzZXRUZW1wbGF0ZUNvbnRlbnQodGVtcGxhdGVFbGVtZW50LCBjb250ZW50RWxlbWVudCkge1xuICAgICAgICB0ZW1wbGF0ZUVsZW1lbnQuY29udGVudCA9IGNvbnRlbnRFbGVtZW50O1xuICAgIH0sXG4gICAgZ2V0VGVtcGxhdGVDb250ZW50KHRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGVFbGVtZW50LmNvbnRlbnQ7XG4gICAgfSxcbiAgICBzZXREb2N1bWVudFR5cGUoZG9jdW1lbnQsIG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCkge1xuICAgICAgICBjb25zdCBkb2N0eXBlTm9kZSA9IGRvY3VtZW50LmNoaWxkTm9kZXMuZmluZCgobm9kZSkgPT4gbm9kZS5ub2RlTmFtZSA9PT0gJyNkb2N1bWVudFR5cGUnKTtcbiAgICAgICAgaWYgKGRvY3R5cGVOb2RlKSB7XG4gICAgICAgICAgICBkb2N0eXBlTm9kZS5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIGRvY3R5cGVOb2RlLnB1YmxpY0lkID0gcHVibGljSWQ7XG4gICAgICAgICAgICBkb2N0eXBlTm9kZS5zeXN0ZW1JZCA9IHN5c3RlbUlkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgICAgICAgICAgICBub2RlTmFtZTogJyNkb2N1bWVudFR5cGUnLFxuICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgcHVibGljSWQsXG4gICAgICAgICAgICAgICAgc3lzdGVtSWQsXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBleHBvcnRzLmRlZmF1bHRUcmVlQWRhcHRlci5hcHBlbmRDaGlsZChkb2N1bWVudCwgbm9kZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNldERvY3VtZW50TW9kZShkb2N1bWVudCwgbW9kZSkge1xuICAgICAgICBkb2N1bWVudC5tb2RlID0gbW9kZTtcbiAgICB9LFxuICAgIGdldERvY3VtZW50TW9kZShkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQubW9kZTtcbiAgICB9LFxuICAgIGRldGFjaE5vZGUobm9kZSkge1xuICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBpZHggPSBub2RlLnBhcmVudE5vZGUuY2hpbGROb2Rlcy5pbmRleE9mKG5vZGUpO1xuICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICBub2RlLnBhcmVudE5vZGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBpbnNlcnRUZXh0KHBhcmVudE5vZGUsIHRleHQpIHtcbiAgICAgICAgaWYgKHBhcmVudE5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2Tm9kZSA9IHBhcmVudE5vZGUuY2hpbGROb2Rlc1twYXJlbnROb2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAoZXhwb3J0cy5kZWZhdWx0VHJlZUFkYXB0ZXIuaXNUZXh0Tm9kZShwcmV2Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICBwcmV2Tm9kZS52YWx1ZSArPSB0ZXh0O1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBleHBvcnRzLmRlZmF1bHRUcmVlQWRhcHRlci5hcHBlbmRDaGlsZChwYXJlbnROb2RlLCBjcmVhdGVUZXh0Tm9kZSh0ZXh0KSk7XG4gICAgfSxcbiAgICBpbnNlcnRUZXh0QmVmb3JlKHBhcmVudE5vZGUsIHRleHQsIHJlZmVyZW5jZU5vZGUpIHtcbiAgICAgICAgY29uc3QgcHJldk5vZGUgPSBwYXJlbnROb2RlLmNoaWxkTm9kZXNbcGFyZW50Tm9kZS5jaGlsZE5vZGVzLmluZGV4T2YocmVmZXJlbmNlTm9kZSkgLSAxXTtcbiAgICAgICAgaWYgKHByZXZOb2RlICYmIGV4cG9ydHMuZGVmYXVsdFRyZWVBZGFwdGVyLmlzVGV4dE5vZGUocHJldk5vZGUpKSB7XG4gICAgICAgICAgICBwcmV2Tm9kZS52YWx1ZSArPSB0ZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXhwb3J0cy5kZWZhdWx0VHJlZUFkYXB0ZXIuaW5zZXJ0QmVmb3JlKHBhcmVudE5vZGUsIGNyZWF0ZVRleHROb2RlKHRleHQpLCByZWZlcmVuY2VOb2RlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWRvcHRBdHRyaWJ1dGVzKHJlY2lwaWVudCwgYXR0cnMpIHtcbiAgICAgICAgY29uc3QgcmVjaXBpZW50QXR0cnNNYXAgPSBuZXcgU2V0KHJlY2lwaWVudC5hdHRycy5tYXAoKGF0dHIpID0+IGF0dHIubmFtZSkpO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGF0dHJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoIXJlY2lwaWVudEF0dHJzTWFwLmhhcyhhdHRyc1tqXS5uYW1lKSkge1xuICAgICAgICAgICAgICAgIHJlY2lwaWVudC5hdHRycy5wdXNoKGF0dHJzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy9UcmVlIHRyYXZlcnNpbmdcbiAgICBnZXRGaXJzdENoaWxkKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGROb2Rlc1swXTtcbiAgICB9LFxuICAgIGdldENoaWxkTm9kZXMobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5jaGlsZE5vZGVzO1xuICAgIH0sXG4gICAgZ2V0UGFyZW50Tm9kZShub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLnBhcmVudE5vZGU7XG4gICAgfSxcbiAgICBnZXRBdHRyTGlzdChlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50LmF0dHJzO1xuICAgIH0sXG4gICAgLy9Ob2RlIGRhdGFcbiAgICBnZXRUYWdOYW1lKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQudGFnTmFtZTtcbiAgICB9LFxuICAgIGdldE5hbWVzcGFjZVVSSShlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50Lm5hbWVzcGFjZVVSSTtcbiAgICB9LFxuICAgIGdldFRleHROb2RlQ29udGVudCh0ZXh0Tm9kZSkge1xuICAgICAgICByZXR1cm4gdGV4dE5vZGUudmFsdWU7XG4gICAgfSxcbiAgICBnZXRDb21tZW50Tm9kZUNvbnRlbnQoY29tbWVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnROb2RlLmRhdGE7XG4gICAgfSxcbiAgICBnZXREb2N1bWVudFR5cGVOb2RlTmFtZShkb2N0eXBlTm9kZSkge1xuICAgICAgICByZXR1cm4gZG9jdHlwZU5vZGUubmFtZTtcbiAgICB9LFxuICAgIGdldERvY3VtZW50VHlwZU5vZGVQdWJsaWNJZChkb2N0eXBlTm9kZSkge1xuICAgICAgICByZXR1cm4gZG9jdHlwZU5vZGUucHVibGljSWQ7XG4gICAgfSxcbiAgICBnZXREb2N1bWVudFR5cGVOb2RlU3lzdGVtSWQoZG9jdHlwZU5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGRvY3R5cGVOb2RlLnN5c3RlbUlkO1xuICAgIH0sXG4gICAgLy9Ob2RlIHR5cGVzXG4gICAgaXNUZXh0Tm9kZShub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLm5vZGVOYW1lID09PSAnI3RleHQnO1xuICAgIH0sXG4gICAgaXNDb21tZW50Tm9kZShub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLm5vZGVOYW1lID09PSAnI2NvbW1lbnQnO1xuICAgIH0sXG4gICAgaXNEb2N1bWVudFR5cGVOb2RlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICcjZG9jdW1lbnRUeXBlJztcbiAgICB9LFxuICAgIGlzRWxlbWVudE5vZGUobm9kZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGUsICd0YWdOYW1lJyk7XG4gICAgfSxcbiAgICAvLyBTb3VyY2UgY29kZSBsb2NhdGlvblxuICAgIHNldE5vZGVTb3VyY2VDb2RlTG9jYXRpb24obm9kZSwgbG9jYXRpb24pIHtcbiAgICAgICAgbm9kZS5zb3VyY2VDb2RlTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICB9LFxuICAgIGdldE5vZGVTb3VyY2VDb2RlTG9jYXRpb24obm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5zb3VyY2VDb2RlTG9jYXRpb247XG4gICAgfSxcbiAgICB1cGRhdGVOb2RlU291cmNlQ29kZUxvY2F0aW9uKG5vZGUsIGVuZExvY2F0aW9uKSB7XG4gICAgICAgIG5vZGUuc291cmNlQ29kZUxvY2F0aW9uID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBub2RlLnNvdXJjZUNvZGVMb2NhdGlvbiksIGVuZExvY2F0aW9uKTtcbiAgICB9LFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdFRyZWVBZGFwdGVyIiwiaHRtbF9qc18xIiwicmVxdWlyZSIsImNyZWF0ZVRleHROb2RlIiwibm9kZU5hbWUiLCJwYXJlbnROb2RlIiwiY3JlYXRlRG9jdW1lbnQiLCJtb2RlIiwiRE9DVU1FTlRfTU9ERSIsIk5PX1FVSVJLUyIsImNoaWxkTm9kZXMiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY3JlYXRlRWxlbWVudCIsInRhZ05hbWUiLCJuYW1lc3BhY2VVUkkiLCJhdHRycyIsImNyZWF0ZUNvbW1lbnROb2RlIiwiZGF0YSIsImFwcGVuZENoaWxkIiwibmV3Tm9kZSIsInB1c2giLCJpbnNlcnRCZWZvcmUiLCJyZWZlcmVuY2VOb2RlIiwiaW5zZXJ0aW9uSWR4IiwiaW5kZXhPZiIsInNwbGljZSIsInNldFRlbXBsYXRlQ29udGVudCIsInRlbXBsYXRlRWxlbWVudCIsImNvbnRlbnRFbGVtZW50IiwiY29udGVudCIsImdldFRlbXBsYXRlQ29udGVudCIsInNldERvY3VtZW50VHlwZSIsImRvY3VtZW50IiwibmFtZSIsInB1YmxpY0lkIiwic3lzdGVtSWQiLCJkb2N0eXBlTm9kZSIsImZpbmQiLCJub2RlIiwic2V0RG9jdW1lbnRNb2RlIiwiZ2V0RG9jdW1lbnRNb2RlIiwiZGV0YWNoTm9kZSIsImlkeCIsImluc2VydFRleHQiLCJ0ZXh0IiwibGVuZ3RoIiwicHJldk5vZGUiLCJpc1RleHROb2RlIiwiaW5zZXJ0VGV4dEJlZm9yZSIsImFkb3B0QXR0cmlidXRlcyIsInJlY2lwaWVudCIsInJlY2lwaWVudEF0dHJzTWFwIiwiU2V0IiwibWFwIiwiYXR0ciIsImoiLCJoYXMiLCJnZXRGaXJzdENoaWxkIiwiZ2V0Q2hpbGROb2RlcyIsImdldFBhcmVudE5vZGUiLCJnZXRBdHRyTGlzdCIsImVsZW1lbnQiLCJnZXRUYWdOYW1lIiwiZ2V0TmFtZXNwYWNlVVJJIiwiZ2V0VGV4dE5vZGVDb250ZW50IiwidGV4dE5vZGUiLCJnZXRDb21tZW50Tm9kZUNvbnRlbnQiLCJjb21tZW50Tm9kZSIsImdldERvY3VtZW50VHlwZU5vZGVOYW1lIiwiZ2V0RG9jdW1lbnRUeXBlTm9kZVB1YmxpY0lkIiwiZ2V0RG9jdW1lbnRUeXBlTm9kZVN5c3RlbUlkIiwiaXNDb21tZW50Tm9kZSIsImlzRG9jdW1lbnRUeXBlTm9kZSIsImlzRWxlbWVudE5vZGUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzZXROb2RlU291cmNlQ29kZUxvY2F0aW9uIiwibG9jYXRpb24iLCJzb3VyY2VDb2RlTG9jYXRpb24iLCJnZXROb2RlU291cmNlQ29kZUxvY2F0aW9uIiwidXBkYXRlTm9kZVNvdXJjZUNvZGVMb2NhdGlvbiIsImVuZExvY2F0aW9uIiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/parse5/dist/cjs/tree-adapters/default.js\n"));

/***/ })

});